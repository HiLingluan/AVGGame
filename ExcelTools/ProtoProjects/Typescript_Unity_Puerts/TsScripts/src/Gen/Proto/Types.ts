
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

import {Bright} from 'csharp'
import ByteBuf = Bright.Serialization.ByteBuf

export class Vector2 implements ISerializable  {

    static deserializeFrom(buf: ByteBuf): Vector2 {
        var v = new Vector2()
        v.deserialize(buf)
        return v
    }

    x: number
    y: number
    constructor(x: number = 0, y: number = 0) {
        this.x = x
        this.y = y
    }

    serialize(_buf_: ByteBuf) {
        _buf_.WriteFloat(this.x)
        _buf_.WriteFloat(this.y)
    }

    deserialize(buf: ByteBuf) {
        this.x = buf.ReadFloat()
        this.y = buf.ReadFloat()
    }
}

export class Vector3 implements ISerializable{
    static deserializeFrom(buf: ByteBuf): Vector3 {
        var v = new Vector3()
        v.deserialize(buf)
        return v
    }

    x: number
    y: number
    z: number

    constructor(x: number = 0, y: number = 0, z: number = 0) {
        this.x = x
        this.y = y
        this.z = z
    }

    serialize(_buf_: ByteBuf) {
        _buf_.WriteFloat(this.x)
        _buf_.WriteFloat(this.y)
        _buf_.WriteFloat(this.z)
    }

    deserialize(buf: ByteBuf) {
        this.x = buf.ReadFloat()
        this.y = buf.ReadFloat()
        this.z = buf.ReadFloat()
    }
}

export class Vector4 implements ISerializable {
    static deserializeFrom(buf: ByteBuf): Vector4 {
        var v = new Vector4()
        v.deserialize(buf)
        return v
    }
    
    x: number
    y: number
    z: number
    w: number

    constructor(x: number = 0, y: number = 0, z: number = 0, w: number = 0) {
        this.x = x
        this.y = y
        this.z = z
        this.w = w
    }

    serialize(_buf_: ByteBuf) {
        _buf_.WriteFloat(this.x)
        _buf_.WriteFloat(this.y)
        _buf_.WriteFloat(this.z)
        _buf_.WriteFloat(this.w)
    }

    deserialize(buf: ByteBuf) {
        this.x = buf.ReadFloat()
        this.y = buf.ReadFloat()
        this.z = buf.ReadFloat()
        this.z = buf.ReadFloat()
    }
}


export interface ISerializable {
    serialize(buf: ByteBuf): void
    deserialize(buf: ByteBuf): void
}

export abstract class BeanBase implements ISerializable {
    abstract getTypeId(): number
    abstract serialize(buf: Bright.Serialization.ByteBuf): void
    abstract deserialize(buf: Bright.Serialization.ByteBuf): void
}


export abstract class Protocol implements ISerializable {
    abstract getTypeId(): number
    abstract serialize(buf: ByteBuf): void
    abstract deserialize(buf: ByteBuf): void
}

export namespace proto {



export namespace test {

export  class Simple extends BeanBase {

    static readonly __ID__ = 0
    getTypeId() { return Simple.__ID__ }



     x : number
     y : number

    constructor() {
        super()
        this.x = 0
        this.y = 0
    }
    

    serialize(_buf_ : ByteBuf) {
        _buf_.WriteInt(this.x)
        _buf_.WriteInt(this.y)
    }

    deserialize(_buf_ : ByteBuf) {
        this.x = _buf_.ReadInt()
        this.y = _buf_.ReadInt()
    }

    toString(): string {
        return 'test.Simple{ '
            + 'x:' + this.x + ','
            + 'y:' + this.y + ','
        + '}'
    }
}
}



export namespace test {

export  abstract  class Dyn extends BeanBase {
    static serializeTo(_buf_ : ByteBuf, _bean_ : Dyn) {
        _buf_.WriteInt(_bean_.getTypeId())
        _bean_.serialize(_buf_)
    }

    static deserializeFrom(_buf_ : ByteBuf) : Dyn {
        let  _bean_ :Dyn
        switch (_buf_.ReadInt()) {
            case 1: _bean_ = new test.Child2(); break
            case 10: _bean_ = new test.Child31(); break
            case 11: _bean_ = new test.Child32(); break
            default: throw new Error()
        }
        _bean_.deserialize(_buf_)
        return _bean_
    }



     a1 : number

    constructor() {
        super()
        this.a1 = 0
    }
    

    serialize(_buf_ : ByteBuf) {
        _buf_.WriteInt(this.a1)
    }

    deserialize(_buf_ : ByteBuf) {
        this.a1 = _buf_.ReadInt()
    }

    toString(): string {
        return 'test.Dyn{ '
            + 'a1:' + this.a1 + ','
        + '}'
    }
}
}



export namespace test {

export  class Child2 extends test.Dyn {

    static readonly __ID__ = 1
    getTypeId() { return Child2.__ID__ }



     a20 : number

    constructor() {
        super()
        this.a20 = 0
    }
    

    serialize(_buf_ : ByteBuf) {
        super.serialize(_buf_)
        _buf_.WriteInt(this.a20)
    }

    deserialize(_buf_ : ByteBuf) {
        super.deserialize(_buf_)
        this.a20 = _buf_.ReadInt()
    }

    toString(): string {
        return 'test.Child2{ '
            + 'a1:' + this.a1 + ','
            + 'a20:' + this.a20 + ','
        + '}'
    }
}
}



export namespace test {

export  abstract  class Child21 extends test.Dyn {
    static serializeTo(_buf_ : ByteBuf, _bean_ : Child21) {
        _buf_.WriteInt(_bean_.getTypeId())
        _bean_.serialize(_buf_)
    }

    static deserializeFrom(_buf_ : ByteBuf) : Child21 {
        let  _bean_ :Child21
        switch (_buf_.ReadInt()) {
            case 10: _bean_ = new test.Child31(); break
            case 11: _bean_ = new test.Child32(); break
            default: throw new Error()
        }
        _bean_.deserialize(_buf_)
        return _bean_
    }



     a24 : number

    constructor() {
        super()
        this.a24 = 0
    }
    

    serialize(_buf_ : ByteBuf) {
        super.serialize(_buf_)
        _buf_.WriteInt(this.a24)
    }

    deserialize(_buf_ : ByteBuf) {
        super.deserialize(_buf_)
        this.a24 = _buf_.ReadInt()
    }

    toString(): string {
        return 'test.Child21{ '
            + 'a1:' + this.a1 + ','
            + 'a24:' + this.a24 + ','
        + '}'
    }
}
}



export namespace test {

export  class Child31 extends test.Child21 {

    static readonly __ID__ = 10
    getTypeId() { return Child31.__ID__ }



     a31 : number
     a32 : number

    constructor() {
        super()
        this.a31 = 0
        this.a32 = 0
    }
    

    serialize(_buf_ : ByteBuf) {
        super.serialize(_buf_)
        _buf_.WriteInt(this.a31)
        _buf_.WriteInt(this.a32)
    }

    deserialize(_buf_ : ByteBuf) {
        super.deserialize(_buf_)
        this.a31 = _buf_.ReadInt()
        this.a32 = _buf_.ReadInt()
    }

    toString(): string {
        return 'test.Child31{ '
            + 'a1:' + this.a1 + ','
            + 'a24:' + this.a24 + ','
            + 'a31:' + this.a31 + ','
            + 'a32:' + this.a32 + ','
        + '}'
    }
}
}



export namespace test {

export  class Child32 extends test.Child21 {

    static readonly __ID__ = 11
    getTypeId() { return Child32.__ID__ }



     b31 : number
     b32 : number

    constructor() {
        super()
        this.b31 = 0
        this.b32 = 0
    }
    

    serialize(_buf_ : ByteBuf) {
        super.serialize(_buf_)
        _buf_.WriteInt(this.b31)
        _buf_.WriteInt(this.b32)
    }

    deserialize(_buf_ : ByteBuf) {
        super.deserialize(_buf_)
        this.b31 = _buf_.ReadInt()
        this.b32 = _buf_.ReadInt()
    }

    toString(): string {
        return 'test.Child32{ '
            + 'a1:' + this.a1 + ','
            + 'a24:' + this.a24 + ','
            + 'b31:' + this.b31 + ','
            + 'b32:' + this.b32 + ','
        + '}'
    }
}
}



export namespace test {

export  class AllType extends BeanBase {

    static readonly __ID__ = 0
    getTypeId() { return AllType.__ID__ }



     x1 : boolean
     x2 : number
     x3 : number
     x4 : number
     x5 : number
     x6 : number
     x7 : number
     x8 : bigint
     a1 : string
     a2 : Uint8Array
     b1 : Int32Array
     b2 : test.Simple[]
     b3 : test.Dyn[]
     c1 : number[]
     c2 : test.Simple[]
     c3 : test.Dyn[]
     d1 : Set<number>
     e1 : Map<number, number>
     e2 : Map<number, test.Simple>
     e3 : Map<number, test.Dyn>

    constructor() {
        super()
        this.x1 = false
        this.x2 = 0
        this.x3 = 0
        this.x4 = 0
        this.x5 = 0
        this.x6 = 0
        this.x7 = 0
        this.x8 = BigInt(0)
        this.a1 = ""
        this.a2 = new Uint8Array()
        this.b1 = new Int32Array()
        this.b2 = []
        this.b3 = []
        this.c1 = []
        this.c2 = []
        this.c3 = []
        this.d1 = new Set()
        this.e1 = new Map()
        this.e2 = new Map()
        this.e3 = new Map()
    }
    

    serialize(_buf_ : ByteBuf) {
        _buf_.WriteBool(this.x1)
        _buf_.WriteByte(this.x2)
        _buf_.WriteShort(this.x3)
        _buf_.WriteFshort(this.x4)
        _buf_.WriteInt(this.x5)
        _buf_.WriteFint(this.x6)
        _buf_.WriteNumberAsLong(this.x7)
        _buf_.WriteFlong(this.x8)
        _buf_.WriteString(this.a1)
        _buf_.WriteArrayBuffer(this.a2.buffer)
        { _buf_.WriteSize(this.b1.length);   for(let _e of this.b1) { _buf_.WriteInt(_e) } }
        { _buf_.WriteSize(this.b2.length);   for(let _e of this.b2) { _e.serialize(_buf_) } }
        { _buf_.WriteSize(this.b3.length);   for(let _e of this.b3) { test.Dyn.serializeTo(_buf_, _e) } }
        { _buf_.WriteSize(this.c1.length);   for(let _e of this.c1) { _buf_.WriteInt(_e) } }
        { _buf_.WriteSize(this.c2.length);   for(let _e of this.c2) { _e.serialize(_buf_) } }
        { _buf_.WriteSize(this.c3.length);   for(let _e of this.c3) { test.Dyn.serializeTo(_buf_, _e) } }
        { _buf_.WriteSize(this.d1.size);   for(let _e of this.d1) { _buf_.WriteInt(_e) } }
        { _buf_.WriteSize(this.e1.size);   for(let [_k, _v] of this.e1) { _buf_.WriteInt(_k); _buf_.WriteInt(_v) } }
        { _buf_.WriteSize(this.e2.size);   for(let [_k, _v] of this.e2) { _buf_.WriteInt(_k); _v.serialize(_buf_) } }
        { _buf_.WriteSize(this.e3.size);   for(let [_k, _v] of this.e3) { _buf_.WriteInt(_k); test.Dyn.serializeTo(_buf_, _v) } }
    }

    deserialize(_buf_ : ByteBuf) {
        this.x1 = _buf_.ReadBool()
        this.x2 = _buf_.ReadByte()
        this.x3 = _buf_.ReadShort()
        this.x4 = _buf_.ReadFshort()
        this.x5 = _buf_.ReadInt()
        this.x6 = _buf_.ReadFint()
        this.x7 = _buf_.ReadLongAsNumber()
        this.x8 = _buf_.ReadFlong()
        this.a1 = _buf_.ReadString()
        this.a2 = new Uint8Array(_buf_.ReadArrayBuffer())
        { let n = Math.min(_buf_.ReadSize(), _buf_.Size); this.b1 = new Int32Array(n); for(let i = 0 ; i < n ; i++) { let _e :number;_e = _buf_.ReadInt(); this.b1[i] = _e } }
        { let n = Math.min(_buf_.ReadSize(), _buf_.Size); this.b2 = []; for(let i = 0 ; i < n ; i++) { let _e :test.Simple;_e = new test.Simple(); _e.deserialize(_buf_); this.b2.push(_e) } }
        { let n = Math.min(_buf_.ReadSize(), _buf_.Size); this.b3 = []; for(let i = 0 ; i < n ; i++) { let _e :test.Dyn;_e = test.Dyn.deserializeFrom(_buf_); this.b3.push(_e) } }
        { this.c1 = []; for(let i = 0, n = _buf_.ReadSize() ; i < n ; i++) { let _e :number; _e = _buf_.ReadInt(); this.c1.push(_e) } }
        { this.c2 = []; for(let i = 0, n = _buf_.ReadSize() ; i < n ; i++) { let _e :test.Simple; _e = new test.Simple(); _e.deserialize(_buf_); this.c2.push(_e) } }
        { this.c3 = []; for(let i = 0, n = _buf_.ReadSize() ; i < n ; i++) { let _e :test.Dyn; _e = test.Dyn.deserializeFrom(_buf_); this.c3.push(_e) } }
        { this.d1 = new Set<number>(); for(let i = 0, n = _buf_.ReadSize() ; i < n ; i++) { let _e:number;_e = _buf_.ReadInt(); this.d1.add(_e);}}
        { this.e1 = new Map<number, number>(); for(let i = 0, n = _buf_.ReadSize() ; i < n ; i++) { let _k:number; _k = _buf_.ReadInt(); let _v:number; _v = _buf_.ReadInt(); this.e1.set(_k, _v);  } }
        { this.e2 = new Map<number, test.Simple>(); for(let i = 0, n = _buf_.ReadSize() ; i < n ; i++) { let _k:number; _k = _buf_.ReadInt(); let _v:test.Simple; _v = new test.Simple(); _v.deserialize(_buf_); this.e2.set(_k, _v);  } }
        { this.e3 = new Map<number, test.Dyn>(); for(let i = 0, n = _buf_.ReadSize() ; i < n ; i++) { let _k:number; _k = _buf_.ReadInt(); let _v:test.Dyn; _v = test.Dyn.deserializeFrom(_buf_); this.e3.set(_k, _v);  } }
    }

    toString(): string {
        return 'test.AllType{ '
            + 'x1:' + this.x1 + ','
            + 'x2:' + this.x2 + ','
            + 'x3:' + this.x3 + ','
            + 'x4:' + this.x4 + ','
            + 'x5:' + this.x5 + ','
            + 'x6:' + this.x6 + ','
            + 'x7:' + this.x7 + ','
            + 'x8:' + this.x8 + ','
            + 'a1:' + this.a1 + ','
            + 'a2:' + this.a2 + ','
            + 'b1:' + this.b1 + ','
            + 'b2:' + this.b2 + ','
            + 'b3:' + this.b3 + ','
            + 'c1:' + this.c1 + ','
            + 'c2:' + this.c2 + ','
            + 'c3:' + this.c3 + ','
            + 'd1:' + this.d1 + ','
            + 'e1:' + this.e1 + ','
            + 'e2:' + this.e2 + ','
            + 'e3:' + this.e3 + ','
        + '}'
    }
}
}



export namespace test {

export  class TestRpcArg extends BeanBase {

    static readonly __ID__ = 0
    getTypeId() { return TestRpcArg.__ID__ }



     x : number
     y : string

    constructor() {
        super()
        this.x = 0
        this.y = ""
    }
    

    serialize(_buf_ : ByteBuf) {
        _buf_.WriteInt(this.x)
        _buf_.WriteString(this.y)
    }

    deserialize(_buf_ : ByteBuf) {
        this.x = _buf_.ReadInt()
        this.y = _buf_.ReadString()
    }

    toString(): string {
        return 'test.TestRpcArg{ '
            + 'x:' + this.x + ','
            + 'y:' + this.y + ','
        + '}'
    }
}
}



export namespace test {

export  class TestRpcRes extends BeanBase {

    static readonly __ID__ = 0
    getTypeId() { return TestRpcRes.__ID__ }



     x : number
     y : number

    constructor() {
        super()
        this.x = 0
        this.y = 0
    }
    

    serialize(_buf_ : ByteBuf) {
        _buf_.WriteInt(this.x)
        _buf_.WriteInt(this.y)
    }

    deserialize(_buf_ : ByteBuf) {
        this.x = _buf_.ReadInt()
        this.y = _buf_.ReadInt()
    }

    toString(): string {
        return 'test.TestRpcRes{ '
            + 'x:' + this.x + ','
            + 'y:' + this.y + ','
        + '}'
    }
}
}

export namespace test {

export class TestProto1 extends Protocol {
    static readonly __ID__ = 23983
    getTypeId() { return TestProto1.__ID__ }


     x : number
     y : string

    constructor() {
        super()
        this.x = 0
        this.y = ""
    }

    serialize(_buf_ : ByteBuf) {
        _buf_.WriteInt(this.x)
        _buf_.WriteString(this.y)
    }

    deserialize(_buf_ : ByteBuf) {
        this.x = _buf_.ReadInt()
        this.y = _buf_.ReadString()
    }

    toString(): string {
        return 'test.TestProto1{ '
            + 'x:' + this.x + ','
            + 'y:' + this.y + ','
        + '}'
    }
}
}


export namespace test {

export class Foo extends Protocol {
    static readonly __ID__ = 1234
    getTypeId() { return Foo.__ID__ }


     x : number
     y : test.AllType
     z : test.Simple

    constructor() {
        super()
        this.x = 0
        this.y = new test.AllType()
        this.z = new test.Simple()
    }

    serialize(_buf_ : ByteBuf) {
        _buf_.WriteInt(this.x)
        this.y.serialize(_buf_)
        this.z.serialize(_buf_)
    }

    deserialize(_buf_ : ByteBuf) {
        this.x = _buf_.ReadInt()
        this.y = new test.AllType(); this.y.deserialize(_buf_)
        this.z = new test.Simple(); this.z.deserialize(_buf_)
    }

    toString(): string {
        return 'test.Foo{ '
            + 'x:' + this.x + ','
            + 'y:' + this.y + ','
            + 'z:' + this.z + ','
        + '}'
    }
}
}



// TODO test.TestRpc



// TODO test.TestRpc2


    type ProtocolFactory = () => Protocol

    export class ProtocolStub {
        static readonly Factories = new Map<number, ProtocolFactory>([

            [test.TestProto1.__ID__, () => new test.TestProto1()],
            [test.Foo.__ID__, () => new test.Foo()],

            // TODO RPC .. [test.TestRpc.__ID__] = () => new test.TestRpc(),
            // TODO RPC .. [test.TestRpc2.__ID__] = () => new test.TestRpc2(),
        ])
    }

}