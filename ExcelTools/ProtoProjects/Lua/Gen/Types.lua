
--[[------------------------------------------------------------------------------
-- <auto-generated>
--     This code was generated by a tool.
--     Changes to this file may cause incorrect behavior and will be lost if
--     the code is regenerated.
-- </auto-generated>
--]]------------------------------------------------------------------------------

local setmetatable = setmetatable
local pairs = pairs
local ipairs = ipairs
local tinsert = table.insert

local function SimpleClass()
    local class = {}
    class.__index = class
    class.New = function(...)
        local ctor = class.ctor
        local o = ctor and ctor(...) or {}
        setmetatable(o, class)
        return o
    end
    return class
end

local function get_map_size(m)
    local n = 0
    for _ in pairs(m) do
        n = n + 1
    end
    return n
end

local enums =
{
}


local function InitTypes(methods)
    local readBool = methods.readBool
    local writeBool = methods.writeBool
    local readByte = methods.readByte
    local writeByte = methods.writeByte
    local readShort = methods.readShort
    local writeShort = methods.writeShort
    local readFshort = methods.readFshort
    local writeInt = methods.writeInt
    local readInt = methods.readInt
    local writeFint = methods.writeFint
    local readFint = methods.readFint
    local readLong = methods.readLong
    local writeLong = methods.writeLong
    local readFlong = methods.readFlong
    local writeFlong = methods.writeFlong
    local readFloat = methods.readFloat
    local writeFloat = methods.writeFloat
    local readDouble = methods.readDouble
    local writeDouble = methods.writeDouble
    local readSize = methods.readSize
    local writeSize = methods.writeSize

    local readString = methods.readString
    local writeString = methods.writeString
    local readBytes = methods.readBytes
    local writeBytes = methods.writeBytes

    local function readVector2(bs)
        return { x = readFloat(bs), y = readFloat(bs) }
    end
    
    local function writeVector2(bs, v)
        writeFloat(bs, v.x)
        writeFloat(bs, v.y)
    end

    local function readVector3(bs)
        return { x = readFloat(bs), y = readFloat(bs), z = readFloat(bs) }
    end
    
    local function writeVector3(bs, v)
        writeFloat(bs, v.x)
        writeFloat(bs, v.y)
        writeFloat(bs, v.z)
    end


    local function readVector4(bs)
        return { x = readFloat(bs), y = readFloat(bs), z = readFloat(bs), w = readFloat(bs) }
    end
    
    local function writeVector4(bs, v)
        writeFloat(bs, v.x)
        writeFloat(bs, v.y)
        writeFloat(bs, v.z)
        writeFloat(bs, v.w)
    end

    local function writeList(bs, list, keyFun)
        writeSize(bs, #list)
        for _, v in pairs(list) do 
            keyFun(bs, v)    
        end
    end

    local function readList(bs, keyFun)
        local list = {}
        local v
        for i = 1, readSize(bs) do
            tinsert(list, keyFun(bs))
        end
        return list
    end

    local writeArray = writeList
    local readArray = readList

    local function writeSet(bs, set, keyFun)
        writeSize(bs, #set)
        for _, v in ipairs(set) do
            keyFun(bs, v)
        end
    end

    local function readSet(bs, keyFun)
        local set = {}
        local v
        for i = 1, readSize(bs) do
            tinsert(set, keyFun(bs))
        end
        return set
    end

    local function writeMap(bs, map, keyFun, valueFun)
        writeSize(bs, get_map_size(map))
        for k, v in pairs(map) do
            keyFun(bs, k)
            valueFun(bs, v)
        end
    end

    local function readMap(bs, keyFun, valueFun)
        local map = {}
        for i = 1, readSize(bs) do
            local k = keyFun(bs)
            local v = valueFun(bs)
            map[k] = v
        end
        return map
    end

    local function readNullableBool(bs)
        if readBool(bs) then
            return readBool(bs)
        end
    end

    local default_vector2 = {x=0,y=0}
    local default_vector3 = {x=0,y=0,z=0}
    local default_vector4 = {x=0,y=0,z=0,w=0}

    local beans = {}

    do
    ---@class test.Simple 
     ---@field public x int
     ---@field public y int

        local class = SimpleClass()
        class._id = 0
        class._name = 'test.Simple'
        local id2name = {  }

        class._serialize = function(bs, self)
            writeInt(bs, self.x or 0)
            writeInt(bs, self.y or 0)
        end
        class._deserialize = function(bs)
            local o = {
                x = readInt(bs),
                y = readInt(bs),
            }
            setmetatable(o, class)
            return o
        end

        beans[class._name] = class
    end

    do
    ---@class test.Dyn 
     ---@field public a1 int

        local class = SimpleClass()
        class._id = 0
        class._name = 'test.Dyn'
        local id2name = {  [1] = 'test.Child2',  [10] = 'test.Child31',  [11] = 'test.Child32',  }

        class._serialize = function(bs, self)
            writeInt(bs, 0)
            beans[self._name]._serialize(bs, self)
        end
        class._deserialize = function(bs)
            local id = readInt(bs)
            return beans[id2name[id]]._deserialize(bs)
        end

        beans[class._name] = class
    end

    do
    ---@class test.Child2 :test.Dyn 
     ---@field public a20 int

        local class = SimpleClass()
        class._id = 1
        class._name = 'test.Child2'
        local id2name = {  }

        class._serialize = function(bs, self)
            writeInt(bs, self.a1 or 0)
            writeInt(bs, self.a20 or 0)
        end
        class._deserialize = function(bs)
            local o = {
                a1 = readInt(bs),
                a20 = readInt(bs),
            }
            setmetatable(o, class)
            return o
        end

        beans[class._name] = class
    end

    do
    ---@class test.Child21 :test.Dyn 
     ---@field public a24 int

        local class = SimpleClass()
        class._id = 0
        class._name = 'test.Child21'
        local id2name = {  [10] = 'test.Child31',  [11] = 'test.Child32',  }

        class._serialize = function(bs, self)
            writeInt(bs, 0)
            beans[self._name]._serialize(bs, self)
        end
        class._deserialize = function(bs)
            local id = readInt(bs)
            return beans[id2name[id]]._deserialize(bs)
        end

        beans[class._name] = class
    end

    do
    ---@class test.Child31 :test.Child21 
     ---@field public a31 int
     ---@field public a32 int

        local class = SimpleClass()
        class._id = 10
        class._name = 'test.Child31'
        local id2name = {  }

        class._serialize = function(bs, self)
            writeInt(bs, self.a1 or 0)
            writeInt(bs, self.a24 or 0)
            writeInt(bs, self.a31 or 0)
            writeInt(bs, self.a32 or 0)
        end
        class._deserialize = function(bs)
            local o = {
                a1 = readInt(bs),
                a24 = readInt(bs),
                a31 = readInt(bs),
                a32 = readInt(bs),
            }
            setmetatable(o, class)
            return o
        end

        beans[class._name] = class
    end

    do
    ---@class test.Child32 :test.Child21 
     ---@field public b31 int
     ---@field public b32 int

        local class = SimpleClass()
        class._id = 11
        class._name = 'test.Child32'
        local id2name = {  }

        class._serialize = function(bs, self)
            writeInt(bs, self.a1 or 0)
            writeInt(bs, self.a24 or 0)
            writeInt(bs, self.b31 or 0)
            writeInt(bs, self.b32 or 0)
        end
        class._deserialize = function(bs)
            local o = {
                a1 = readInt(bs),
                a24 = readInt(bs),
                b31 = readInt(bs),
                b32 = readInt(bs),
            }
            setmetatable(o, class)
            return o
        end

        beans[class._name] = class
    end

    do
    ---@class test.AllType 
     ---@field public x1 bool
     ---@field public x2 byte
     ---@field public x3 short
     ---@field public x4 short
     ---@field public x5 int
     ---@field public x6 int
     ---@field public x7 long
     ---@field public x8 long
     ---@field public a1 string
     ---@field public a2 string
     ---@field public b1 int[]
     ---@field public b2 test.Simple[]
     ---@field public b3 test.Dyn[]
     ---@field public c1 int[]
     ---@field public c2 test.Simple[]
     ---@field public c3 test.Dyn[]
     ---@field public d1 int[]
     ---@field public e1 table<int,int>
     ---@field public e2 table<int,test.Simple>
     ---@field public e3 table<int,test.Dyn>

        local class = SimpleClass()
        class._id = 0
        class._name = 'test.AllType'
        local id2name = {  }

        class._serialize = function(bs, self)
            writeBool(bs, self.x1 == true)
            writeByte(bs, self.x2 or 0)
            writeShort(bs, self.x3 or 0)
            writeFshort(bs, self.x4 or 0)
            writeInt(bs, self.x5 or 0)
            writeFint(bs, self.x6 or 0)
            writeLong(bs, self.x7 or 0)
            writeFlong(bs, self.x8 or 0)
            writeString(bs, self.a1 or "")
            writeBytes(bs, self.a2 or "")
            writeArray(bs, self.b1 or {}, writeInt)
            writeArray(bs, self.b2 or {}, beans['test.Simple']._serialize)
            writeArray(bs, self.b3 or {}, beans['test.Dyn']._serialize)
            writeList(bs, self.c1 or {}, writeInt)
            writeList(bs, self.c2 or {}, beans['test.Simple']._serialize)
            writeList(bs, self.c3 or {}, beans['test.Dyn']._serialize)
            writeBool(bs, self.d1 or {}, writeInt)
            writeBool(bs, self.e1 or {}, writeInt, writeInt)
            writeBool(bs, self.e2 or {}, writeInt, beans['test.Simple']._serialize)
            writeBool(bs, self.e3 or {}, writeInt, beans['test.Dyn']._serialize)
        end
        class._deserialize = function(bs)
            local o = {
                x1 = readBool(bs),
                x2 = readByte(bs),
                x3 = readShort(bs),
                x4 = readFshort(bs),
                x5 = readInt(bs),
                x6 = readFint(bs),
                x7 = readLong(bs),
                x8 = readFlong(bs),
                a1 = readString(bs),
                a2 = readBytes(bs),
                b1 = readArray(bs, readInt),
                b2 = readArray(bs, beans['test.Simple']._deserialize),
                b3 = readArray(bs, beans['test.Dyn']._deserialize),
                c1 = readList(bs, readInt),
                c2 = readList(bs, beans['test.Simple']._deserialize),
                c3 = readList(bs, beans['test.Dyn']._deserialize),
                d1 = readSet(bs, readInt),
                e1 = readMap(bs, readInt, readInt),
                e2 = readMap(bs, readInt, beans['test.Simple']._deserialize),
                e3 = readMap(bs, readInt, beans['test.Dyn']._deserialize),
            }
            setmetatable(o, class)
            return o
        end

        beans[class._name] = class
    end

    do
    ---@class test.TestRpcArg 
     ---@field public x int
     ---@field public y string

        local class = SimpleClass()
        class._id = 0
        class._name = 'test.TestRpcArg'
        local id2name = {  }

        class._serialize = function(bs, self)
            writeInt(bs, self.x or 0)
            writeString(bs, self.y or "")
        end
        class._deserialize = function(bs)
            local o = {
                x = readInt(bs),
                y = readString(bs),
            }
            setmetatable(o, class)
            return o
        end

        beans[class._name] = class
    end

    do
    ---@class test.TestRpcRes 
     ---@field public x int
     ---@field public y int

        local class = SimpleClass()
        class._id = 0
        class._name = 'test.TestRpcRes'
        local id2name = {  }

        class._serialize = function(bs, self)
            writeInt(bs, self.x or 0)
            writeInt(bs, self.y or 0)
        end
        class._deserialize = function(bs)
            local o = {
                x = readInt(bs),
                y = readInt(bs),
            }
            setmetatable(o, class)
            return o
        end

        beans[class._name] = class
    end


    local protos = { }

    do
    ---@class test.TestProto1
     ---@field public x int
     ---@field public y string

        local class = SimpleClass()
        class._id = 23983
        class._name = 'test.TestProto1'
        class._serialize = function(bs, self)
            writeInt(bs, self.x or 0)
            writeString(bs, self.y or "")
        end
        class._deserialize = function(bs)
            local o = {
                x = readInt(bs),
                y = readString(bs),
            }
            setmetatable(o, class)
            return o
        end
        protos[class._id] = class
        protos[class._name] = class
    end

    do
    ---@class test.Foo
     ---@field public x int
     ---@field public y test.AllType
     ---@field public z test.Simple

        local class = SimpleClass()
        class._id = 1234
        class._name = 'test.Foo'
        class._serialize = function(bs, self)
            writeInt(bs, self.x or 0)
            beans['test.AllType']._serialize(bs, self.y or {})
            beans['test.Simple']._serialize(bs, self.z or {})
        end
        class._deserialize = function(bs)
            local o = {
                x = readInt(bs),
                y = beans['test.AllType']._deserialize(bs),
                z = beans['test.Simple']._deserialize(bs),
            }
            setmetatable(o, class)
            return o
        end
        protos[class._id] = class
        protos[class._name] = class
    end


    return { enums = enums, beans = beans, protos = protos }
    end

return { InitTypes = InitTypes}
