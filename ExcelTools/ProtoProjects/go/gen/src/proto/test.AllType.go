
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
package proto

import (
    "bright/serialization"
)

import "errors"

type TestAllType struct {
    X1 bool
    X2 byte
    X3 int16
    X4 int16
    X5 int32
    X6 int32
    X7 int64
    X8 int64
    A1 string
    A2 []byte
    A3 *TestSimple
    A4 interface{}
    B1 []int32
    B2 []*TestSimple
    B3 []interface{}
    C1 []int32
    C2 []*TestSimple
    C3 []interface{}
    D1 []int32
    E1 map[int32]int32
    E2 map[int32]*TestSimple
    E3 map[int32]interface{}
    F1 *int32
    F2 *string
    F3 *TestSimple
    F4 interface{}
}

const TypeId_TestAllType = 0

func (*TestAllType) GetTypeId() int32 {
    return 0
}

func (_v *TestAllType)Serialize(_buf *serialization.ByteBuf) {
    _buf.WriteBool(_v.X1)
    _buf.WriteByte(_v.X2)
    _buf.WriteShort(_v.X3)
    _buf.WriteFshort(_v.X4)
    _buf.WriteInt(_v.X5)
    _buf.WriteFint(_v.X6)
    _buf.WriteLong(_v.X7)
    _buf.WriteFlong(_v.X8)
    _buf.WriteString(_v.A1)
    _buf.WriteBytes(_v.A2)
    SerializeTestSimple(_v.A3, _buf)
    SerializeTestDyn(_v.A4, _buf)
    { _buf.WriteSize(len(_v.B1)); for _, _e_ := range(_v.B1) { _buf.WriteInt(_e_) } }
    { _buf.WriteSize(len(_v.B2)); for _, _e_ := range(_v.B2) { SerializeTestSimple(_e_, _buf) } }
    { _buf.WriteSize(len(_v.B3)); for _, _e_ := range(_v.B3) { SerializeTestDyn(_e_, _buf) } }
    { _buf.WriteSize(len(_v.C1)); for _, _e_ := range(_v.C1) { _buf.WriteInt(_e_) } }
    { _buf.WriteSize(len(_v.C2)); for _, _e_ := range(_v.C2) { SerializeTestSimple(_e_, _buf) } }
    { _buf.WriteSize(len(_v.C3)); for _, _e_ := range(_v.C3) { SerializeTestDyn(_e_, _buf) } }
    { _buf.WriteSize(len(_v.D1)); for _, _e_ := range(_v.D1) { _buf.WriteInt(_e_) } }
    {_buf.WriteSize(len(_v.E1)); for _k_, _v_ := range(_v.E1) { _buf.WriteInt(_k_); _buf.WriteInt(_v_) } }
    {_buf.WriteSize(len(_v.E2)); for _k_, _v_ := range(_v.E2) { _buf.WriteInt(_k_); SerializeTestSimple(_v_, _buf) } }
    {_buf.WriteSize(len(_v.E3)); for _k_, _v_ := range(_v.E3) { _buf.WriteInt(_k_); SerializeTestDyn(_v_, _buf) } }
    if _buf != nil { _buf.WriteBool(true); _buf.WriteInt(*_v.F1)  } else { _buf.WriteBool(false) }
    if _buf != nil { _buf.WriteBool(true); _buf.WriteString(*_v.F2)  } else { _buf.WriteBool(false) }
    if _buf != nil { _buf.WriteBool(true); SerializeTestSimple(_v.F3, _buf)  } else { _buf.WriteBool(false) }
    if _buf != nil { _buf.WriteBool(true); SerializeTestDyn(_v.F4, _buf)  } else { _buf.WriteBool(false) }
}

func (_v *TestAllType)Deserialize(_buf *serialization.ByteBuf) (err error) {
    { if _v.X1, err = _buf.ReadBool(); err != nil { err = errors.New("_v.X1 error"); err = errors.New("_v.X1 error"); return } }
    { if _v.X2, err = _buf.ReadByte(); err != nil { err = errors.New("_v.X2 error"); return } }
    { if _v.X3, err = _buf.ReadShort(); err != nil { err = errors.New("_v.X3 error"); return } }
    { if _v.X4, err = _buf.ReadFshort(); err != nil { err = errors.New("_v.X4 error"); return } }
    { if _v.X5, err = _buf.ReadInt(); err != nil { err = errors.New("_v.X5 error"); return } }
    { if _v.X6, err = _buf.ReadFint(); err != nil { err = errors.New("_v.X6 error"); return } }
    { if _v.X7, err = _buf.ReadLong(); err != nil { err = errors.New("_v.X7 error"); return } }
    { if _v.X8, err = _buf.ReadFlong(); err != nil { err = errors.New("_v.X8 error"); return } }
    { if _v.A1, err = _buf.ReadString(); err != nil { err = errors.New("_v.A1 error"); return } }
    { if _v.A2, err = _buf.ReadBytes(); err != nil { err = errors.New("_v.A2 error"); return } }
    { if _v.A3, err = DeserializeTestSimple(_buf); err != nil { err = errors.New("_v.A3 error"); return } }
    { if _v.A4, err = DeserializeTestDyn(_buf); err != nil { err = errors.New("_v.A4 error"); return } }
    {_v.B1 = make([]int32, 0); var _n_ int; if _n_, err = _buf.ReadSize(); err != nil { err = errors.New("_v.B1 error"); return}; for i := 0 ; i < _n_ ; i++ { var _e_ int32; { if _e_, err = _buf.ReadInt(); err != nil { err = errors.New("_e_ error"); return } }; _v.B1 = append(_v.B1, _e_) } }
    {_v.B2 = make([]*TestSimple, 0); var _n_ int; if _n_, err = _buf.ReadSize(); err != nil { err = errors.New("_v.B2 error"); return}; for i := 0 ; i < _n_ ; i++ { var _e_ *TestSimple; { if _e_, err = DeserializeTestSimple(_buf); err != nil { err = errors.New("_e_ error"); return } }; _v.B2 = append(_v.B2, _e_) } }
    {_v.B3 = make([]interface{}, 0); var _n_ int; if _n_, err = _buf.ReadSize(); err != nil { err = errors.New("_v.B3 error"); return}; for i := 0 ; i < _n_ ; i++ { var _e_ interface{}; { if _e_, err = DeserializeTestDyn(_buf); err != nil { err = errors.New("_e_ error"); return } }; _v.B3 = append(_v.B3, _e_) } }
    {_v.C1 = make([]int32, 0); var _n_ int; if _n_, err = _buf.ReadSize(); err != nil { err = errors.New("_v.C1 error"); return}; for i := 0 ; i < _n_ ; i++ { var _e_ int32; { if _e_, err = _buf.ReadInt(); err != nil { err = errors.New("_e_ error"); return } }; _v.C1 = append(_v.C1, _e_) } }
    {_v.C2 = make([]*TestSimple, 0); var _n_ int; if _n_, err = _buf.ReadSize(); err != nil { err = errors.New("_v.C2 error"); return}; for i := 0 ; i < _n_ ; i++ { var _e_ *TestSimple; { if _e_, err = DeserializeTestSimple(_buf); err != nil { err = errors.New("_e_ error"); return } }; _v.C2 = append(_v.C2, _e_) } }
    {_v.C3 = make([]interface{}, 0); var _n_ int; if _n_, err = _buf.ReadSize(); err != nil { err = errors.New("_v.C3 error"); return}; for i := 0 ; i < _n_ ; i++ { var _e_ interface{}; { if _e_, err = DeserializeTestDyn(_buf); err != nil { err = errors.New("_e_ error"); return } }; _v.C3 = append(_v.C3, _e_) } }
    {_v.D1 = make([]int32, 0); var _n_ int; if _n_, err = _buf.ReadSize(); err != nil { err = errors.New("_v.D1 error"); return}; for i := 0 ; i < _n_ ; i++ { var _e_ int32; { if _e_, err = _buf.ReadInt(); err != nil { err = errors.New("_e_ error"); return } }; _v.D1 = append(_v.D1, _e_) } }
    { _v.E1 = make(map[int32]int32); var _n_ int; if _n_, err = _buf.ReadSize(); err != nil { err = errors.New("_v.E1 error"); return}; for i := 0 ; i < _n_ ; i++ { var _key_ int32; { if _key_, err = _buf.ReadInt(); err != nil { err = errors.New("_key_ error"); return } }; var _value_ int32; { if _value_, err = _buf.ReadInt(); err != nil { err = errors.New("_value_ error"); return } }; _v.E1[_key_] = _value_} }
    { _v.E2 = make(map[int32]*TestSimple); var _n_ int; if _n_, err = _buf.ReadSize(); err != nil { err = errors.New("_v.E2 error"); return}; for i := 0 ; i < _n_ ; i++ { var _key_ int32; { if _key_, err = _buf.ReadInt(); err != nil { err = errors.New("_key_ error"); return } }; var _value_ *TestSimple; { if _value_, err = DeserializeTestSimple(_buf); err != nil { err = errors.New("_value_ error"); return } }; _v.E2[_key_] = _value_} }
    { _v.E3 = make(map[int32]interface{}); var _n_ int; if _n_, err = _buf.ReadSize(); err != nil { err = errors.New("_v.E3 error"); return}; for i := 0 ; i < _n_ ; i++ { var _key_ int32; { if _key_, err = _buf.ReadInt(); err != nil { err = errors.New("_key_ error"); return } }; var _value_ interface{}; { if _value_, err = DeserializeTestDyn(_buf); err != nil { err = errors.New("_value_ error"); return } }; _v.E3[_key_] = _value_} }
    { var __exists__ bool; if __exists__, err = _buf.ReadBool(); err != nil { return }; if __exists__ { var __x__ int32;  { if __x__, err = _buf.ReadInt(); err != nil { err = errors.New("__x__ error"); return } }; _v.F1 = &__x__ }}
    { var __exists__ bool; if __exists__, err = _buf.ReadBool(); err != nil { return }; if __exists__ { var __x__ string;  { if __x__, err = _buf.ReadString(); err != nil { err = errors.New("__x__ error"); return } }; _v.F2 = &__x__ }}
    { var __exists__ bool; if __exists__, err = _buf.ReadBool(); err != nil { return }; if __exists__ { var __x__ *TestSimple;  { if __x__, err = DeserializeTestSimple(_buf); err != nil { err = errors.New("__x__ error"); return } }; _v.F3 = __x__ }}
    { var __exists__ bool; if __exists__, err = _buf.ReadBool(); err != nil { return }; if __exists__ { var __x__ interface{};  { if __x__, err = DeserializeTestDyn(_buf); err != nil { err = errors.New("__x__ error"); return } }; _v.F4 = __x__ }}
    return
}

func SerializeTestAllType(_v serialization.ISerializable, _buf *serialization.ByteBuf) {
    _v.Serialize(_buf)
}

func DeserializeTestAllType(_buf *serialization.ByteBuf) (*TestAllType, error) {
    v := &TestAllType{}
    if err := v.Deserialize(_buf); err == nil {
        return v, nil
    } else {
        return nil, err
    }
}
