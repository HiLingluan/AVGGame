
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

package cfg

import (
    "luban_examples/go_bin/bright/serialization"
)

import "errors"

type TestTestDesc struct {
    Id int32
    Name string
    A1 int32
    A2 int32
    X1 *TestH1
    X2 []*TestH2
    X3 []*TestH2
}

const TypeId_TestTestDesc = 339555391

func (*TestTestDesc) GetTypeId() int32 {
    return 339555391
}

func (_v *TestTestDesc)Serialize(_buf *serialization.ByteBuf) {
    // not support
}

func (_v *TestTestDesc)Deserialize(_buf *serialization.ByteBuf) (err error) {
    { if _v.Id, err = _buf.ReadInt(); err != nil { err = errors.New("_v.Id error"); return } }
    { if _v.Name, err = _buf.ReadString(); err != nil { err = errors.New("_v.Name error"); return } }
    { if _v.A1, err = _buf.ReadInt(); err != nil { err = errors.New("_v.A1 error"); return } }
    { if _v.A2, err = _buf.ReadInt(); err != nil { err = errors.New("_v.A2 error"); return } }
    { if _v.X1, err = DeserializeTestH1(_buf); err != nil { err = errors.New("_v.X1 error"); return } }
    {_v.X2 = make([]*TestH2, 0); var _n_ int; if _n_, err = _buf.ReadSize(); err != nil { err = errors.New("_v.X2 error"); return}; for i := 0 ; i < _n_ ; i++ { var _e_ *TestH2; { if _e_, err = DeserializeTestH2(_buf); err != nil { err = errors.New("_e_ error"); return } }; _v.X2 = append(_v.X2, _e_) } }
    {_v.X3 = make([]*TestH2, 0); var _n_ int; if _n_, err = _buf.ReadSize(); err != nil { err = errors.New("_v.X3 error"); return}; for i := 0 ; i < _n_ ; i++ { var _e_ *TestH2; { if _e_, err = DeserializeTestH2(_buf); err != nil { err = errors.New("_e_ error"); return } }; _v.X3 = append(_v.X3, _e_) } }
    return
}

func DeserializeTestTestDesc(_buf *serialization.ByteBuf) (*TestTestDesc, error) {
    v := &TestTestDesc{}
    if err := v.Deserialize(_buf); err == nil {
        return v, nil
    } else {
        return nil, err
    }
}
