
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

package cfg

import (
    "luban_examples/go_bin/bright/serialization"
)

import "errors"

type TestMultiRowRecord struct {
    Id int32
    Name string
    OneRows []*TestMultiRowType1
    MultiRows1 []*TestMultiRowType1
    MultiRows2 []*TestMultiRowType1
    MultiRows4 map[int32]*TestMultiRowType2
    MultiRows5 []*TestMultiRowType3
    MultiRows6 map[int32]*TestMultiRowType2
    MultiRows7 map[int32]int32
}

const TypeId_TestMultiRowRecord = -501249394

func (*TestMultiRowRecord) GetTypeId() int32 {
    return -501249394
}

func (_v *TestMultiRowRecord)Serialize(_buf *serialization.ByteBuf) {
    // not support
}

func (_v *TestMultiRowRecord)Deserialize(_buf *serialization.ByteBuf) (err error) {
    { if _v.Id, err = _buf.ReadInt(); err != nil { err = errors.New("_v.Id error"); return } }
    { if _v.Name, err = _buf.ReadString(); err != nil { err = errors.New("_v.Name error"); return } }
    {_v.OneRows = make([]*TestMultiRowType1, 0); var _n_ int; if _n_, err = _buf.ReadSize(); err != nil { err = errors.New("_v.OneRows error"); return}; for i := 0 ; i < _n_ ; i++ { var _e_ *TestMultiRowType1; { if _e_, err = DeserializeTestMultiRowType1(_buf); err != nil { err = errors.New("_e_ error"); return } }; _v.OneRows = append(_v.OneRows, _e_) } }
    {_v.MultiRows1 = make([]*TestMultiRowType1, 0); var _n_ int; if _n_, err = _buf.ReadSize(); err != nil { err = errors.New("_v.MultiRows1 error"); return}; for i := 0 ; i < _n_ ; i++ { var _e_ *TestMultiRowType1; { if _e_, err = DeserializeTestMultiRowType1(_buf); err != nil { err = errors.New("_e_ error"); return } }; _v.MultiRows1 = append(_v.MultiRows1, _e_) } }
    {_v.MultiRows2 = make([]*TestMultiRowType1, 0); var _n_ int; if _n_, err = _buf.ReadSize(); err != nil { err = errors.New("_v.MultiRows2 error"); return}; for i := 0 ; i < _n_ ; i++ { var _e_ *TestMultiRowType1; { if _e_, err = DeserializeTestMultiRowType1(_buf); err != nil { err = errors.New("_e_ error"); return } }; _v.MultiRows2 = append(_v.MultiRows2, _e_) } }
    { _v.MultiRows4 = make(map[int32]*TestMultiRowType2); var _n_ int; if _n_, err = _buf.ReadSize(); err != nil { err = errors.New("_v.MultiRows4 error"); return}; for i := 0 ; i < _n_ ; i++ { var _key_ int32; { if _key_, err = _buf.ReadInt(); err != nil { err = errors.New("_key_ error"); return } }; var _value_ *TestMultiRowType2; { if _value_, err = DeserializeTestMultiRowType2(_buf); err != nil { err = errors.New("_value_ error"); return } }; _v.MultiRows4[_key_] = _value_} }
    {_v.MultiRows5 = make([]*TestMultiRowType3, 0); var _n_ int; if _n_, err = _buf.ReadSize(); err != nil { err = errors.New("_v.MultiRows5 error"); return}; for i := 0 ; i < _n_ ; i++ { var _e_ *TestMultiRowType3; { if _e_, err = DeserializeTestMultiRowType3(_buf); err != nil { err = errors.New("_e_ error"); return } }; _v.MultiRows5 = append(_v.MultiRows5, _e_) } }
    { _v.MultiRows6 = make(map[int32]*TestMultiRowType2); var _n_ int; if _n_, err = _buf.ReadSize(); err != nil { err = errors.New("_v.MultiRows6 error"); return}; for i := 0 ; i < _n_ ; i++ { var _key_ int32; { if _key_, err = _buf.ReadInt(); err != nil { err = errors.New("_key_ error"); return } }; var _value_ *TestMultiRowType2; { if _value_, err = DeserializeTestMultiRowType2(_buf); err != nil { err = errors.New("_value_ error"); return } }; _v.MultiRows6[_key_] = _value_} }
    { _v.MultiRows7 = make(map[int32]int32); var _n_ int; if _n_, err = _buf.ReadSize(); err != nil { err = errors.New("_v.MultiRows7 error"); return}; for i := 0 ; i < _n_ ; i++ { var _key_ int32; { if _key_, err = _buf.ReadInt(); err != nil { err = errors.New("_key_ error"); return } }; var _value_ int32; { if _value_, err = _buf.ReadInt(); err != nil { err = errors.New("_value_ error"); return } }; _v.MultiRows7[_key_] = _value_} }
    return
}

func DeserializeTestMultiRowRecord(_buf *serialization.ByteBuf) (*TestMultiRowRecord, error) {
    v := &TestMultiRowRecord{}
    if err := v.Deserialize(_buf); err == nil {
        return v, nil
    } else {
        return nil, err
    }
}
