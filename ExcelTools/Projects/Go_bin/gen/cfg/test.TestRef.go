
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

package cfg

import (
    "luban_examples/go_bin/bright/serialization"
)

import "errors"

type TestTestRef struct {
    Id int32
    X1 int32
    X12 int32
    X2 int32
    X3 int32
    A1 []int32
    A2 []int32
    B1 []int32
    B2 []int32
    C1 []int32
    C2 []int32
    D1 map[int32]int32
    D2 map[int32]int32
    E1 int32
    E2 int64
    E3 string
    F1 int32
    F2 int64
    F3 string
}

const TypeId_TestTestRef = -543222491

func (*TestTestRef) GetTypeId() int32 {
    return -543222491
}

func (_v *TestTestRef)Serialize(_buf *serialization.ByteBuf) {
    // not support
}

func (_v *TestTestRef)Deserialize(_buf *serialization.ByteBuf) (err error) {
    { if _v.Id, err = _buf.ReadInt(); err != nil { err = errors.New("_v.Id error"); return } }
    { if _v.X1, err = _buf.ReadInt(); err != nil { err = errors.New("_v.X1 error"); return } }
    { if _v.X12, err = _buf.ReadInt(); err != nil { err = errors.New("_v.X12 error"); return } }
    { if _v.X2, err = _buf.ReadInt(); err != nil { err = errors.New("_v.X2 error"); return } }
    { if _v.X3, err = _buf.ReadInt(); err != nil { err = errors.New("_v.X3 error"); return } }
    {_v.A1 = make([]int32, 0); var _n_ int; if _n_, err = _buf.ReadSize(); err != nil { err = errors.New("_v.A1 error"); return}; for i := 0 ; i < _n_ ; i++ { var _e_ int32; { if _e_, err = _buf.ReadInt(); err != nil { err = errors.New("_e_ error"); return } }; _v.A1 = append(_v.A1, _e_) } }
    {_v.A2 = make([]int32, 0); var _n_ int; if _n_, err = _buf.ReadSize(); err != nil { err = errors.New("_v.A2 error"); return}; for i := 0 ; i < _n_ ; i++ { var _e_ int32; { if _e_, err = _buf.ReadInt(); err != nil { err = errors.New("_e_ error"); return } }; _v.A2 = append(_v.A2, _e_) } }
    {_v.B1 = make([]int32, 0); var _n_ int; if _n_, err = _buf.ReadSize(); err != nil { err = errors.New("_v.B1 error"); return}; for i := 0 ; i < _n_ ; i++ { var _e_ int32; { if _e_, err = _buf.ReadInt(); err != nil { err = errors.New("_e_ error"); return } }; _v.B1 = append(_v.B1, _e_) } }
    {_v.B2 = make([]int32, 0); var _n_ int; if _n_, err = _buf.ReadSize(); err != nil { err = errors.New("_v.B2 error"); return}; for i := 0 ; i < _n_ ; i++ { var _e_ int32; { if _e_, err = _buf.ReadInt(); err != nil { err = errors.New("_e_ error"); return } }; _v.B2 = append(_v.B2, _e_) } }
    {_v.C1 = make([]int32, 0); var _n_ int; if _n_, err = _buf.ReadSize(); err != nil { err = errors.New("_v.C1 error"); return}; for i := 0 ; i < _n_ ; i++ { var _e_ int32; { if _e_, err = _buf.ReadInt(); err != nil { err = errors.New("_e_ error"); return } }; _v.C1 = append(_v.C1, _e_) } }
    {_v.C2 = make([]int32, 0); var _n_ int; if _n_, err = _buf.ReadSize(); err != nil { err = errors.New("_v.C2 error"); return}; for i := 0 ; i < _n_ ; i++ { var _e_ int32; { if _e_, err = _buf.ReadInt(); err != nil { err = errors.New("_e_ error"); return } }; _v.C2 = append(_v.C2, _e_) } }
    { _v.D1 = make(map[int32]int32); var _n_ int; if _n_, err = _buf.ReadSize(); err != nil { err = errors.New("_v.D1 error"); return}; for i := 0 ; i < _n_ ; i++ { var _key_ int32; { if _key_, err = _buf.ReadInt(); err != nil { err = errors.New("_key_ error"); return } }; var _value_ int32; { if _value_, err = _buf.ReadInt(); err != nil { err = errors.New("_value_ error"); return } }; _v.D1[_key_] = _value_} }
    { _v.D2 = make(map[int32]int32); var _n_ int; if _n_, err = _buf.ReadSize(); err != nil { err = errors.New("_v.D2 error"); return}; for i := 0 ; i < _n_ ; i++ { var _key_ int32; { if _key_, err = _buf.ReadInt(); err != nil { err = errors.New("_key_ error"); return } }; var _value_ int32; { if _value_, err = _buf.ReadInt(); err != nil { err = errors.New("_value_ error"); return } }; _v.D2[_key_] = _value_} }
    { if _v.E1, err = _buf.ReadInt(); err != nil { err = errors.New("_v.E1 error"); return } }
    { if _v.E2, err = _buf.ReadLong(); err != nil { err = errors.New("_v.E2 error"); return } }
    { if _v.E3, err = _buf.ReadString(); err != nil { err = errors.New("_v.E3 error"); return } }
    { if _v.F1, err = _buf.ReadInt(); err != nil { err = errors.New("_v.F1 error"); return } }
    { if _v.F2, err = _buf.ReadLong(); err != nil { err = errors.New("_v.F2 error"); return } }
    { if _v.F3, err = _buf.ReadString(); err != nil { err = errors.New("_v.F3 error"); return } }
    return
}

func DeserializeTestTestRef(_buf *serialization.ByteBuf) (*TestTestRef, error) {
    v := &TestTestRef{}
    if err := v.Deserialize(_buf); err == nil {
        return v, nil
    } else {
        return nil, err
    }
}
