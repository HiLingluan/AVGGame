// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace cfg
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct MailGlobalMail : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static MailGlobalMail GetRootAsMailGlobalMail(ByteBuffer _bb) { return GetRootAsMailGlobalMail(_bb, new MailGlobalMail()); }
  public static MailGlobalMail GetRootAsMailGlobalMail(ByteBuffer _bb, MailGlobalMail obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MailGlobalMail __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Title { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTitleBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetTitleBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetTitleArray() { return __p.__vector_as_array<byte>(6); }
  public string Sender { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSenderBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetSenderBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetSenderArray() { return __p.__vector_as_array<byte>(8); }
  public string Content { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetContentBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetContentBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetContentArray() { return __p.__vector_as_array<byte>(10); }
  public int Award(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int AwardLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetAwardBytes() { return __p.__vector_as_span<int>(12, 4); }
#else
  public ArraySegment<byte>? GetAwardBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public int[] GetAwardArray() { return __p.__vector_as_array<int>(12); }
  public bool AllServer { get { int o = __p.__offset(14); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int ServerList(int j) { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ServerListLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetServerListBytes() { return __p.__vector_as_span<int>(16, 4); }
#else
  public ArraySegment<byte>? GetServerListBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public int[] GetServerListArray() { return __p.__vector_as_array<int>(16); }
  public string Platform { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPlatformBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetPlatformBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetPlatformArray() { return __p.__vector_as_array<byte>(18); }
  public string Channel { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetChannelBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetChannelBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetChannelArray() { return __p.__vector_as_array<byte>(20); }
  public cfg.ConditionMinMaxLevel? MinMaxLevel { get { int o = __p.__offset(22); return o != 0 ? (cfg.ConditionMinMaxLevel?)(new cfg.ConditionMinMaxLevel()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public cfg.ConditionTimeRange? RegisterTime { get { int o = __p.__offset(24); return o != 0 ? (cfg.ConditionTimeRange?)(new cfg.ConditionTimeRange()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public cfg.ConditionTimeRange? MailTime { get { int o = __p.__offset(26); return o != 0 ? (cfg.ConditionTimeRange?)(new cfg.ConditionTimeRange()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<cfg.MailGlobalMail> CreateMailGlobalMail(FlatBufferBuilder builder,
      int id = 0,
      StringOffset titleOffset = default(StringOffset),
      StringOffset senderOffset = default(StringOffset),
      StringOffset contentOffset = default(StringOffset),
      VectorOffset awardOffset = default(VectorOffset),
      bool all_server = false,
      VectorOffset server_listOffset = default(VectorOffset),
      StringOffset platformOffset = default(StringOffset),
      StringOffset channelOffset = default(StringOffset),
      Offset<cfg.ConditionMinMaxLevel> min_max_levelOffset = default(Offset<cfg.ConditionMinMaxLevel>),
      Offset<cfg.ConditionTimeRange> register_timeOffset = default(Offset<cfg.ConditionTimeRange>),
      Offset<cfg.ConditionTimeRange> mail_timeOffset = default(Offset<cfg.ConditionTimeRange>)) {
    builder.StartTable(12);
    MailGlobalMail.AddMailTime(builder, mail_timeOffset);
    MailGlobalMail.AddRegisterTime(builder, register_timeOffset);
    MailGlobalMail.AddMinMaxLevel(builder, min_max_levelOffset);
    MailGlobalMail.AddChannel(builder, channelOffset);
    MailGlobalMail.AddPlatform(builder, platformOffset);
    MailGlobalMail.AddServerList(builder, server_listOffset);
    MailGlobalMail.AddAward(builder, awardOffset);
    MailGlobalMail.AddContent(builder, contentOffset);
    MailGlobalMail.AddSender(builder, senderOffset);
    MailGlobalMail.AddTitle(builder, titleOffset);
    MailGlobalMail.AddId(builder, id);
    MailGlobalMail.AddAllServer(builder, all_server);
    return MailGlobalMail.EndMailGlobalMail(builder);
  }

  public static void StartMailGlobalMail(FlatBufferBuilder builder) { builder.StartTable(12); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddTitle(FlatBufferBuilder builder, StringOffset titleOffset) { builder.AddOffset(1, titleOffset.Value, 0); }
  public static void AddSender(FlatBufferBuilder builder, StringOffset senderOffset) { builder.AddOffset(2, senderOffset.Value, 0); }
  public static void AddContent(FlatBufferBuilder builder, StringOffset contentOffset) { builder.AddOffset(3, contentOffset.Value, 0); }
  public static void AddAward(FlatBufferBuilder builder, VectorOffset awardOffset) { builder.AddOffset(4, awardOffset.Value, 0); }
  public static VectorOffset CreateAwardVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateAwardVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartAwardVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAllServer(FlatBufferBuilder builder, bool allServer) { builder.AddBool(5, allServer, false); }
  public static void AddServerList(FlatBufferBuilder builder, VectorOffset serverListOffset) { builder.AddOffset(6, serverListOffset.Value, 0); }
  public static VectorOffset CreateServerListVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateServerListVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartServerListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPlatform(FlatBufferBuilder builder, StringOffset platformOffset) { builder.AddOffset(7, platformOffset.Value, 0); }
  public static void AddChannel(FlatBufferBuilder builder, StringOffset channelOffset) { builder.AddOffset(8, channelOffset.Value, 0); }
  public static void AddMinMaxLevel(FlatBufferBuilder builder, Offset<cfg.ConditionMinMaxLevel> minMaxLevelOffset) { builder.AddOffset(9, minMaxLevelOffset.Value, 0); }
  public static void AddRegisterTime(FlatBufferBuilder builder, Offset<cfg.ConditionTimeRange> registerTimeOffset) { builder.AddOffset(10, registerTimeOffset.Value, 0); }
  public static void AddMailTime(FlatBufferBuilder builder, Offset<cfg.ConditionTimeRange> mailTimeOffset) { builder.AddOffset(11, mailTimeOffset.Value, 0); }
  public static Offset<cfg.MailGlobalMail> EndMailGlobalMail(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 12);  // award
    builder.Required(o, 16);  // server_list
    builder.Required(o, 22);  // min_max_level
    builder.Required(o, 24);  // register_time
    builder.Required(o, 26);  // mail_time
    return new Offset<cfg.MailGlobalMail>(o);
  }
};


}
