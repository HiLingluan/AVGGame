// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace cfg
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct BonusDropInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static BonusDropInfo GetRootAsBonusDropInfo(ByteBuffer _bb) { return GetRootAsBonusDropInfo(_bb, new BonusDropInfo()); }
  public static BonusDropInfo GetRootAsBonusDropInfo(ByteBuffer _bb, BonusDropInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BonusDropInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Desc { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetDescBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetDescArray() { return __p.__vector_as_array<byte>(6); }
  public cfg.BonusShowItemInfo? ClientShowItems(int j) { int o = __p.__offset(8); return o != 0 ? (cfg.BonusShowItemInfo?)(new cfg.BonusShowItemInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ClientShowItemsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public cfg.BonusBonus BonusType { get { int o = __p.__offset(10); return o != 0 ? (cfg.BonusBonus)__p.bb.Get(o + __p.bb_pos) : cfg.BonusBonus.NONE; } }
  public TTable? Bonus<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(12); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }
  public cfg.BonusOneItem BonusAsBonusOneItem() { return Bonus<cfg.BonusOneItem>().Value; }
  public cfg.BonusOneItems BonusAsBonusOneItems() { return Bonus<cfg.BonusOneItems>().Value; }
  public cfg.BonusItem BonusAsBonusItem() { return Bonus<cfg.BonusItem>().Value; }
  public cfg.BonusItems BonusAsBonusItems() { return Bonus<cfg.BonusItems>().Value; }
  public cfg.BonusCoefficientItem BonusAsBonusCoefficientItem() { return Bonus<cfg.BonusCoefficientItem>().Value; }
  public cfg.BonusWeightItems BonusAsBonusWeightItems() { return Bonus<cfg.BonusWeightItems>().Value; }
  public cfg.BonusProbabilityItems BonusAsBonusProbabilityItems() { return Bonus<cfg.BonusProbabilityItems>().Value; }
  public cfg.BonusMultiBonus BonusAsBonusMultiBonus() { return Bonus<cfg.BonusMultiBonus>().Value; }
  public cfg.BonusProbabilityBonus BonusAsBonusProbabilityBonus() { return Bonus<cfg.BonusProbabilityBonus>().Value; }
  public cfg.BonusWeightBonus BonusAsBonusWeightBonus() { return Bonus<cfg.BonusWeightBonus>().Value; }
  public cfg.BonusDropBonus BonusAsBonusDropBonus() { return Bonus<cfg.BonusDropBonus>().Value; }

  public static Offset<cfg.BonusDropInfo> CreateBonusDropInfo(FlatBufferBuilder builder,
      int id = 0,
      StringOffset descOffset = default(StringOffset),
      VectorOffset client_show_itemsOffset = default(VectorOffset),
      cfg.BonusBonus bonus_type = cfg.BonusBonus.NONE,
      int bonusOffset = 0) {
    builder.StartTable(5);
    BonusDropInfo.AddBonus(builder, bonusOffset);
    BonusDropInfo.AddClientShowItems(builder, client_show_itemsOffset);
    BonusDropInfo.AddDesc(builder, descOffset);
    BonusDropInfo.AddId(builder, id);
    BonusDropInfo.AddBonusType(builder, bonus_type);
    return BonusDropInfo.EndBonusDropInfo(builder);
  }

  public static void StartBonusDropInfo(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddDesc(FlatBufferBuilder builder, StringOffset descOffset) { builder.AddOffset(1, descOffset.Value, 0); }
  public static void AddClientShowItems(FlatBufferBuilder builder, VectorOffset clientShowItemsOffset) { builder.AddOffset(2, clientShowItemsOffset.Value, 0); }
  public static VectorOffset CreateClientShowItemsVector(FlatBufferBuilder builder, Offset<cfg.BonusShowItemInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateClientShowItemsVectorBlock(FlatBufferBuilder builder, Offset<cfg.BonusShowItemInfo>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartClientShowItemsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBonusType(FlatBufferBuilder builder, cfg.BonusBonus bonusType) { builder.AddByte(3, (byte)bonusType, 0); }
  public static void AddBonus(FlatBufferBuilder builder, int bonusOffset) { builder.AddOffset(4, bonusOffset, 0); }
  public static Offset<cfg.BonusDropInfo> EndBonusDropInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 8);  // client_show_items
    builder.Required(o, 12);  // bonus
    return new Offset<cfg.BonusDropInfo>(o);
  }
};


}
