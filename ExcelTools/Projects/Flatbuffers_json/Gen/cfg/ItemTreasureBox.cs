// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace cfg
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct ItemTreasureBox : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static ItemTreasureBox GetRootAsItemTreasureBox(ByteBuffer _bb) { return GetRootAsItemTreasureBox(_bb, new ItemTreasureBox()); }
  public static ItemTreasureBox GetRootAsItemTreasureBox(ByteBuffer _bb, ItemTreasureBox obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ItemTreasureBox __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int KeyItemId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public cfg.ConditionMinLevel? OpenLevel { get { int o = __p.__offset(8); return o != 0 ? (cfg.ConditionMinLevel?)(new cfg.ConditionMinLevel()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public bool UseOnObtain { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int DropIds(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int DropIdsLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetDropIdsBytes() { return __p.__vector_as_span<int>(12, 4); }
#else
  public ArraySegment<byte>? GetDropIdsBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public int[] GetDropIdsArray() { return __p.__vector_as_array<int>(12); }
  public cfg.ItemChooseOneBonus? ChooseList(int j) { int o = __p.__offset(14); return o != 0 ? (cfg.ItemChooseOneBonus?)(new cfg.ItemChooseOneBonus()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ChooseListLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<cfg.ItemTreasureBox> CreateItemTreasureBox(FlatBufferBuilder builder,
      int id = 0,
      int key_item_id = 0,
      Offset<cfg.ConditionMinLevel> open_levelOffset = default(Offset<cfg.ConditionMinLevel>),
      bool use_on_obtain = false,
      VectorOffset drop_idsOffset = default(VectorOffset),
      VectorOffset choose_listOffset = default(VectorOffset)) {
    builder.StartTable(6);
    ItemTreasureBox.AddChooseList(builder, choose_listOffset);
    ItemTreasureBox.AddDropIds(builder, drop_idsOffset);
    ItemTreasureBox.AddOpenLevel(builder, open_levelOffset);
    ItemTreasureBox.AddKeyItemId(builder, key_item_id);
    ItemTreasureBox.AddId(builder, id);
    ItemTreasureBox.AddUseOnObtain(builder, use_on_obtain);
    return ItemTreasureBox.EndItemTreasureBox(builder);
  }

  public static void StartItemTreasureBox(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddKeyItemId(FlatBufferBuilder builder, int keyItemId) { builder.AddInt(1, keyItemId, 0); }
  public static void AddOpenLevel(FlatBufferBuilder builder, Offset<cfg.ConditionMinLevel> openLevelOffset) { builder.AddOffset(2, openLevelOffset.Value, 0); }
  public static void AddUseOnObtain(FlatBufferBuilder builder, bool useOnObtain) { builder.AddBool(3, useOnObtain, false); }
  public static void AddDropIds(FlatBufferBuilder builder, VectorOffset dropIdsOffset) { builder.AddOffset(4, dropIdsOffset.Value, 0); }
  public static VectorOffset CreateDropIdsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateDropIdsVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDropIdsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddChooseList(FlatBufferBuilder builder, VectorOffset chooseListOffset) { builder.AddOffset(5, chooseListOffset.Value, 0); }
  public static VectorOffset CreateChooseListVector(FlatBufferBuilder builder, Offset<cfg.ItemChooseOneBonus>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateChooseListVectorBlock(FlatBufferBuilder builder, Offset<cfg.ItemChooseOneBonus>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartChooseListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<cfg.ItemTreasureBox> EndItemTreasureBox(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 8);  // open_level
    builder.Required(o, 12);  // drop_ids
    builder.Required(o, 14);  // choose_list
    return new Offset<cfg.ItemTreasureBox>(o);
  }
};


}
