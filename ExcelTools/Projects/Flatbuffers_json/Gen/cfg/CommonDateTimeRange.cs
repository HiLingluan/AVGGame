// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace cfg
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct CommonDateTimeRange : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static CommonDateTimeRange GetRootAsCommonDateTimeRange(ByteBuffer _bb) { return GetRootAsCommonDateTimeRange(_bb, new CommonDateTimeRange()); }
  public static CommonDateTimeRange GetRootAsCommonDateTimeRange(ByteBuffer _bb, CommonDateTimeRange obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CommonDateTimeRange __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int StartTime { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EndTime { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<cfg.CommonDateTimeRange> CreateCommonDateTimeRange(FlatBufferBuilder builder,
      int start_time = 0,
      int end_time = 0) {
    builder.StartTable(2);
    CommonDateTimeRange.AddEndTime(builder, end_time);
    CommonDateTimeRange.AddStartTime(builder, start_time);
    return CommonDateTimeRange.EndCommonDateTimeRange(builder);
  }

  public static void StartCommonDateTimeRange(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddStartTime(FlatBufferBuilder builder, int startTime) { builder.AddInt(0, startTime, 0); }
  public static void AddEndTime(FlatBufferBuilder builder, int endTime) { builder.AddInt(1, endTime, 0); }
  public static Offset<cfg.CommonDateTimeRange> EndCommonDateTimeRange(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<cfg.CommonDateTimeRange>(o);
  }
};


}
