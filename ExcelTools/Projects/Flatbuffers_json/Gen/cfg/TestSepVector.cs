// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace cfg
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct TestSepVector : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static TestSepVector GetRootAsTestSepVector(ByteBuffer _bb) { return GetRootAsTestSepVector(_bb, new TestSepVector()); }
  public static TestSepVector GetRootAsTestSepVector(ByteBuffer _bb, TestSepVector obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TestSepVector __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int X { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Y { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Z { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<cfg.TestSepVector> CreateTestSepVector(FlatBufferBuilder builder,
      int x = 0,
      int y = 0,
      int z = 0) {
    builder.StartTable(3);
    TestSepVector.AddZ(builder, z);
    TestSepVector.AddY(builder, y);
    TestSepVector.AddX(builder, x);
    return TestSepVector.EndTestSepVector(builder);
  }

  public static void StartTestSepVector(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddX(FlatBufferBuilder builder, int x) { builder.AddInt(0, x, 0); }
  public static void AddY(FlatBufferBuilder builder, int y) { builder.AddInt(1, y, 0); }
  public static void AddZ(FlatBufferBuilder builder, int z) { builder.AddInt(2, z, 0); }
  public static Offset<cfg.TestSepVector> EndTestSepVector(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<cfg.TestSepVector>(o);
  }
};


}
