// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace cfg
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct BonusProbabilityItemInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static BonusProbabilityItemInfo GetRootAsBonusProbabilityItemInfo(ByteBuffer _bb) { return GetRootAsBonusProbabilityItemInfo(_bb, new BonusProbabilityItemInfo()); }
  public static BonusProbabilityItemInfo GetRootAsBonusProbabilityItemInfo(ByteBuffer _bb, BonusProbabilityItemInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BonusProbabilityItemInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ItemId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Num { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float Probability { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<cfg.BonusProbabilityItemInfo> CreateBonusProbabilityItemInfo(FlatBufferBuilder builder,
      int item_id = 0,
      int num = 0,
      float probability = 0.0f) {
    builder.StartTable(3);
    BonusProbabilityItemInfo.AddProbability(builder, probability);
    BonusProbabilityItemInfo.AddNum(builder, num);
    BonusProbabilityItemInfo.AddItemId(builder, item_id);
    return BonusProbabilityItemInfo.EndBonusProbabilityItemInfo(builder);
  }

  public static void StartBonusProbabilityItemInfo(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddItemId(FlatBufferBuilder builder, int itemId) { builder.AddInt(0, itemId, 0); }
  public static void AddNum(FlatBufferBuilder builder, int num) { builder.AddInt(1, num, 0); }
  public static void AddProbability(FlatBufferBuilder builder, float probability) { builder.AddFloat(2, probability, 0.0f); }
  public static Offset<cfg.BonusProbabilityItemInfo> EndBonusProbabilityItemInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<cfg.BonusProbabilityItemInfo>(o);
  }
};


}
