// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace cfg
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct TestTestExternalType : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static TestTestExternalType GetRootAsTestTestExternalType(ByteBuffer _bb) { return GetRootAsTestTestExternalType(_bb, new TestTestExternalType()); }
  public static TestTestExternalType GetRootAsTestTestExternalType(ByteBuffer _bb, TestTestExternalType obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TestTestExternalType __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public cfg.TestAudioType AudioType { get { int o = __p.__offset(6); return o != 0 ? (cfg.TestAudioType)__p.bb.GetInt(o + __p.bb_pos) : cfg.TestAudioType.TestAudioType_UNKNOWN; } }
  public cfg.TestColor? Color { get { int o = __p.__offset(8); return o != 0 ? (cfg.TestColor?)(new cfg.TestColor()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<cfg.TestTestExternalType> CreateTestTestExternalType(FlatBufferBuilder builder,
      int id = 0,
      cfg.TestAudioType audio_type = cfg.TestAudioType.TestAudioType_UNKNOWN,
      Offset<cfg.TestColor> colorOffset = default(Offset<cfg.TestColor>)) {
    builder.StartTable(3);
    TestTestExternalType.AddColor(builder, colorOffset);
    TestTestExternalType.AddAudioType(builder, audio_type);
    TestTestExternalType.AddId(builder, id);
    return TestTestExternalType.EndTestTestExternalType(builder);
  }

  public static void StartTestTestExternalType(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddAudioType(FlatBufferBuilder builder, cfg.TestAudioType audioType) { builder.AddInt(1, (int)audioType, 0); }
  public static void AddColor(FlatBufferBuilder builder, Offset<cfg.TestColor> colorOffset) { builder.AddOffset(2, colorOffset.Value, 0); }
  public static Offset<cfg.TestTestExternalType> EndTestTestExternalType(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 8);  // color
    return new Offset<cfg.TestTestExternalType>(o);
  }
};


}
