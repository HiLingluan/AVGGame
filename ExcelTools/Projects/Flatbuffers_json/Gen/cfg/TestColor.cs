// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace cfg
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct TestColor : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static TestColor GetRootAsTestColor(ByteBuffer _bb) { return GetRootAsTestColor(_bb, new TestColor()); }
  public static TestColor GetRootAsTestColor(ByteBuffer _bb, TestColor obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TestColor __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float R { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float G { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float B { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float A { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<cfg.TestColor> CreateTestColor(FlatBufferBuilder builder,
      float r = 0.0f,
      float g = 0.0f,
      float b = 0.0f,
      float a = 0.0f) {
    builder.StartTable(4);
    TestColor.AddA(builder, a);
    TestColor.AddB(builder, b);
    TestColor.AddG(builder, g);
    TestColor.AddR(builder, r);
    return TestColor.EndTestColor(builder);
  }

  public static void StartTestColor(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddR(FlatBufferBuilder builder, float r) { builder.AddFloat(0, r, 0.0f); }
  public static void AddG(FlatBufferBuilder builder, float g) { builder.AddFloat(1, g, 0.0f); }
  public static void AddB(FlatBufferBuilder builder, float b) { builder.AddFloat(2, b, 0.0f); }
  public static void AddA(FlatBufferBuilder builder, float a) { builder.AddFloat(3, a, 0.0f); }
  public static Offset<cfg.TestColor> EndTestColor(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<cfg.TestColor>(o);
  }
};


}
