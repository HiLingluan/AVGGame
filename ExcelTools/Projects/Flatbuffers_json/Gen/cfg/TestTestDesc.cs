// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace cfg
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct TestTestDesc : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static TestTestDesc GetRootAsTestTestDesc(ByteBuffer _bb) { return GetRootAsTestTestDesc(_bb, new TestTestDesc()); }
  public static TestTestDesc GetRootAsTestTestDesc(ByteBuffer _bb, TestTestDesc obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TestTestDesc __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public int A1 { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int A2 { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public cfg.TestH1? X1 { get { int o = __p.__offset(12); return o != 0 ? (cfg.TestH1?)(new cfg.TestH1()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public cfg.TestH2? X2(int j) { int o = __p.__offset(14); return o != 0 ? (cfg.TestH2?)(new cfg.TestH2()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int X2Length { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  public cfg.TestH2? X3(int j) { int o = __p.__offset(16); return o != 0 ? (cfg.TestH2?)(new cfg.TestH2()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int X3Length { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<cfg.TestTestDesc> CreateTestTestDesc(FlatBufferBuilder builder,
      int id = 0,
      StringOffset nameOffset = default(StringOffset),
      int a1 = 0,
      int a2 = 0,
      Offset<cfg.TestH1> x1Offset = default(Offset<cfg.TestH1>),
      VectorOffset x2Offset = default(VectorOffset),
      VectorOffset x3Offset = default(VectorOffset)) {
    builder.StartTable(7);
    TestTestDesc.AddX3(builder, x3Offset);
    TestTestDesc.AddX2(builder, x2Offset);
    TestTestDesc.AddX1(builder, x1Offset);
    TestTestDesc.AddA2(builder, a2);
    TestTestDesc.AddA1(builder, a1);
    TestTestDesc.AddName(builder, nameOffset);
    TestTestDesc.AddId(builder, id);
    return TestTestDesc.EndTestTestDesc(builder);
  }

  public static void StartTestTestDesc(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddA1(FlatBufferBuilder builder, int a1) { builder.AddInt(2, a1, 0); }
  public static void AddA2(FlatBufferBuilder builder, int a2) { builder.AddInt(3, a2, 0); }
  public static void AddX1(FlatBufferBuilder builder, Offset<cfg.TestH1> x1Offset) { builder.AddOffset(4, x1Offset.Value, 0); }
  public static void AddX2(FlatBufferBuilder builder, VectorOffset x2Offset) { builder.AddOffset(5, x2Offset.Value, 0); }
  public static VectorOffset CreateX2Vector(FlatBufferBuilder builder, Offset<cfg.TestH2>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateX2VectorBlock(FlatBufferBuilder builder, Offset<cfg.TestH2>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartX2Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddX3(FlatBufferBuilder builder, VectorOffset x3Offset) { builder.AddOffset(6, x3Offset.Value, 0); }
  public static VectorOffset CreateX3Vector(FlatBufferBuilder builder, Offset<cfg.TestH2>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateX3VectorBlock(FlatBufferBuilder builder, Offset<cfg.TestH2>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartX3Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<cfg.TestTestDesc> EndTestTestDesc(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 12);  // x1
    builder.Required(o, 14);  // x2
    builder.Required(o, 16);  // x3
    return new Offset<cfg.TestTestDesc>(o);
  }
};


}
