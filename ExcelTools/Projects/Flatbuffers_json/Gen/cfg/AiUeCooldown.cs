// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace cfg
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct AiUeCooldown : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static AiUeCooldown GetRootAsAiUeCooldown(ByteBuffer _bb) { return GetRootAsAiUeCooldown(_bb, new AiUeCooldown()); }
  public static AiUeCooldown GetRootAsAiUeCooldown(ByteBuffer _bb, AiUeCooldown obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AiUeCooldown __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string NodeName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNodeNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNodeNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNodeNameArray() { return __p.__vector_as_array<byte>(6); }
  public cfg.AiEFlowAbortMode FlowAbortMode { get { int o = __p.__offset(8); return o != 0 ? (cfg.AiEFlowAbortMode)__p.bb.GetInt(o + __p.bb_pos) : cfg.AiEFlowAbortMode.AiEFlowAbortMode_NONE; } }
  public float CooldownTime { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<cfg.AiUeCooldown> CreateAiUeCooldown(FlatBufferBuilder builder,
      int id = 0,
      StringOffset node_nameOffset = default(StringOffset),
      cfg.AiEFlowAbortMode flow_abort_mode = cfg.AiEFlowAbortMode.AiEFlowAbortMode_NONE,
      float cooldown_time = 0.0f) {
    builder.StartTable(4);
    AiUeCooldown.AddCooldownTime(builder, cooldown_time);
    AiUeCooldown.AddFlowAbortMode(builder, flow_abort_mode);
    AiUeCooldown.AddNodeName(builder, node_nameOffset);
    AiUeCooldown.AddId(builder, id);
    return AiUeCooldown.EndAiUeCooldown(builder);
  }

  public static void StartAiUeCooldown(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddNodeName(FlatBufferBuilder builder, StringOffset nodeNameOffset) { builder.AddOffset(1, nodeNameOffset.Value, 0); }
  public static void AddFlowAbortMode(FlatBufferBuilder builder, cfg.AiEFlowAbortMode flowAbortMode) { builder.AddInt(2, (int)flowAbortMode, 0); }
  public static void AddCooldownTime(FlatBufferBuilder builder, float cooldownTime) { builder.AddFloat(3, cooldownTime, 0.0f); }
  public static Offset<cfg.AiUeCooldown> EndAiUeCooldown(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<cfg.AiUeCooldown>(o);
  }
};


}
