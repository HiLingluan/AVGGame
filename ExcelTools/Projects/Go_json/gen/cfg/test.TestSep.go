//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

package cfg

import "errors"

type TestTestSep struct {
    Id int32
    X1 string
    X2 *TestSepBean1
    X3 *TestSepVector
    X4 []*TestSepVector
    X5 []*TestSepBean1
    X6 []*TestSepBean1
}

const TypeId_TestTestSep = -543221520

func (*TestTestSep) GetTypeId() int32 {
    return -543221520
}

func (_v *TestTestSep)Deserialize(_buf map[string]interface{}) (err error) {
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["id"].(float64); !_ok_ { err = errors.New("id error"); return }; _v.Id = int32(_tempNum_) }
    {var _ok_ bool; var __json_text__ map[string]interface{}; if __json_text__, _ok_ = _buf["x1"].(map[string]interface{}) ; !_ok_ { err = errors.New("_v.X1 error"); return };  { var _ok_ bool; if _, _ok_ = __json_text__["key"].(string); !_ok_ { err = errors.New("key error"); return } }; { var _ok_ bool; if _v.X1, _ok_ = __json_text__["text"].(string); !_ok_ { err = errors.New("text error"); return } } }
    { var _ok_ bool; var _x_ map[string]interface{}; if _x_, _ok_ = _buf["x2"].(map[string]interface{}); !_ok_ { err = errors.New("x2 error"); return }; if _v.X2, err = DeserializeTestSepBean1(_x_); err != nil { return } }
    { var _ok_ bool; var _x_ map[string]interface{}; if _x_, _ok_ = _buf["x3"].(map[string]interface{}); !_ok_ { err = errors.New("x3 error"); return }; if _v.X3, err = DeserializeTestSepVector(_x_); err != nil { return } }
     {
                var _arr_ []interface{}
                var _ok_ bool
                if _arr_, _ok_ = _buf["x4"].([]interface{}); !_ok_ { err = errors.New("x4 error"); return }

                _v.X4 = make([]*TestSepVector, 0, len(_arr_))
                
                for _, _e_ := range _arr_ {
                    var _list_v_ *TestSepVector
                    { var _ok_ bool; var _x_ map[string]interface{}; if _x_, _ok_ = _e_.(map[string]interface{}); !_ok_ { err = errors.New("_list_v_ error"); return }; if _list_v_, err = DeserializeTestSepVector(_x_); err != nil { return } }
                    _v.X4 = append(_v.X4, _list_v_)
                }
            }

     {
                var _arr_ []interface{}
                var _ok_ bool
                if _arr_, _ok_ = _buf["x5"].([]interface{}); !_ok_ { err = errors.New("x5 error"); return }

                _v.X5 = make([]*TestSepBean1, 0, len(_arr_))
                
                for _, _e_ := range _arr_ {
                    var _list_v_ *TestSepBean1
                    { var _ok_ bool; var _x_ map[string]interface{}; if _x_, _ok_ = _e_.(map[string]interface{}); !_ok_ { err = errors.New("_list_v_ error"); return }; if _list_v_, err = DeserializeTestSepBean1(_x_); err != nil { return } }
                    _v.X5 = append(_v.X5, _list_v_)
                }
            }

     {
                var _arr_ []interface{}
                var _ok_ bool
                if _arr_, _ok_ = _buf["x6"].([]interface{}); !_ok_ { err = errors.New("x6 error"); return }

                _v.X6 = make([]*TestSepBean1, 0, len(_arr_))
                
                for _, _e_ := range _arr_ {
                    var _list_v_ *TestSepBean1
                    { var _ok_ bool; var _x_ map[string]interface{}; if _x_, _ok_ = _e_.(map[string]interface{}); !_ok_ { err = errors.New("_list_v_ error"); return }; if _list_v_, err = DeserializeTestSepBean1(_x_); err != nil { return } }
                    _v.X6 = append(_v.X6, _list_v_)
                }
            }

    return
}

func DeserializeTestTestSep(_buf map[string]interface{}) (*TestTestSep, error) {
    v := &TestTestSep{}
    if err := v.Deserialize(_buf); err == nil {
        return v, nil
    } else {
        return nil, err
    }
}
