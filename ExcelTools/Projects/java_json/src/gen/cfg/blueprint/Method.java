//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
package cfg.blueprint;

import com.google.gson.JsonElement;
import com.google.gson.JsonObject;



public abstract class Method {
    public Method(JsonObject __json__) { 
        name = __json__.get("name").getAsString();
        desc = __json__.get("desc").getAsString();
        isStatic = __json__.get("is_static").getAsBoolean();
        returnType = __json__.get("return_type").getAsString();
        { com.google.gson.JsonArray _json0_ = __json__.get("parameters").getAsJsonArray(); parameters = new java.util.ArrayList<cfg.blueprint.ParamInfo>(_json0_.size()); for(JsonElement __e : _json0_) { cfg.blueprint.ParamInfo __v;  __v = new cfg.blueprint.ParamInfo(__e.getAsJsonObject());  parameters.add(__v); }   }
    }

    public Method(String name, String desc, boolean is_static, String return_type, java.util.ArrayList<cfg.blueprint.ParamInfo> parameters ) {
        this.name = name;
        this.desc = desc;
        this.isStatic = is_static;
        this.returnType = return_type;
        this.parameters = parameters;
    }

    public static Method deserializeMethod(JsonObject __json__) {
        switch (__json__.get("__type__").getAsString()) {
            case "AbstraceMethod": return new cfg.blueprint.AbstraceMethod(__json__);
            case "ExternalMethod": return new cfg.blueprint.ExternalMethod(__json__);
            case "BlueprintMethod": return new cfg.blueprint.BlueprintMethod(__json__);
            default: throw new bright.serialization.SerializationException();
        }
    }

    public final String name;
    public final String desc;
    public final boolean isStatic;
    public final String returnType;
    public final java.util.ArrayList<cfg.blueprint.ParamInfo> parameters;

    public abstract int getTypeId();

    public void resolve(java.util.HashMap<String, Object> _tables) {
        for(cfg.blueprint.ParamInfo _e : parameters) { if (_e != null) _e.resolve(_tables); }
    }

    @Override
    public String toString() {
        return "{ "
        + "name:" + name + ","
        + "desc:" + desc + ","
        + "isStatic:" + isStatic + ","
        + "returnType:" + returnType + ","
        + "parameters:" + parameters + ","
        + "}";
    }
}
