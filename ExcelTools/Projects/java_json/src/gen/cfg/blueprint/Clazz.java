//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
package cfg.blueprint;

import com.google.gson.JsonElement;
import com.google.gson.JsonObject;



public abstract class Clazz {
    public Clazz(JsonObject __json__) { 
        name = __json__.get("name").getAsString();
        desc = __json__.get("desc").getAsString();
        { com.google.gson.JsonArray _json0_ = __json__.get("parents").getAsJsonArray(); parents = new java.util.ArrayList<cfg.blueprint.Clazz>(_json0_.size()); for(JsonElement __e : _json0_) { cfg.blueprint.Clazz __v;  __v = cfg.blueprint.Clazz.deserializeClazz(__e.getAsJsonObject());  parents.add(__v); }   }
        { com.google.gson.JsonArray _json0_ = __json__.get("methods").getAsJsonArray(); methods = new java.util.ArrayList<cfg.blueprint.Method>(_json0_.size()); for(JsonElement __e : _json0_) { cfg.blueprint.Method __v;  __v = cfg.blueprint.Method.deserializeMethod(__e.getAsJsonObject());  methods.add(__v); }   }
    }

    public Clazz(String name, String desc, java.util.ArrayList<cfg.blueprint.Clazz> parents, java.util.ArrayList<cfg.blueprint.Method> methods ) {
        this.name = name;
        this.desc = desc;
        this.parents = parents;
        this.methods = methods;
    }

    public static Clazz deserializeClazz(JsonObject __json__) {
        switch (__json__.get("__type__").getAsString()) {
            case "Interface": return new cfg.blueprint.Interface(__json__);
            case "NormalClazz": return new cfg.blueprint.NormalClazz(__json__);
            case "EnumClazz": return new cfg.blueprint.EnumClazz(__json__);
            default: throw new bright.serialization.SerializationException();
        }
    }

    public final String name;
    public final String desc;
    public final java.util.ArrayList<cfg.blueprint.Clazz> parents;
    public final java.util.ArrayList<cfg.blueprint.Method> methods;

    public abstract int getTypeId();

    public void resolve(java.util.HashMap<String, Object> _tables) {
        for(cfg.blueprint.Clazz _e : parents) { if (_e != null) _e.resolve(_tables); }
        for(cfg.blueprint.Method _e : methods) { if (_e != null) _e.resolve(_tables); }
    }

    @Override
    public String toString() {
        return "{ "
        + "name:" + name + ","
        + "desc:" + desc + ","
        + "parents:" + parents + ","
        + "methods:" + methods + ","
        + "}";
    }
}
