// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace cfg
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct ErrorErrorInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static ErrorErrorInfo GetRootAsErrorErrorInfo(ByteBuffer _bb) { return GetRootAsErrorErrorInfo(_bb, new ErrorErrorInfo()); }
  public static ErrorErrorInfo GetRootAsErrorErrorInfo(ByteBuffer _bb, ErrorErrorInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ErrorErrorInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Code { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCodeBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetCodeBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetCodeArray() { return __p.__vector_as_array<byte>(4); }
  public string Desc { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetDescBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetDescArray() { return __p.__vector_as_array<byte>(6); }
  public cfg.ErrorErrorStyle StyleType { get { int o = __p.__offset(8); return o != 0 ? (cfg.ErrorErrorStyle)__p.bb.Get(o + __p.bb_pos) : cfg.ErrorErrorStyle.NONE; } }
  public TTable? Style<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(10); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }
  public cfg.ErrorErrorStyleTip StyleAsErrorErrorStyleTip() { return Style<cfg.ErrorErrorStyleTip>().Value; }
  public cfg.ErrorErrorStyleMsgbox StyleAsErrorErrorStyleMsgbox() { return Style<cfg.ErrorErrorStyleMsgbox>().Value; }
  public cfg.ErrorErrorStyleDlgOk StyleAsErrorErrorStyleDlgOk() { return Style<cfg.ErrorErrorStyleDlgOk>().Value; }
  public cfg.ErrorErrorStyleDlgOkCancel StyleAsErrorErrorStyleDlgOkCancel() { return Style<cfg.ErrorErrorStyleDlgOkCancel>().Value; }

  public static Offset<cfg.ErrorErrorInfo> CreateErrorErrorInfo(FlatBufferBuilder builder,
      StringOffset codeOffset = default(StringOffset),
      StringOffset descOffset = default(StringOffset),
      cfg.ErrorErrorStyle style_type = cfg.ErrorErrorStyle.NONE,
      int styleOffset = 0) {
    builder.StartTable(4);
    ErrorErrorInfo.AddStyle(builder, styleOffset);
    ErrorErrorInfo.AddDesc(builder, descOffset);
    ErrorErrorInfo.AddCode(builder, codeOffset);
    ErrorErrorInfo.AddStyleType(builder, style_type);
    return ErrorErrorInfo.EndErrorErrorInfo(builder);
  }

  public static void StartErrorErrorInfo(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddCode(FlatBufferBuilder builder, StringOffset codeOffset) { builder.AddOffset(0, codeOffset.Value, 0); }
  public static void AddDesc(FlatBufferBuilder builder, StringOffset descOffset) { builder.AddOffset(1, descOffset.Value, 0); }
  public static void AddStyleType(FlatBufferBuilder builder, cfg.ErrorErrorStyle styleType) { builder.AddByte(2, (byte)styleType, 0); }
  public static void AddStyle(FlatBufferBuilder builder, int styleOffset) { builder.AddOffset(3, styleOffset, 0); }
  public static Offset<cfg.ErrorErrorInfo> EndErrorErrorInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 10);  // style
    return new Offset<cfg.ErrorErrorInfo>(o);
  }
};


}
