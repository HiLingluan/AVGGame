// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace cfg
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct BlueprintParamInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static BlueprintParamInfo GetRootAsBlueprintParamInfo(ByteBuffer _bb) { return GetRootAsBlueprintParamInfo(_bb, new BlueprintParamInfo()); }
  public static BlueprintParamInfo GetRootAsBlueprintParamInfo(ByteBuffer _bb, BlueprintParamInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BlueprintParamInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public string Type { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTypeBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetTypeBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetTypeArray() { return __p.__vector_as_array<byte>(6); }
  public bool IsRef { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<cfg.BlueprintParamInfo> CreateBlueprintParamInfo(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      StringOffset typeOffset = default(StringOffset),
      bool is_ref = false) {
    builder.StartTable(3);
    BlueprintParamInfo.AddType(builder, typeOffset);
    BlueprintParamInfo.AddName(builder, nameOffset);
    BlueprintParamInfo.AddIsRef(builder, is_ref);
    return BlueprintParamInfo.EndBlueprintParamInfo(builder);
  }

  public static void StartBlueprintParamInfo(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, StringOffset typeOffset) { builder.AddOffset(1, typeOffset.Value, 0); }
  public static void AddIsRef(FlatBufferBuilder builder, bool isRef) { builder.AddBool(2, isRef, false); }
  public static Offset<cfg.BlueprintParamInfo> EndBlueprintParamInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<cfg.BlueprintParamInfo>(o);
  }
};


}
