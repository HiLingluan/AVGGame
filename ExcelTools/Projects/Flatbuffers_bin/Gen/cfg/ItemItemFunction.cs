// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace cfg
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct ItemItemFunction : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static ItemItemFunction GetRootAsItemItemFunction(ByteBuffer _bb) { return GetRootAsItemItemFunction(_bb, new ItemItemFunction()); }
  public static ItemItemFunction GetRootAsItemItemFunction(ByteBuffer _bb, ItemItemFunction obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ItemItemFunction __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public cfg.ItemEMinorType MinorType { get { int o = __p.__offset(4); return o != 0 ? (cfg.ItemEMinorType)__p.bb.GetInt(o + __p.bb_pos) : cfg.ItemEMinorType.__GENERATE_DEFAULT_VALUE; } }
  public cfg.ItemEItemFunctionType FuncType { get { int o = __p.__offset(6); return o != 0 ? (cfg.ItemEItemFunctionType)__p.bb.GetInt(o + __p.bb_pos) : cfg.ItemEItemFunctionType.ItemEItemFunctionType_REPLACE_HANDHELD; } }
  public string Method { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMethodBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetMethodBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetMethodArray() { return __p.__vector_as_array<byte>(8); }
  public bool CloseBagUi { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<cfg.ItemItemFunction> CreateItemItemFunction(FlatBufferBuilder builder,
      cfg.ItemEMinorType minor_type = cfg.ItemEMinorType.__GENERATE_DEFAULT_VALUE,
      cfg.ItemEItemFunctionType func_type = cfg.ItemEItemFunctionType.ItemEItemFunctionType_REPLACE_HANDHELD,
      StringOffset methodOffset = default(StringOffset),
      bool close_bag_ui = false) {
    builder.StartTable(4);
    ItemItemFunction.AddMethod(builder, methodOffset);
    ItemItemFunction.AddFuncType(builder, func_type);
    ItemItemFunction.AddMinorType(builder, minor_type);
    ItemItemFunction.AddCloseBagUi(builder, close_bag_ui);
    return ItemItemFunction.EndItemItemFunction(builder);
  }

  public static void StartItemItemFunction(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddMinorType(FlatBufferBuilder builder, cfg.ItemEMinorType minorType) { builder.AddInt(0, (int)minorType, 0); }
  public static void AddFuncType(FlatBufferBuilder builder, cfg.ItemEItemFunctionType funcType) { builder.AddInt(1, (int)funcType, 0); }
  public static void AddMethod(FlatBufferBuilder builder, StringOffset methodOffset) { builder.AddOffset(2, methodOffset.Value, 0); }
  public static void AddCloseBagUi(FlatBufferBuilder builder, bool closeBagUi) { builder.AddBool(3, closeBagUi, false); }
  public static Offset<cfg.ItemItemFunction> EndItemItemFunction(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<cfg.ItemItemFunction>(o);
  }
};


}
