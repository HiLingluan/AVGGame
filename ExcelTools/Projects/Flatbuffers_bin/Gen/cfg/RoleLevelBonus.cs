// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace cfg
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct RoleLevelBonus : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static RoleLevelBonus GetRootAsRoleLevelBonus(ByteBuffer _bb) { return GetRootAsRoleLevelBonus(_bb, new RoleLevelBonus()); }
  public static RoleLevelBonus GetRootAsRoleLevelBonus(ByteBuffer _bb, RoleLevelBonus obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RoleLevelBonus __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public cfg.RoleDistinctBonusInfos? DistinctBonusInfos(int j) { int o = __p.__offset(6); return o != 0 ? (cfg.RoleDistinctBonusInfos?)(new cfg.RoleDistinctBonusInfos()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DistinctBonusInfosLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<cfg.RoleLevelBonus> CreateRoleLevelBonus(FlatBufferBuilder builder,
      int id = 0,
      VectorOffset distinct_bonus_infosOffset = default(VectorOffset)) {
    builder.StartTable(2);
    RoleLevelBonus.AddDistinctBonusInfos(builder, distinct_bonus_infosOffset);
    RoleLevelBonus.AddId(builder, id);
    return RoleLevelBonus.EndRoleLevelBonus(builder);
  }

  public static void StartRoleLevelBonus(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddDistinctBonusInfos(FlatBufferBuilder builder, VectorOffset distinctBonusInfosOffset) { builder.AddOffset(1, distinctBonusInfosOffset.Value, 0); }
  public static VectorOffset CreateDistinctBonusInfosVector(FlatBufferBuilder builder, Offset<cfg.RoleDistinctBonusInfos>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDistinctBonusInfosVectorBlock(FlatBufferBuilder builder, Offset<cfg.RoleDistinctBonusInfos>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDistinctBonusInfosVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<cfg.RoleLevelBonus> EndRoleLevelBonus(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 6);  // distinct_bonus_infos
    return new Offset<cfg.RoleLevelBonus>(o);
  }
};


}
