// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace cfg
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct TestDefineFromExcel2 : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static TestDefineFromExcel2 GetRootAsTestDefineFromExcel2(ByteBuffer _bb) { return GetRootAsTestDefineFromExcel2(_bb, new TestDefineFromExcel2()); }
  public static TestDefineFromExcel2 GetRootAsTestDefineFromExcel2(ByteBuffer _bb, TestDefineFromExcel2 obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TestDefineFromExcel2 __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool X1 { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public long X5 { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public float X6 { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public int X8 { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string X10 { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetX10Bytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetX10Bytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetX10Array() { return __p.__vector_as_array<byte>(14); }
  public cfg.TestETestQuality X13 { get { int o = __p.__offset(16); return o != 0 ? (cfg.TestETestQuality)__p.bb.GetInt(o + __p.bb_pos) : cfg.TestETestQuality.__GENERATE_DEFAULT_VALUE; } }
  public cfg.TestDemoDynamic X14Type { get { int o = __p.__offset(18); return o != 0 ? (cfg.TestDemoDynamic)__p.bb.Get(o + __p.bb_pos) : cfg.TestDemoDynamic.NONE; } }
  public TTable? X14<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(20); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }
  public cfg.TestDemoD2 X14AsTestDemoD2() { return X14<cfg.TestDemoD2>().Value; }
  public cfg.TestDemoE1 X14AsTestDemoE1() { return X14<cfg.TestDemoE1>().Value; }
  public cfg.TestDemoD5 X14AsTestDemoD5() { return X14<cfg.TestDemoD5>().Value; }
  public cfg.Vector2? V2 { get { int o = __p.__offset(22); return o != 0 ? (cfg.Vector2?)(new cfg.Vector2()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public int T1 { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int K1(int j) { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int K1Length { get { int o = __p.__offset(26); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetK1Bytes() { return __p.__vector_as_span<int>(26, 4); }
#else
  public ArraySegment<byte>? GetK1Bytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public int[] GetK1Array() { return __p.__vector_as_array<int>(26); }
  public cfg.KeyValue_int32_int32? K8(int j) { int o = __p.__offset(28); return o != 0 ? (cfg.KeyValue_int32_int32?)(new cfg.KeyValue_int32_int32()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int K8Length { get { int o = __p.__offset(28); return o != 0 ? __p.__vector_len(o) : 0; } }
  public cfg.TestDemoE2? K9(int j) { int o = __p.__offset(30); return o != 0 ? (cfg.TestDemoE2?)(new cfg.TestDemoE2()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int K9Length { get { int o = __p.__offset(30); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static void StartTestDefineFromExcel2(FlatBufferBuilder builder) { builder.StartTable(14); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddX1(FlatBufferBuilder builder, bool x1) { builder.AddBool(1, x1, false); }
  public static void AddX5(FlatBufferBuilder builder, long x5) { builder.AddLong(2, x5, 0); }
  public static void AddX6(FlatBufferBuilder builder, float x6) { builder.AddFloat(3, x6, 0.0f); }
  public static void AddX8(FlatBufferBuilder builder, int x8) { builder.AddInt(4, x8, 0); }
  public static void AddX10(FlatBufferBuilder builder, StringOffset x10Offset) { builder.AddOffset(5, x10Offset.Value, 0); }
  public static void AddX13(FlatBufferBuilder builder, cfg.TestETestQuality x13) { builder.AddInt(6, (int)x13, 0); }
  public static void AddX14Type(FlatBufferBuilder builder, cfg.TestDemoDynamic x14Type) { builder.AddByte(7, (byte)x14Type, 0); }
  public static void AddX14(FlatBufferBuilder builder, int x14Offset) { builder.AddOffset(8, x14Offset, 0); }
  public static void AddV2(FlatBufferBuilder builder, Offset<cfg.Vector2> v2Offset) { builder.AddStruct(9, v2Offset.Value, 0); }
  public static void AddT1(FlatBufferBuilder builder, int t1) { builder.AddInt(10, t1, 0); }
  public static void AddK1(FlatBufferBuilder builder, VectorOffset k1Offset) { builder.AddOffset(11, k1Offset.Value, 0); }
  public static VectorOffset CreateK1Vector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateK1VectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartK1Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddK8(FlatBufferBuilder builder, VectorOffset k8Offset) { builder.AddOffset(12, k8Offset.Value, 0); }
  public static VectorOffset CreateK8Vector(FlatBufferBuilder builder, Offset<cfg.KeyValue_int32_int32>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateK8VectorBlock(FlatBufferBuilder builder, Offset<cfg.KeyValue_int32_int32>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartK8Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddK9(FlatBufferBuilder builder, VectorOffset k9Offset) { builder.AddOffset(13, k9Offset.Value, 0); }
  public static VectorOffset CreateK9Vector(FlatBufferBuilder builder, Offset<cfg.TestDemoE2>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateK9VectorBlock(FlatBufferBuilder builder, Offset<cfg.TestDemoE2>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartK9Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<cfg.TestDefineFromExcel2> EndTestDefineFromExcel2(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 20);  // x14
    builder.Required(o, 22);  // v2
    builder.Required(o, 26);  // k1
    builder.Required(o, 28);  // k8
    builder.Required(o, 30);  // k9
    return new Offset<cfg.TestDefineFromExcel2>(o);
  }
};


}
