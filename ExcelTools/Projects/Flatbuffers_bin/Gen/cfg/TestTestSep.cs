// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace cfg
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct TestTestSep : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static TestTestSep GetRootAsTestTestSep(ByteBuffer _bb) { return GetRootAsTestTestSep(_bb, new TestTestSep()); }
  public static TestTestSep GetRootAsTestTestSep(ByteBuffer _bb, TestTestSep obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TestTestSep __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string X1 { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetX1Bytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetX1Bytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetX1Array() { return __p.__vector_as_array<byte>(6); }
  public cfg.TestSepBean1? X2 { get { int o = __p.__offset(8); return o != 0 ? (cfg.TestSepBean1?)(new cfg.TestSepBean1()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public cfg.TestSepVector? X3 { get { int o = __p.__offset(10); return o != 0 ? (cfg.TestSepVector?)(new cfg.TestSepVector()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public cfg.TestSepVector? X4(int j) { int o = __p.__offset(12); return o != 0 ? (cfg.TestSepVector?)(new cfg.TestSepVector()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int X4Length { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  public cfg.TestSepBean1? X5(int j) { int o = __p.__offset(14); return o != 0 ? (cfg.TestSepBean1?)(new cfg.TestSepBean1()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int X5Length { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  public cfg.TestSepBean1? X6(int j) { int o = __p.__offset(16); return o != 0 ? (cfg.TestSepBean1?)(new cfg.TestSepBean1()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int X6Length { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<cfg.TestTestSep> CreateTestTestSep(FlatBufferBuilder builder,
      int id = 0,
      StringOffset x1Offset = default(StringOffset),
      Offset<cfg.TestSepBean1> x2Offset = default(Offset<cfg.TestSepBean1>),
      Offset<cfg.TestSepVector> x3Offset = default(Offset<cfg.TestSepVector>),
      VectorOffset x4Offset = default(VectorOffset),
      VectorOffset x5Offset = default(VectorOffset),
      VectorOffset x6Offset = default(VectorOffset)) {
    builder.StartTable(7);
    TestTestSep.AddX6(builder, x6Offset);
    TestTestSep.AddX5(builder, x5Offset);
    TestTestSep.AddX4(builder, x4Offset);
    TestTestSep.AddX3(builder, x3Offset);
    TestTestSep.AddX2(builder, x2Offset);
    TestTestSep.AddX1(builder, x1Offset);
    TestTestSep.AddId(builder, id);
    return TestTestSep.EndTestTestSep(builder);
  }

  public static void StartTestTestSep(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddX1(FlatBufferBuilder builder, StringOffset x1Offset) { builder.AddOffset(1, x1Offset.Value, 0); }
  public static void AddX2(FlatBufferBuilder builder, Offset<cfg.TestSepBean1> x2Offset) { builder.AddOffset(2, x2Offset.Value, 0); }
  public static void AddX3(FlatBufferBuilder builder, Offset<cfg.TestSepVector> x3Offset) { builder.AddOffset(3, x3Offset.Value, 0); }
  public static void AddX4(FlatBufferBuilder builder, VectorOffset x4Offset) { builder.AddOffset(4, x4Offset.Value, 0); }
  public static VectorOffset CreateX4Vector(FlatBufferBuilder builder, Offset<cfg.TestSepVector>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateX4VectorBlock(FlatBufferBuilder builder, Offset<cfg.TestSepVector>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartX4Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddX5(FlatBufferBuilder builder, VectorOffset x5Offset) { builder.AddOffset(5, x5Offset.Value, 0); }
  public static VectorOffset CreateX5Vector(FlatBufferBuilder builder, Offset<cfg.TestSepBean1>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateX5VectorBlock(FlatBufferBuilder builder, Offset<cfg.TestSepBean1>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartX5Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddX6(FlatBufferBuilder builder, VectorOffset x6Offset) { builder.AddOffset(6, x6Offset.Value, 0); }
  public static VectorOffset CreateX6Vector(FlatBufferBuilder builder, Offset<cfg.TestSepBean1>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateX6VectorBlock(FlatBufferBuilder builder, Offset<cfg.TestSepBean1>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartX6Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<cfg.TestTestSep> EndTestTestSep(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 8);  // x2
    builder.Required(o, 10);  // x3
    builder.Required(o, 12);  // x4
    builder.Required(o, 14);  // x5
    builder.Required(o, 16);  // x6
    return new Offset<cfg.TestTestSep>(o);
  }
};


}
