// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace cfg
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct BonusShowItemInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static BonusShowItemInfo GetRootAsBonusShowItemInfo(ByteBuffer _bb) { return GetRootAsBonusShowItemInfo(_bb, new BonusShowItemInfo()); }
  public static BonusShowItemInfo GetRootAsBonusShowItemInfo(ByteBuffer _bb, BonusShowItemInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BonusShowItemInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ItemId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long ItemNum { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<cfg.BonusShowItemInfo> CreateBonusShowItemInfo(FlatBufferBuilder builder,
      int item_id = 0,
      long item_num = 0) {
    builder.StartTable(2);
    BonusShowItemInfo.AddItemNum(builder, item_num);
    BonusShowItemInfo.AddItemId(builder, item_id);
    return BonusShowItemInfo.EndBonusShowItemInfo(builder);
  }

  public static void StartBonusShowItemInfo(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddItemId(FlatBufferBuilder builder, int itemId) { builder.AddInt(0, itemId, 0); }
  public static void AddItemNum(FlatBufferBuilder builder, long itemNum) { builder.AddLong(1, itemNum, 0); }
  public static Offset<cfg.BonusShowItemInfo> EndBonusShowItemInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<cfg.BonusShowItemInfo>(o);
  }
};


}
