// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace cfg
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct ItemDesignDrawing : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static ItemDesignDrawing GetRootAsItemDesignDrawing(ByteBuffer _bb) { return GetRootAsItemDesignDrawing(_bb, new ItemDesignDrawing()); }
  public static ItemDesignDrawing GetRootAsItemDesignDrawing(ByteBuffer _bb, ItemDesignDrawing obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ItemDesignDrawing __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int LearnComponentId(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int LearnComponentIdLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetLearnComponentIdBytes() { return __p.__vector_as_span<int>(6, 4); }
#else
  public ArraySegment<byte>? GetLearnComponentIdBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public int[] GetLearnComponentIdArray() { return __p.__vector_as_array<int>(6); }

  public static Offset<cfg.ItemDesignDrawing> CreateItemDesignDrawing(FlatBufferBuilder builder,
      int id = 0,
      VectorOffset learn_component_idOffset = default(VectorOffset)) {
    builder.StartTable(2);
    ItemDesignDrawing.AddLearnComponentId(builder, learn_component_idOffset);
    ItemDesignDrawing.AddId(builder, id);
    return ItemDesignDrawing.EndItemDesignDrawing(builder);
  }

  public static void StartItemDesignDrawing(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddLearnComponentId(FlatBufferBuilder builder, VectorOffset learnComponentIdOffset) { builder.AddOffset(1, learnComponentIdOffset.Value, 0); }
  public static VectorOffset CreateLearnComponentIdVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateLearnComponentIdVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartLearnComponentIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<cfg.ItemDesignDrawing> EndItemDesignDrawing(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 6);  // learn_component_id
    return new Offset<cfg.ItemDesignDrawing>(o);
  }
};


}
