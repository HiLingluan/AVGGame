"use strict";
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
Object.defineProperty(exports, "__esModule", { value: true });
exports.Tables = exports.tag = exports.l10n = exports.cost = exports.condition = exports.bonus = exports.blueprint = exports.test = exports.role = exports.mail = exports.limit = exports.item = exports.error = exports.common = exports.ai = exports.Vector4 = exports.Vector3 = exports.Vector2 = void 0;
class Vector2 {
    static deserializeFromJson(json) {
        let x = json.x;
        let y = json.y;
        if (x == null || y == null) {
            throw new Error();
        }
        return new Vector2(x, y);
    }
    x;
    y;
    constructor(x = 0, y = 0) {
        this.x = x;
        this.y = y;
    }
}
exports.Vector2 = Vector2;
class Vector3 {
    static deserializeFromJson(json) {
        let x = json.x;
        let y = json.y;
        let z = json.z;
        if (x == null || y == null || z == null) {
            throw new Error();
        }
        return new Vector3(x, y, z);
    }
    x;
    y;
    z;
    constructor(x = 0, y = 0, z = 0) {
        this.x = x;
        this.y = y;
        this.z = z;
    }
}
exports.Vector3 = Vector3;
class Vector4 {
    static deserializeFromJson(json) {
        let x = json.x;
        let y = json.y;
        let z = json.z;
        let w = json.w;
        if (x == null || y == null || z == null || w == null) {
            throw new Error();
        }
        return new Vector4(x, y, z, w);
    }
    x;
    y;
    z;
    w;
    constructor(x = 0, y = 0, z = 0, w = 0) {
        this.x = x;
        this.y = y;
        this.z = z;
        this.w = w;
    }
}
exports.Vector4 = Vector4;
var ai;
(function (ai) {
    let EExecutor;
    (function (EExecutor) {
        EExecutor[EExecutor["CLIENT"] = 0] = "CLIENT";
        EExecutor[EExecutor["SERVER"] = 1] = "SERVER";
    })(EExecutor = ai.EExecutor || (ai.EExecutor = {}));
})(ai = exports.ai || (exports.ai = {}));
(function (ai) {
    let EKeyType;
    (function (EKeyType) {
        EKeyType[EKeyType["BOOL"] = 1] = "BOOL";
        EKeyType[EKeyType["INT"] = 2] = "INT";
        EKeyType[EKeyType["FLOAT"] = 3] = "FLOAT";
        EKeyType[EKeyType["STRING"] = 4] = "STRING";
        EKeyType[EKeyType["VECTOR"] = 5] = "VECTOR";
        EKeyType[EKeyType["ROTATOR"] = 6] = "ROTATOR";
        EKeyType[EKeyType["NAME"] = 7] = "NAME";
        EKeyType[EKeyType["CLASS"] = 8] = "CLASS";
        EKeyType[EKeyType["ENUM"] = 9] = "ENUM";
        EKeyType[EKeyType["OBJECT"] = 10] = "OBJECT";
    })(EKeyType = ai.EKeyType || (ai.EKeyType = {}));
})(ai = exports.ai || (exports.ai = {}));
(function (ai) {
    let EFlowAbortMode;
    (function (EFlowAbortMode) {
        EFlowAbortMode[EFlowAbortMode["NONE"] = 0] = "NONE";
        EFlowAbortMode[EFlowAbortMode["LOWER_PRIORITY"] = 1] = "LOWER_PRIORITY";
        EFlowAbortMode[EFlowAbortMode["SELF"] = 2] = "SELF";
        EFlowAbortMode[EFlowAbortMode["BOTH"] = 3] = "BOTH";
    })(EFlowAbortMode = ai.EFlowAbortMode || (ai.EFlowAbortMode = {}));
})(ai = exports.ai || (exports.ai = {}));
(function (ai) {
    let EFinishMode;
    (function (EFinishMode) {
        EFinishMode[EFinishMode["IMMEDIATE"] = 0] = "IMMEDIATE";
        EFinishMode[EFinishMode["DELAYED"] = 1] = "DELAYED";
    })(EFinishMode = ai.EFinishMode || (ai.EFinishMode = {}));
})(ai = exports.ai || (exports.ai = {}));
(function (ai) {
    let ENotifyObserverMode;
    (function (ENotifyObserverMode) {
        ENotifyObserverMode[ENotifyObserverMode["ON_VALUE_CHANGE"] = 0] = "ON_VALUE_CHANGE";
        ENotifyObserverMode[ENotifyObserverMode["ON_RESULT_CHANGE"] = 1] = "ON_RESULT_CHANGE";
    })(ENotifyObserverMode = ai.ENotifyObserverMode || (ai.ENotifyObserverMode = {}));
})(ai = exports.ai || (exports.ai = {}));
(function (ai) {
    let EOperator;
    (function (EOperator) {
        EOperator[EOperator["IS_EQUAL_TO"] = 0] = "IS_EQUAL_TO";
        EOperator[EOperator["IS_NOT_EQUAL_TO"] = 1] = "IS_NOT_EQUAL_TO";
        EOperator[EOperator["IS_LESS_THAN"] = 2] = "IS_LESS_THAN";
        EOperator[EOperator["IS_LESS_THAN_OR_EQUAL_TO"] = 3] = "IS_LESS_THAN_OR_EQUAL_TO";
        EOperator[EOperator["IS_GREAT_THAN"] = 4] = "IS_GREAT_THAN";
        EOperator[EOperator["IS_GREAT_THAN_OR_EQUAL_TO"] = 5] = "IS_GREAT_THAN_OR_EQUAL_TO";
        EOperator[EOperator["CONTAINS"] = 6] = "CONTAINS";
        EOperator[EOperator["NOT_CONTAINS"] = 7] = "NOT_CONTAINS";
    })(EOperator = ai.EOperator || (ai.EOperator = {}));
})(ai = exports.ai || (exports.ai = {}));
var common;
(function (common) {
    let EBoolOperator;
    (function (EBoolOperator) {
        EBoolOperator[EBoolOperator["AND"] = 0] = "AND";
        EBoolOperator[EBoolOperator["OR"] = 1] = "OR";
    })(EBoolOperator = common.EBoolOperator || (common.EBoolOperator = {}));
})(common = exports.common || (exports.common = {}));
var error;
(function (error) {
    let EOperation;
    (function (EOperation) {
        /**
         * 登出
         */
        EOperation[EOperation["LOGOUT"] = 0] = "LOGOUT";
        /**
         * 重启
         */
        EOperation[EOperation["RESTART"] = 1] = "RESTART";
    })(EOperation = error.EOperation || (error.EOperation = {}));
})(error = exports.error || (exports.error = {}));
(function (error) {
    let EErrorCode;
    (function (EErrorCode) {
        EErrorCode[EErrorCode["OK"] = 0] = "OK";
        EErrorCode[EErrorCode["SERVER_NOT_EXISTS"] = 1] = "SERVER_NOT_EXISTS";
        EErrorCode[EErrorCode["HAS_BIND_SERVER"] = 2] = "HAS_BIND_SERVER";
        EErrorCode[EErrorCode["AUTH_FAIL"] = 3] = "AUTH_FAIL";
        EErrorCode[EErrorCode["NOT_BIND_SERVER"] = 4] = "NOT_BIND_SERVER";
        EErrorCode[EErrorCode["SERVER_ACCESS_FAIL"] = 5] = "SERVER_ACCESS_FAIL";
        EErrorCode[EErrorCode["EXAMPLE_FLASH"] = 6] = "EXAMPLE_FLASH";
        EErrorCode[EErrorCode["EXAMPLE_MSGBOX"] = 7] = "EXAMPLE_MSGBOX";
        EErrorCode[EErrorCode["EXAMPLE_DLG_OK"] = 8] = "EXAMPLE_DLG_OK";
        EErrorCode[EErrorCode["EXAMPLE_DLG_OK_CANCEL"] = 9] = "EXAMPLE_DLG_OK_CANCEL";
        EErrorCode[EErrorCode["ROLE_CREATE_NAME_INVALID_CHAR"] = 100] = "ROLE_CREATE_NAME_INVALID_CHAR";
        EErrorCode[EErrorCode["ROLE_CREATE_NAME_EMPTY"] = 101] = "ROLE_CREATE_NAME_EMPTY";
        EErrorCode[EErrorCode["ROLE_CREATE_NAME_EXCEED_MAX_LENGTH"] = 102] = "ROLE_CREATE_NAME_EXCEED_MAX_LENGTH";
        EErrorCode[EErrorCode["ROLE_CREATE_ROLE_LIST_FULL"] = 103] = "ROLE_CREATE_ROLE_LIST_FULL";
        EErrorCode[EErrorCode["ROLE_CREATE_INVALID_PROFESSION"] = 104] = "ROLE_CREATE_INVALID_PROFESSION";
        EErrorCode[EErrorCode["ROLE_CREATE_INVALID_GENDER"] = 105] = "ROLE_CREATE_INVALID_GENDER";
        EErrorCode[EErrorCode["ROLE_NOT_OWNED_BY_USER"] = 106] = "ROLE_NOT_OWNED_BY_USER";
        EErrorCode[EErrorCode["ROLE_LEVEL_NOT_ARRIVE"] = 107] = "ROLE_LEVEL_NOT_ARRIVE";
        EErrorCode[EErrorCode["PARAM_ILLEGAL"] = 200] = "PARAM_ILLEGAL";
        EErrorCode[EErrorCode["TEMP_BAG_NOT_EMPTY"] = 201] = "TEMP_BAG_NOT_EMPTY";
        EErrorCode[EErrorCode["ITEM_CAN_NOT_USE"] = 202] = "ITEM_CAN_NOT_USE";
        EErrorCode[EErrorCode["CURRENCY_NOT_ENOUGH"] = 203] = "CURRENCY_NOT_ENOUGH";
        EErrorCode[EErrorCode["BAG_IS_FULL"] = 204] = "BAG_IS_FULL";
        EErrorCode[EErrorCode["ITEM_NOT_ENOUGH"] = 205] = "ITEM_NOT_ENOUGH";
        EErrorCode[EErrorCode["ITEM_IN_BAG"] = 206] = "ITEM_IN_BAG";
        EErrorCode[EErrorCode["GENDER_NOT_MATCH"] = 300] = "GENDER_NOT_MATCH";
        EErrorCode[EErrorCode["LEVEL_TOO_LOW"] = 301] = "LEVEL_TOO_LOW";
        EErrorCode[EErrorCode["LEVEL_TOO_HIGH"] = 302] = "LEVEL_TOO_HIGH";
        EErrorCode[EErrorCode["EXCEED_LIMIT"] = 303] = "EXCEED_LIMIT";
        EErrorCode[EErrorCode["OVER_TIME"] = 304] = "OVER_TIME";
        EErrorCode[EErrorCode["SERVER_ERROR"] = 305] = "SERVER_ERROR";
        EErrorCode[EErrorCode["SKILL_NOT_IN_LIST"] = 400] = "SKILL_NOT_IN_LIST";
        EErrorCode[EErrorCode["SKILL_NOT_COOLDOWN"] = 401] = "SKILL_NOT_COOLDOWN";
        EErrorCode[EErrorCode["SKILL_TARGET_NOT_EXIST"] = 402] = "SKILL_TARGET_NOT_EXIST";
        EErrorCode[EErrorCode["SKILL_ANOTHER_CASTING"] = 403] = "SKILL_ANOTHER_CASTING";
        EErrorCode[EErrorCode["SKILL_OUT_OF_DISTANCE"] = 404] = "SKILL_OUT_OF_DISTANCE";
        EErrorCode[EErrorCode["SKILL_TARGET_CAMP_NOT_MATCH"] = 405] = "SKILL_TARGET_CAMP_NOT_MATCH";
        EErrorCode[EErrorCode["SKILL_INVALID_DIRECTION"] = 406] = "SKILL_INVALID_DIRECTION";
        EErrorCode[EErrorCode["SKILL_NOT_IN_SELECT_SHAPE"] = 407] = "SKILL_NOT_IN_SELECT_SHAPE";
        EErrorCode[EErrorCode["SKILL_ENERGY_NOT_ENOUGH"] = 408] = "SKILL_ENERGY_NOT_ENOUGH";
        EErrorCode[EErrorCode["DIALOG_NODE_NOT_CHOOSEN"] = 500] = "DIALOG_NODE_NOT_CHOOSEN";
        EErrorCode[EErrorCode["DIALOG_NOT_FINISH"] = 501] = "DIALOG_NOT_FINISH";
        EErrorCode[EErrorCode["DIALOG_HAS_FINISH"] = 502] = "DIALOG_HAS_FINISH";
        EErrorCode[EErrorCode["QUEST_STAGE_NOT_FINISHED"] = 503] = "QUEST_STAGE_NOT_FINISHED";
        EErrorCode[EErrorCode["QUEST_NOT_DOING"] = 504] = "QUEST_NOT_DOING";
        EErrorCode[EErrorCode["QUEST_STAGE_NOT_DOING"] = 505] = "QUEST_STAGE_NOT_DOING";
        EErrorCode[EErrorCode["QUEST_HAS_ACCEPTED"] = 506] = "QUEST_HAS_ACCEPTED";
        EErrorCode[EErrorCode["MAP_OBJECT_NOT_EXIST"] = 600] = "MAP_OBJECT_NOT_EXIST";
        EErrorCode[EErrorCode["INTERACTION_OBJECT_NOT_SUPPORT_OPERATION"] = 601] = "INTERACTION_OBJECT_NOT_SUPPORT_OPERATION";
        EErrorCode[EErrorCode["HAS_NOT_EQUIP"] = 602] = "HAS_NOT_EQUIP";
        EErrorCode[EErrorCode["HANDHELD_EQUIP_ID_NOT_MATCH"] = 603] = "HANDHELD_EQUIP_ID_NOT_MATCH";
        EErrorCode[EErrorCode["NOT_AVAILABLE_SUIT_ID"] = 604] = "NOT_AVAILABLE_SUIT_ID";
        EErrorCode[EErrorCode["NO_INTERACTION_COMPONENT"] = 605] = "NO_INTERACTION_COMPONENT";
        EErrorCode[EErrorCode["HAS_INTERACTED"] = 606] = "HAS_INTERACTED";
        EErrorCode[EErrorCode["VIALITY_NOT_ENOUGH"] = 607] = "VIALITY_NOT_ENOUGH";
        EErrorCode[EErrorCode["PLAYER_SESSION_NOT_EXIST"] = 608] = "PLAYER_SESSION_NOT_EXIST";
        EErrorCode[EErrorCode["PLAYER_SESSION_WORLD_PLAYER_NOT_INIT"] = 609] = "PLAYER_SESSION_WORLD_PLAYER_NOT_INIT";
        EErrorCode[EErrorCode["MAP_NOT_EXIST"] = 610] = "MAP_NOT_EXIST";
        EErrorCode[EErrorCode["MAIL_TYPE_ERROR"] = 700] = "MAIL_TYPE_ERROR";
        EErrorCode[EErrorCode["MAIL_NOT_EXITST"] = 701] = "MAIL_NOT_EXITST";
        EErrorCode[EErrorCode["MAIL_HAVE_DELETED"] = 702] = "MAIL_HAVE_DELETED";
        EErrorCode[EErrorCode["MAIL_AWARD_HAVE_RECEIVED"] = 703] = "MAIL_AWARD_HAVE_RECEIVED";
        EErrorCode[EErrorCode["MAIL_OPERATE_TYPE_ERROR"] = 704] = "MAIL_OPERATE_TYPE_ERROR";
        EErrorCode[EErrorCode["MAIL_CONDITION_NOT_MEET"] = 705] = "MAIL_CONDITION_NOT_MEET";
        EErrorCode[EErrorCode["MAIL_STATE_ERROR"] = 706] = "MAIL_STATE_ERROR";
        EErrorCode[EErrorCode["MAIL_NO_AWARD"] = 707] = "MAIL_NO_AWARD";
        EErrorCode[EErrorCode["MAIL_BOX_IS_FULL"] = 708] = "MAIL_BOX_IS_FULL";
        EErrorCode[EErrorCode["PROP_SCORE_NOT_BIGGER_THAN"] = 800] = "PROP_SCORE_NOT_BIGGER_THAN";
        EErrorCode[EErrorCode["NOT_WEAR_CLOTHES"] = 801] = "NOT_WEAR_CLOTHES";
        EErrorCode[EErrorCode["NOT_WEAR_SUIT"] = 802] = "NOT_WEAR_SUIT";
        EErrorCode[EErrorCode["SUIT_NOT_UNLOCK"] = 900] = "SUIT_NOT_UNLOCK";
        EErrorCode[EErrorCode["SUIT_COMPONENT_NOT_UNLOCK"] = 901] = "SUIT_COMPONENT_NOT_UNLOCK";
        EErrorCode[EErrorCode["SUIT_STATE_ERROR"] = 902] = "SUIT_STATE_ERROR";
        EErrorCode[EErrorCode["SUIT_COMPONENT_STATE_ERROR"] = 903] = "SUIT_COMPONENT_STATE_ERROR";
        EErrorCode[EErrorCode["SUIT_COMPONENT_NO_NEED_LEARN"] = 904] = "SUIT_COMPONENT_NO_NEED_LEARN";
        EErrorCode[EErrorCode["STORE_NOT_ENABLED"] = 1000] = "STORE_NOT_ENABLED";
        EErrorCode[EErrorCode["SHELF_NOT_ENABLED"] = 1001] = "SHELF_NOT_ENABLED";
        EErrorCode[EErrorCode["GOODS_NOT_ENABLED"] = 1002] = "GOODS_NOT_ENABLED";
        EErrorCode[EErrorCode["GOODS_NOT_IN_CUR_REFRESH"] = 1003] = "GOODS_NOT_IN_CUR_REFRESH";
        EErrorCode[EErrorCode["RETRY"] = 1100] = "RETRY";
        EErrorCode[EErrorCode["NOT_COOLDOWN"] = 1101] = "NOT_COOLDOWN";
        EErrorCode[EErrorCode["SELFIE_UNLOCK"] = 1200] = "SELFIE_UNLOCK";
        EErrorCode[EErrorCode["SELFIE_ALREADY_UNLOCK"] = 1201] = "SELFIE_ALREADY_UNLOCK";
        EErrorCode[EErrorCode["SELFIE_LACK_STARTS"] = 1202] = "SELFIE_LACK_STARTS";
        EErrorCode[EErrorCode["SELFIE_HAD_REWARD"] = 1203] = "SELFIE_HAD_REWARD";
    })(EErrorCode = error.EErrorCode || (error.EErrorCode = {}));
})(error = exports.error || (exports.error = {}));
var item;
(function (item) {
    /**
     * 道具品质
     */
    let EItemQuality;
    (function (EItemQuality) {
        /**
         * 白
         */
        EItemQuality[EItemQuality["WHITE"] = 0] = "WHITE";
        /**
         * 绿
         */
        EItemQuality[EItemQuality["GREEN"] = 1] = "GREEN";
        /**
         * 蓝
         */
        EItemQuality[EItemQuality["BLUE"] = 2] = "BLUE";
        /**
         * 紫
         */
        EItemQuality[EItemQuality["PURPLE"] = 3] = "PURPLE";
        /**
         * 金
         */
        EItemQuality[EItemQuality["GOLDEN"] = 4] = "GOLDEN";
    })(EItemQuality = item.EItemQuality || (item.EItemQuality = {}));
})(item = exports.item || (exports.item = {}));
(function (item) {
    let ECurrencyType;
    (function (ECurrencyType) {
        /**
         * 钻石
         */
        ECurrencyType[ECurrencyType["DIAMOND"] = 1] = "DIAMOND";
        /**
         * 金币
         */
        ECurrencyType[ECurrencyType["GOLD"] = 2] = "GOLD";
        /**
         * 银币
         */
        ECurrencyType[ECurrencyType["SILVER"] = 3] = "SILVER";
        /**
         * 经验
         */
        ECurrencyType[ECurrencyType["EXP"] = 4] = "EXP";
        /**
         * 能量点
         */
        ECurrencyType[ECurrencyType["POWER_POINT"] = 5] = "POWER_POINT";
    })(ECurrencyType = item.ECurrencyType || (item.ECurrencyType = {}));
})(item = exports.item || (exports.item = {}));
(function (item) {
    let EMajorType;
    (function (EMajorType) {
        /**
         * 货币
         */
        EMajorType[EMajorType["CURRENCY"] = 1] = "CURRENCY";
        /**
         * 服装
         */
        EMajorType[EMajorType["CLOTH"] = 2] = "CLOTH";
        /**
         * 任务
         */
        EMajorType[EMajorType["QUEST"] = 3] = "QUEST";
        /**
         * 消耗品
         */
        EMajorType[EMajorType["CONSUMABLES"] = 4] = "CONSUMABLES";
        /**
         * 宝箱
         */
        EMajorType[EMajorType["TREASURE_BOX"] = 5] = "TREASURE_BOX";
        /**
         * 成就和称谓
         */
        EMajorType[EMajorType["ACHIEVEMENT_AND_TITLE"] = 6] = "ACHIEVEMENT_AND_TITLE";
        /**
         * 头像框
         */
        EMajorType[EMajorType["HEAD_FRAME"] = 7] = "HEAD_FRAME";
        /**
         * 语音
         */
        EMajorType[EMajorType["VOICE"] = 8] = "VOICE";
        /**
         * 动作
         */
        EMajorType[EMajorType["ACTION"] = 9] = "ACTION";
        /**
         * 扩容道具
         */
        EMajorType[EMajorType["EXPANSION"] = 10] = "EXPANSION";
        /**
         * 制作材料
         */
        EMajorType[EMajorType["MATERIAL"] = 11] = "MATERIAL";
    })(EMajorType = item.EMajorType || (item.EMajorType = {}));
})(item = exports.item || (exports.item = {}));
(function (item) {
    let EMinorType;
    (function (EMinorType) {
        /**
         * 钻石
         */
        EMinorType[EMinorType["DIAMOND"] = 101] = "DIAMOND";
        /**
         * 金币
         */
        EMinorType[EMinorType["GOLD"] = 102] = "GOLD";
        /**
         * 银币
         */
        EMinorType[EMinorType["SILVER"] = 103] = "SILVER";
        /**
         * 经验
         */
        EMinorType[EMinorType["EXP"] = 104] = "EXP";
        /**
         * 能量点
         */
        EMinorType[EMinorType["POWER_POINT"] = 105] = "POWER_POINT";
        /**
         * 发型
         */
        EMinorType[EMinorType["HAIR_STYLE"] = 210] = "HAIR_STYLE";
        /**
         * 外套
         */
        EMinorType[EMinorType["COAT"] = 220] = "COAT";
        /**
         * 上衣
         */
        EMinorType[EMinorType["UPPER_JACKET"] = 230] = "UPPER_JACKET";
        /**
         * 裤子
         */
        EMinorType[EMinorType["TROUSERS"] = 241] = "TROUSERS";
        /**
         * 裙子
         */
        EMinorType[EMinorType["SKIRT"] = 242] = "SKIRT";
        /**
         * 袜子
         */
        EMinorType[EMinorType["SOCKS"] = 250] = "SOCKS";
        /**
         * 鞋子
         */
        EMinorType[EMinorType["SHOES"] = 260] = "SHOES";
        /**
         * 发饰
         */
        EMinorType[EMinorType["HAIR_ACCESSORY"] = 271] = "HAIR_ACCESSORY";
        /**
         * 帽子
         */
        EMinorType[EMinorType["HAT"] = 272] = "HAT";
        /**
         * 耳饰
         */
        EMinorType[EMinorType["EARRING"] = 273] = "EARRING";
        /**
         * 颈饰
         */
        EMinorType[EMinorType["NECKLACE"] = 274] = "NECKLACE";
        /**
         * 腕饰
         */
        EMinorType[EMinorType["BRACELET"] = 275] = "BRACELET";
        /**
         * 发箍
         */
        EMinorType[EMinorType["HAIR_CLASP"] = 276] = "HAIR_CLASP";
        /**
         * 手套
         */
        EMinorType[EMinorType["GLOVE"] = 277] = "GLOVE";
        /**
         * 手持物
         */
        EMinorType[EMinorType["HANDHELD_OBJECT"] = 278] = "HANDHELD_OBJECT";
        /**
         * 特殊
         */
        EMinorType[EMinorType["SPECIAL"] = 279] = "SPECIAL";
        /**
         * 底妆
         */
        EMinorType[EMinorType["BASE_COSMETIC"] = 281] = "BASE_COSMETIC";
        /**
         * 眉妆
         */
        EMinorType[EMinorType["EYEBROW_COSMETIC"] = 282] = "EYEBROW_COSMETIC";
        /**
         * 睫毛
         */
        EMinorType[EMinorType["EYELASH"] = 283] = "EYELASH";
        /**
         * 美瞳
         */
        EMinorType[EMinorType["COSMETIC_CONTACT_LENSES"] = 284] = "COSMETIC_CONTACT_LENSES";
        /**
         * 唇妆
         */
        EMinorType[EMinorType["LIP_COSMETIC"] = 285] = "LIP_COSMETIC";
        /**
         * 肤色
         */
        EMinorType[EMinorType["SKIN_COLOR"] = 286] = "SKIN_COLOR";
        /**
         * 连衣裙
         */
        EMinorType[EMinorType["ONE_PIECE_DRESS"] = 290] = "ONE_PIECE_DRESS";
        /**
         * 换装场景
         */
        EMinorType[EMinorType["SWITCH_CLOTHES_SCENE"] = 291] = "SWITCH_CLOTHES_SCENE";
        /**
         * 任务道具
         */
        EMinorType[EMinorType["QUEST"] = 301] = "QUEST";
        /**
         * 投掷物
         */
        EMinorType[EMinorType["CAST"] = 401] = "CAST";
        /**
         * 刀剑
         */
        EMinorType[EMinorType["SWORD"] = 421] = "SWORD";
        /**
         * 弓箭
         */
        EMinorType[EMinorType["BOW_ARROW"] = 422] = "BOW_ARROW";
        /**
         * 法杖
         */
        EMinorType[EMinorType["WANDS"] = 423] = "WANDS";
        /**
         * 特殊工具
         */
        EMinorType[EMinorType["SPECIAL_TOOL"] = 424] = "SPECIAL_TOOL";
        /**
         * 食物
         */
        EMinorType[EMinorType["FOOD"] = 403] = "FOOD";
        /**
         * 宝箱
         */
        EMinorType[EMinorType["TREASURE_BOX"] = 501] = "TREASURE_BOX";
        /**
         * 钥匙
         */
        EMinorType[EMinorType["KEY"] = 502] = "KEY";
        /**
         * 多选一宝箱
         */
        EMinorType[EMinorType["MULTI_CHOOSE_TREASURE_BOX"] = 503] = "MULTI_CHOOSE_TREASURE_BOX";
        /**
         * 成就相关
         */
        EMinorType[EMinorType["ACHIEVEMENT"] = 601] = "ACHIEVEMENT";
        /**
         * 称谓相关
         */
        EMinorType[EMinorType["TITLE"] = 602] = "TITLE";
        /**
         * 头像框
         */
        EMinorType[EMinorType["AVATAR_FRAME"] = 701] = "AVATAR_FRAME";
        /**
         * 语音
         */
        EMinorType[EMinorType["VOICE"] = 801] = "VOICE";
        /**
         * 特殊待机动作
         */
        EMinorType[EMinorType["IDLE_POSE"] = 901] = "IDLE_POSE";
        /**
         * 拍照动作
         */
        EMinorType[EMinorType["PHOTO_POSE"] = 902] = "PHOTO_POSE";
        /**
         * 背包
         */
        EMinorType[EMinorType["BAG"] = 1001] = "BAG";
        /**
         * 好友数量
         */
        EMinorType[EMinorType["FRIEND_CAPACITY"] = 1002] = "FRIEND_CAPACITY";
        /**
         * 制作材料
         */
        EMinorType[EMinorType["CONSTRUCTION_MATERIAL"] = 1101] = "CONSTRUCTION_MATERIAL";
        /**
         * 设计图纸
         */
        EMinorType[EMinorType["DESIGN_DRAWING"] = 1102] = "DESIGN_DRAWING";
    })(EMinorType = item.EMinorType || (item.EMinorType = {}));
})(item = exports.item || (exports.item = {}));
(function (item) {
    let EClothersStarQualityType;
    (function (EClothersStarQualityType) {
        /**
         * 一星
         */
        EClothersStarQualityType[EClothersStarQualityType["ONE"] = 1] = "ONE";
        /**
         * 二星
         */
        EClothersStarQualityType[EClothersStarQualityType["TWO"] = 2] = "TWO";
        /**
         * 三星
         */
        EClothersStarQualityType[EClothersStarQualityType["THREE"] = 3] = "THREE";
        /**
         * 四星
         */
        EClothersStarQualityType[EClothersStarQualityType["FOUR"] = 4] = "FOUR";
        /**
         * 五星
         */
        EClothersStarQualityType[EClothersStarQualityType["FIVE"] = 5] = "FIVE";
        /**
         * 六星
         */
        EClothersStarQualityType[EClothersStarQualityType["SIX"] = 6] = "SIX";
        /**
         * 七星
         */
        EClothersStarQualityType[EClothersStarQualityType["SEVEN"] = 7] = "SEVEN";
        /**
         * 八星
         */
        EClothersStarQualityType[EClothersStarQualityType["EIGHT"] = 8] = "EIGHT";
        /**
         * 九星
         */
        EClothersStarQualityType[EClothersStarQualityType["NINE"] = 9] = "NINE";
        /**
         * 十星
         */
        EClothersStarQualityType[EClothersStarQualityType["TEN"] = 10] = "TEN";
    })(EClothersStarQualityType = item.EClothersStarQualityType || (item.EClothersStarQualityType = {}));
})(item = exports.item || (exports.item = {}));
(function (item) {
    let EClothersTag;
    (function (EClothersTag) {
        /**
         * 防晒
         */
        EClothersTag[EClothersTag["FANG_SHAI"] = 1] = "FANG_SHAI";
        /**
         * 舞者
         */
        EClothersTag[EClothersTag["WU_ZHE"] = 2] = "WU_ZHE";
    })(EClothersTag = item.EClothersTag || (item.EClothersTag = {}));
})(item = exports.item || (exports.item = {}));
(function (item) {
    let EUseType;
    (function (EUseType) {
        /**
         * 手动
         */
        EUseType[EUseType["MANUAL"] = 0] = "MANUAL";
        /**
         * 自动
         */
        EUseType[EUseType["AUTO"] = 1] = "AUTO";
    })(EUseType = item.EUseType || (item.EUseType = {}));
})(item = exports.item || (exports.item = {}));
(function (item) {
    let EClothesHidePartType;
    (function (EClothesHidePartType) {
        /**
         * 胸部
         */
        EClothesHidePartType[EClothesHidePartType["CHEST"] = 0] = "CHEST";
        /**
         * 手
         */
        EClothesHidePartType[EClothesHidePartType["HEAD"] = 1] = "HEAD";
        /**
         * 脊柱上
         */
        EClothesHidePartType[EClothesHidePartType["SPINE_UPPER"] = 2] = "SPINE_UPPER";
        /**
         * 脊柱下
         */
        EClothesHidePartType[EClothesHidePartType["SPINE_LOWER"] = 3] = "SPINE_LOWER";
        /**
         * 臀部
         */
        EClothesHidePartType[EClothesHidePartType["HIP"] = 4] = "HIP";
        /**
         * 腿上
         */
        EClothesHidePartType[EClothesHidePartType["LEG_UPPER"] = 5] = "LEG_UPPER";
        /**
         * 腿中
         */
        EClothesHidePartType[EClothesHidePartType["LEG_MIDDLE"] = 6] = "LEG_MIDDLE";
        /**
         * 腿下
         */
        EClothesHidePartType[EClothesHidePartType["LEG_LOWER"] = 7] = "LEG_LOWER";
    })(EClothesHidePartType = item.EClothesHidePartType || (item.EClothesHidePartType = {}));
})(item = exports.item || (exports.item = {}));
(function (item) {
    let EClothesPropertyType;
    (function (EClothesPropertyType) {
        /**
         * 简约
         */
        EClothesPropertyType[EClothesPropertyType["JIAN_YUE"] = 1] = "JIAN_YUE";
        /**
         * 华丽
         */
        EClothesPropertyType[EClothesPropertyType["HUA_LI"] = 2] = "HUA_LI";
        /**
         * 可爱
         */
        EClothesPropertyType[EClothesPropertyType["KE_AI"] = 3] = "KE_AI";
        /**
         * 成熟
         */
        EClothesPropertyType[EClothesPropertyType["CHENG_SHU"] = 4] = "CHENG_SHU";
        /**
         * 活泼
         */
        EClothesPropertyType[EClothesPropertyType["HUO_PO"] = 5] = "HUO_PO";
        /**
         * 优雅
         */
        EClothesPropertyType[EClothesPropertyType["YOU_YA"] = 6] = "YOU_YA";
        /**
         * 清纯
         */
        EClothesPropertyType[EClothesPropertyType["QING_CHUN"] = 7] = "QING_CHUN";
        /**
         * 性感
         */
        EClothesPropertyType[EClothesPropertyType["XING_GAN"] = 8] = "XING_GAN";
        /**
         * 清凉
         */
        EClothesPropertyType[EClothesPropertyType["QING_LIANG"] = 9] = "QING_LIANG";
        /**
         * 保暖
         */
        EClothesPropertyType[EClothesPropertyType["BAO_NUAN"] = 10] = "BAO_NUAN";
    })(EClothesPropertyType = item.EClothesPropertyType || (item.EClothesPropertyType = {}));
})(item = exports.item || (exports.item = {}));
(function (item) {
    let EItemFunctionType;
    (function (EItemFunctionType) {
        /**
         * 更换手持物
         */
        EItemFunctionType[EItemFunctionType["REPLACE_HANDHELD"] = 0] = "REPLACE_HANDHELD";
        /**
         * 使用设计图纸
         */
        EItemFunctionType[EItemFunctionType["USE_DESIGN_DRAWING"] = 1] = "USE_DESIGN_DRAWING";
    })(EItemFunctionType = item.EItemFunctionType || (item.EItemFunctionType = {}));
})(item = exports.item || (exports.item = {}));
var limit;
(function (limit) {
    let ENamespace;
    (function (ENamespace) {
        ENamespace[ENamespace["ITEM_DAILY_OBTAIN"] = 1] = "ITEM_DAILY_OBTAIN";
        ENamespace[ENamespace["TREASURE_DAILY_USE"] = 2] = "TREASURE_DAILY_USE";
        ENamespace[ENamespace["STORE_GOODS_LIMIT_BUY"] = 3] = "STORE_GOODS_LIMIT_BUY";
    })(ENamespace = limit.ENamespace || (limit.ENamespace = {}));
})(limit = exports.limit || (exports.limit = {}));
var mail;
(function (mail) {
    let EMailType;
    (function (EMailType) {
        /**
         * 全局邮件
         */
        EMailType[EMailType["GLOBAL"] = 0] = "GLOBAL";
        /**
         * 系统邮件
         */
        EMailType[EMailType["SYSTEM"] = 1] = "SYSTEM";
    })(EMailType = mail.EMailType || (mail.EMailType = {}));
})(mail = exports.mail || (exports.mail = {}));
var role;
(function (role) {
    let EGenderType;
    (function (EGenderType) {
        /**
         * 男
         */
        EGenderType[EGenderType["MALE"] = 1] = "MALE";
        /**
         * 女
         */
        EGenderType[EGenderType["FEMALE"] = 2] = "FEMALE";
    })(EGenderType = role.EGenderType || (role.EGenderType = {}));
})(role = exports.role || (exports.role = {}));
(function (role) {
    let EProfession;
    (function (EProfession) {
        EProfession[EProfession["TEST_PROFESSION"] = 1] = "TEST_PROFESSION";
    })(EProfession = role.EProfession || (role.EProfession = {}));
})(role = exports.role || (exports.role = {}));
var test;
(function (test) {
    let DemoEnum;
    (function (DemoEnum) {
        /**
         * aa
         */
        DemoEnum[DemoEnum["A"] = 1] = "A";
        /**
         * bb
         */
        DemoEnum[DemoEnum["B"] = 2] = "B";
        /**
         * cc
         */
        DemoEnum[DemoEnum["C"] = 4] = "C";
        /**
         * dd
         */
        DemoEnum[DemoEnum["D"] = 5] = "D";
    })(DemoEnum = test.DemoEnum || (test.DemoEnum = {}));
})(test = exports.test || (exports.test = {}));
(function (test) {
    let DemoFlag;
    (function (DemoFlag) {
        DemoFlag[DemoFlag["A"] = 1] = "A";
        DemoFlag[DemoFlag["B"] = 2] = "B";
        DemoFlag[DemoFlag["D"] = 3] = "D";
    })(DemoFlag = test.DemoFlag || (test.DemoFlag = {}));
})(test = exports.test || (exports.test = {}));
(function (test) {
    let ETestUeType;
    (function (ETestUeType) {
        /**
         * 白
         */
        ETestUeType[ETestUeType["WHITE"] = 0] = "WHITE";
        ETestUeType[ETestUeType["BLACK"] = 1] = "BLACK";
    })(ETestUeType = test.ETestUeType || (test.ETestUeType = {}));
})(test = exports.test || (exports.test = {}));
(function (test) {
    let ETestEmptyEnum;
    (function (ETestEmptyEnum) {
    })(ETestEmptyEnum = test.ETestEmptyEnum || (test.ETestEmptyEnum = {}));
})(test = exports.test || (exports.test = {}));
(function (test) {
    let ETestEmptyEnum2;
    (function (ETestEmptyEnum2) {
        ETestEmptyEnum2[ETestEmptyEnum2["SMALL_THAN_256"] = 255] = "SMALL_THAN_256";
        ETestEmptyEnum2[ETestEmptyEnum2["X_256"] = 256] = "X_256";
        ETestEmptyEnum2[ETestEmptyEnum2["X_257"] = 257] = "X_257";
    })(ETestEmptyEnum2 = test.ETestEmptyEnum2 || (test.ETestEmptyEnum2 = {}));
})(test = exports.test || (exports.test = {}));
(function (test) {
    let ETestQuality;
    (function (ETestQuality) {
        /**
         * 最高品质
         */
        ETestQuality[ETestQuality["A"] = 1] = "A";
        /**
         * 黑色的
         */
        ETestQuality[ETestQuality["B"] = 2] = "B";
        /**
         * 蓝色的
         */
        ETestQuality[ETestQuality["C"] = 3] = "C";
        /**
         * 最差品质
         */
        ETestQuality[ETestQuality["D"] = 4] = "D";
    })(ETestQuality = test.ETestQuality || (test.ETestQuality = {}));
})(test = exports.test || (exports.test = {}));
(function (test) {
    let ETestCurrency;
    (function (ETestCurrency) {
        /**
         * 重要
         */
        ETestCurrency[ETestCurrency["DIAMOND"] = 1] = "DIAMOND";
        /**
         * 有用
         */
        ETestCurrency[ETestCurrency["GOLD"] = 2] = "GOLD";
    })(ETestCurrency = test.ETestCurrency || (test.ETestCurrency = {}));
})(test = exports.test || (exports.test = {}));
(function (ai) {
    class TbBlackboard {
        _dataMap;
        _dataList;
        constructor(_json_) {
            this._dataMap = new Map();
            this._dataList = [];
            for (var _json2_ of _json_) {
                let _v;
                _v = new ai.Blackboard(_json2_);
                this._dataList.push(_v);
                this._dataMap.set(_v.name, _v);
            }
        }
        getDataMap() { return this._dataMap; }
        getDataList() { return this._dataList; }
        get(key) { return this._dataMap.get(key); }
        resolve(_tables) {
            for (var v of this._dataList) {
                v.resolve(_tables);
            }
        }
    }
    ai.TbBlackboard = TbBlackboard;
})(ai = exports.ai || (exports.ai = {}));
(function (ai) {
    class Blackboard {
        constructor(_json_) {
            if (_json_.name === undefined) {
                throw new Error();
            }
            this.name = _json_.name;
            if (_json_.desc === undefined) {
                throw new Error();
            }
            this.desc = _json_.desc;
            if (_json_.parent_name === undefined) {
                throw new Error();
            }
            this.parentName = _json_.parent_name;
            if (_json_.keys === undefined) {
                throw new Error();
            }
            {
                this.keys = [];
                for (let _ele of _json_.keys) {
                    let _e;
                    _e = new ai.BlackboardKey(_ele);
                    this.keys.push(_e);
                }
            }
        }
        name;
        desc;
        parentName;
        parentName_Ref = undefined;
        keys;
        resolve(_tables) {
            this.parentName_Ref = _tables.get('ai.TbBlackboard').get(this.parentName);
            for (let _e of this.keys) {
                if (_e != null) {
                    _e.resolve(_tables);
                }
            }
        }
    }
    ai.Blackboard = Blackboard;
})(ai = exports.ai || (exports.ai = {}));
(function (ai) {
    class BlackboardKey {
        constructor(_json_) {
            if (_json_.name === undefined) {
                throw new Error();
            }
            this.name = _json_.name;
            if (_json_.desc === undefined) {
                throw new Error();
            }
            this.desc = _json_.desc;
            if (_json_.is_static === undefined) {
                throw new Error();
            }
            this.isStatic = _json_.is_static;
            if (_json_.type === undefined) {
                throw new Error();
            }
            this.type = _json_.type;
            if (_json_.type_class_name === undefined) {
                throw new Error();
            }
            this.typeClassName = _json_.type_class_name;
        }
        name;
        desc;
        isStatic;
        type;
        typeClassName;
        resolve(_tables) {
        }
    }
    ai.BlackboardKey = BlackboardKey;
})(ai = exports.ai || (exports.ai = {}));
(function (ai) {
    class TbBehaviorTree {
        _dataMap;
        _dataList;
        constructor(_json_) {
            this._dataMap = new Map();
            this._dataList = [];
            for (var _json2_ of _json_) {
                let _v;
                _v = new ai.BehaviorTree(_json2_);
                this._dataList.push(_v);
                this._dataMap.set(_v.id, _v);
            }
        }
        getDataMap() { return this._dataMap; }
        getDataList() { return this._dataList; }
        get(key) { return this._dataMap.get(key); }
        resolve(_tables) {
            for (var v of this._dataList) {
                v.resolve(_tables);
            }
        }
    }
    ai.TbBehaviorTree = TbBehaviorTree;
})(ai = exports.ai || (exports.ai = {}));
(function (ai) {
    class BehaviorTree {
        constructor(_json_) {
            if (_json_.id === undefined) {
                throw new Error();
            }
            this.id = _json_.id;
            if (_json_.name === undefined) {
                throw new Error();
            }
            this.name = _json_.name;
            if (_json_.desc === undefined) {
                throw new Error();
            }
            this.desc = _json_.desc;
            if (_json_.blackboard_id === undefined) {
                throw new Error();
            }
            this.blackboardId = _json_.blackboard_id;
            if (_json_.root === undefined) {
                throw new Error();
            }
            this.root = ai.ComposeNode.constructorFrom(_json_.root);
        }
        id;
        name;
        desc;
        blackboardId;
        blackboardId_Ref = undefined;
        root;
        resolve(_tables) {
            this.blackboardId_Ref = _tables.get('ai.TbBlackboard').get(this.blackboardId);
            if (this.root != null) {
                this.root.resolve(_tables);
            }
        }
    }
    ai.BehaviorTree = BehaviorTree;
})(ai = exports.ai || (exports.ai = {}));
(function (ai) {
    class Node {
        static constructorFrom(_json_) {
            switch (_json_.__type__) {
                case 'UeSetDefaultFocus': return new ai.UeSetDefaultFocus(_json_);
                case 'ExecuteTimeStatistic': return new ai.ExecuteTimeStatistic(_json_);
                case 'ChooseTarget': return new ai.ChooseTarget(_json_);
                case 'KeepFaceTarget': return new ai.KeepFaceTarget(_json_);
                case 'GetOwnerPlayer': return new ai.GetOwnerPlayer(_json_);
                case 'UpdateDailyBehaviorProps': return new ai.UpdateDailyBehaviorProps(_json_);
                case 'UeLoop': return new ai.UeLoop(_json_);
                case 'UeCooldown': return new ai.UeCooldown(_json_);
                case 'UeTimeLimit': return new ai.UeTimeLimit(_json_);
                case 'UeBlackboard': return new ai.UeBlackboard(_json_);
                case 'UeForceSuccess': return new ai.UeForceSuccess(_json_);
                case 'IsAtLocation': return new ai.IsAtLocation(_json_);
                case 'DistanceLessThan': return new ai.DistanceLessThan(_json_);
                case 'Sequence': return new ai.Sequence(_json_);
                case 'Selector': return new ai.Selector(_json_);
                case 'SimpleParallel': return new ai.SimpleParallel(_json_);
                case 'UeWait': return new ai.UeWait(_json_);
                case 'UeWaitBlackboardTime': return new ai.UeWaitBlackboardTime(_json_);
                case 'MoveToTarget': return new ai.MoveToTarget(_json_);
                case 'ChooseSkill': return new ai.ChooseSkill(_json_);
                case 'MoveToRandomLocation': return new ai.MoveToRandomLocation(_json_);
                case 'MoveToLocation': return new ai.MoveToLocation(_json_);
                case 'DebugPrint': return new ai.DebugPrint(_json_);
                default: throw new Error();
            }
        }
        constructor(_json_) {
            if (_json_.id === undefined) {
                throw new Error();
            }
            this.id = _json_.id;
            if (_json_.node_name === undefined) {
                throw new Error();
            }
            this.nodeName = _json_.node_name;
        }
        id;
        nodeName;
        resolve(_tables) {
        }
    }
    ai.Node = Node;
})(ai = exports.ai || (exports.ai = {}));
(function (ai) {
    class Service extends ai.Node {
        static constructorFrom(_json_) {
            switch (_json_.__type__) {
                case 'UeSetDefaultFocus': return new ai.UeSetDefaultFocus(_json_);
                case 'ExecuteTimeStatistic': return new ai.ExecuteTimeStatistic(_json_);
                case 'ChooseTarget': return new ai.ChooseTarget(_json_);
                case 'KeepFaceTarget': return new ai.KeepFaceTarget(_json_);
                case 'GetOwnerPlayer': return new ai.GetOwnerPlayer(_json_);
                case 'UpdateDailyBehaviorProps': return new ai.UpdateDailyBehaviorProps(_json_);
                default: throw new Error();
            }
        }
        constructor(_json_) {
            super(_json_);
        }
        resolve(_tables) {
            super.resolve(_tables);
        }
    }
    ai.Service = Service;
})(ai = exports.ai || (exports.ai = {}));
(function (ai) {
    class UeSetDefaultFocus extends ai.Service {
        constructor(_json_) {
            super(_json_);
            if (_json_.keyboard_key === undefined) {
                throw new Error();
            }
            this.keyboardKey = _json_.keyboard_key;
        }
        keyboardKey;
        resolve(_tables) {
            super.resolve(_tables);
        }
    }
    ai.UeSetDefaultFocus = UeSetDefaultFocus;
})(ai = exports.ai || (exports.ai = {}));
(function (ai) {
    class ExecuteTimeStatistic extends ai.Service {
        constructor(_json_) {
            super(_json_);
        }
        resolve(_tables) {
            super.resolve(_tables);
        }
    }
    ai.ExecuteTimeStatistic = ExecuteTimeStatistic;
})(ai = exports.ai || (exports.ai = {}));
(function (ai) {
    class ChooseTarget extends ai.Service {
        constructor(_json_) {
            super(_json_);
            if (_json_.result_target_key === undefined) {
                throw new Error();
            }
            this.resultTargetKey = _json_.result_target_key;
        }
        resultTargetKey;
        resolve(_tables) {
            super.resolve(_tables);
        }
    }
    ai.ChooseTarget = ChooseTarget;
})(ai = exports.ai || (exports.ai = {}));
(function (ai) {
    class KeepFaceTarget extends ai.Service {
        constructor(_json_) {
            super(_json_);
            if (_json_.target_actor_key === undefined) {
                throw new Error();
            }
            this.targetActorKey = _json_.target_actor_key;
        }
        targetActorKey;
        resolve(_tables) {
            super.resolve(_tables);
        }
    }
    ai.KeepFaceTarget = KeepFaceTarget;
})(ai = exports.ai || (exports.ai = {}));
(function (ai) {
    class GetOwnerPlayer extends ai.Service {
        constructor(_json_) {
            super(_json_);
            if (_json_.player_actor_key === undefined) {
                throw new Error();
            }
            this.playerActorKey = _json_.player_actor_key;
        }
        playerActorKey;
        resolve(_tables) {
            super.resolve(_tables);
        }
    }
    ai.GetOwnerPlayer = GetOwnerPlayer;
})(ai = exports.ai || (exports.ai = {}));
(function (ai) {
    class UpdateDailyBehaviorProps extends ai.Service {
        constructor(_json_) {
            super(_json_);
            if (_json_.satiety_key === undefined) {
                throw new Error();
            }
            this.satietyKey = _json_.satiety_key;
            if (_json_.energy_key === undefined) {
                throw new Error();
            }
            this.energyKey = _json_.energy_key;
            if (_json_.mood_key === undefined) {
                throw new Error();
            }
            this.moodKey = _json_.mood_key;
            if (_json_.satiety_lower_threshold_key === undefined) {
                throw new Error();
            }
            this.satietyLowerThresholdKey = _json_.satiety_lower_threshold_key;
            if (_json_.satiety_upper_threshold_key === undefined) {
                throw new Error();
            }
            this.satietyUpperThresholdKey = _json_.satiety_upper_threshold_key;
            if (_json_.energy_lower_threshold_key === undefined) {
                throw new Error();
            }
            this.energyLowerThresholdKey = _json_.energy_lower_threshold_key;
            if (_json_.energy_upper_threshold_key === undefined) {
                throw new Error();
            }
            this.energyUpperThresholdKey = _json_.energy_upper_threshold_key;
            if (_json_.mood_lower_threshold_key === undefined) {
                throw new Error();
            }
            this.moodLowerThresholdKey = _json_.mood_lower_threshold_key;
            if (_json_.mood_upper_threshold_key === undefined) {
                throw new Error();
            }
            this.moodUpperThresholdKey = _json_.mood_upper_threshold_key;
        }
        satietyKey;
        energyKey;
        moodKey;
        satietyLowerThresholdKey;
        satietyUpperThresholdKey;
        energyLowerThresholdKey;
        energyUpperThresholdKey;
        moodLowerThresholdKey;
        moodUpperThresholdKey;
        resolve(_tables) {
            super.resolve(_tables);
        }
    }
    ai.UpdateDailyBehaviorProps = UpdateDailyBehaviorProps;
})(ai = exports.ai || (exports.ai = {}));
(function (ai) {
    class Decorator extends ai.Node {
        static constructorFrom(_json_) {
            switch (_json_.__type__) {
                case 'UeLoop': return new ai.UeLoop(_json_);
                case 'UeCooldown': return new ai.UeCooldown(_json_);
                case 'UeTimeLimit': return new ai.UeTimeLimit(_json_);
                case 'UeBlackboard': return new ai.UeBlackboard(_json_);
                case 'UeForceSuccess': return new ai.UeForceSuccess(_json_);
                case 'IsAtLocation': return new ai.IsAtLocation(_json_);
                case 'DistanceLessThan': return new ai.DistanceLessThan(_json_);
                default: throw new Error();
            }
        }
        constructor(_json_) {
            super(_json_);
            if (_json_.flow_abort_mode === undefined) {
                throw new Error();
            }
            this.flowAbortMode = _json_.flow_abort_mode;
        }
        flowAbortMode;
        resolve(_tables) {
            super.resolve(_tables);
        }
    }
    ai.Decorator = Decorator;
})(ai = exports.ai || (exports.ai = {}));
(function (ai) {
    class UeLoop extends ai.Decorator {
        constructor(_json_) {
            super(_json_);
            if (_json_.num_loops === undefined) {
                throw new Error();
            }
            this.numLoops = _json_.num_loops;
            if (_json_.infinite_loop === undefined) {
                throw new Error();
            }
            this.infiniteLoop = _json_.infinite_loop;
            if (_json_.infinite_loop_timeout_time === undefined) {
                throw new Error();
            }
            this.infiniteLoopTimeoutTime = _json_.infinite_loop_timeout_time;
        }
        numLoops;
        infiniteLoop;
        infiniteLoopTimeoutTime;
        resolve(_tables) {
            super.resolve(_tables);
        }
    }
    ai.UeLoop = UeLoop;
})(ai = exports.ai || (exports.ai = {}));
(function (ai) {
    class UeCooldown extends ai.Decorator {
        constructor(_json_) {
            super(_json_);
            if (_json_.cooldown_time === undefined) {
                throw new Error();
            }
            this.cooldownTime = _json_.cooldown_time;
        }
        cooldownTime;
        resolve(_tables) {
            super.resolve(_tables);
        }
    }
    ai.UeCooldown = UeCooldown;
})(ai = exports.ai || (exports.ai = {}));
(function (ai) {
    class UeTimeLimit extends ai.Decorator {
        constructor(_json_) {
            super(_json_);
            if (_json_.limit_time === undefined) {
                throw new Error();
            }
            this.limitTime = _json_.limit_time;
        }
        limitTime;
        resolve(_tables) {
            super.resolve(_tables);
        }
    }
    ai.UeTimeLimit = UeTimeLimit;
})(ai = exports.ai || (exports.ai = {}));
(function (ai) {
    class UeBlackboard extends ai.Decorator {
        constructor(_json_) {
            super(_json_);
            if (_json_.notify_observer === undefined) {
                throw new Error();
            }
            this.notifyObserver = _json_.notify_observer;
            if (_json_.blackboard_key === undefined) {
                throw new Error();
            }
            this.blackboardKey = _json_.blackboard_key;
            if (_json_.key_query === undefined) {
                throw new Error();
            }
            this.keyQuery = ai.KeyQueryOperator.constructorFrom(_json_.key_query);
        }
        notifyObserver;
        blackboardKey;
        keyQuery;
        resolve(_tables) {
            super.resolve(_tables);
            if (this.keyQuery != null) {
                this.keyQuery.resolve(_tables);
            }
        }
    }
    ai.UeBlackboard = UeBlackboard;
})(ai = exports.ai || (exports.ai = {}));
(function (ai) {
    class KeyQueryOperator {
        static constructorFrom(_json_) {
            switch (_json_.__type__) {
                case 'IsSet': return new ai.IsSet(_json_);
                case 'IsNotSet': return new ai.IsNotSet(_json_);
                case 'BinaryOperator': return new ai.BinaryOperator(_json_);
                default: throw new Error();
            }
        }
        constructor(_json_) {
        }
        resolve(_tables) {
        }
    }
    ai.KeyQueryOperator = KeyQueryOperator;
})(ai = exports.ai || (exports.ai = {}));
(function (ai) {
    class IsSet extends ai.KeyQueryOperator {
        constructor(_json_) {
            super(_json_);
        }
        resolve(_tables) {
            super.resolve(_tables);
        }
    }
    ai.IsSet = IsSet;
})(ai = exports.ai || (exports.ai = {}));
(function (ai) {
    class IsNotSet extends ai.KeyQueryOperator {
        constructor(_json_) {
            super(_json_);
        }
        resolve(_tables) {
            super.resolve(_tables);
        }
    }
    ai.IsNotSet = IsNotSet;
})(ai = exports.ai || (exports.ai = {}));
(function (ai) {
    class BinaryOperator extends ai.KeyQueryOperator {
        constructor(_json_) {
            super(_json_);
            if (_json_.oper === undefined) {
                throw new Error();
            }
            this.oper = _json_.oper;
            if (_json_.data === undefined) {
                throw new Error();
            }
            this.data = ai.KeyData.constructorFrom(_json_.data);
        }
        oper;
        data;
        resolve(_tables) {
            super.resolve(_tables);
            if (this.data != null) {
                this.data.resolve(_tables);
            }
        }
    }
    ai.BinaryOperator = BinaryOperator;
})(ai = exports.ai || (exports.ai = {}));
(function (ai) {
    class KeyData {
        static constructorFrom(_json_) {
            switch (_json_.__type__) {
                case 'FloatKeyData': return new ai.FloatKeyData(_json_);
                case 'IntKeyData': return new ai.IntKeyData(_json_);
                case 'StringKeyData': return new ai.StringKeyData(_json_);
                case 'BlackboardKeyData': return new ai.BlackboardKeyData(_json_);
                default: throw new Error();
            }
        }
        constructor(_json_) {
        }
        resolve(_tables) {
        }
    }
    ai.KeyData = KeyData;
})(ai = exports.ai || (exports.ai = {}));
(function (ai) {
    class FloatKeyData extends ai.KeyData {
        constructor(_json_) {
            super(_json_);
            if (_json_.value === undefined) {
                throw new Error();
            }
            this.value = _json_.value;
        }
        value;
        resolve(_tables) {
            super.resolve(_tables);
        }
    }
    ai.FloatKeyData = FloatKeyData;
})(ai = exports.ai || (exports.ai = {}));
(function (ai) {
    class IntKeyData extends ai.KeyData {
        constructor(_json_) {
            super(_json_);
            if (_json_.value === undefined) {
                throw new Error();
            }
            this.value = _json_.value;
        }
        value;
        resolve(_tables) {
            super.resolve(_tables);
        }
    }
    ai.IntKeyData = IntKeyData;
})(ai = exports.ai || (exports.ai = {}));
(function (ai) {
    class StringKeyData extends ai.KeyData {
        constructor(_json_) {
            super(_json_);
            if (_json_.value === undefined) {
                throw new Error();
            }
            this.value = _json_.value;
        }
        value;
        resolve(_tables) {
            super.resolve(_tables);
        }
    }
    ai.StringKeyData = StringKeyData;
})(ai = exports.ai || (exports.ai = {}));
(function (ai) {
    class BlackboardKeyData extends ai.KeyData {
        constructor(_json_) {
            super(_json_);
            if (_json_.value === undefined) {
                throw new Error();
            }
            this.value = _json_.value;
        }
        value;
        resolve(_tables) {
            super.resolve(_tables);
        }
    }
    ai.BlackboardKeyData = BlackboardKeyData;
})(ai = exports.ai || (exports.ai = {}));
(function (ai) {
    class UeForceSuccess extends ai.Decorator {
        constructor(_json_) {
            super(_json_);
        }
        resolve(_tables) {
            super.resolve(_tables);
        }
    }
    ai.UeForceSuccess = UeForceSuccess;
})(ai = exports.ai || (exports.ai = {}));
(function (ai) {
    class IsAtLocation extends ai.Decorator {
        constructor(_json_) {
            super(_json_);
            if (_json_.acceptable_radius === undefined) {
                throw new Error();
            }
            this.acceptableRadius = _json_.acceptable_radius;
            if (_json_.keyboard_key === undefined) {
                throw new Error();
            }
            this.keyboardKey = _json_.keyboard_key;
            if (_json_.inverse_condition === undefined) {
                throw new Error();
            }
            this.inverseCondition = _json_.inverse_condition;
        }
        acceptableRadius;
        keyboardKey;
        inverseCondition;
        resolve(_tables) {
            super.resolve(_tables);
        }
    }
    ai.IsAtLocation = IsAtLocation;
})(ai = exports.ai || (exports.ai = {}));
(function (ai) {
    class DistanceLessThan extends ai.Decorator {
        constructor(_json_) {
            super(_json_);
            if (_json_.actor1_key === undefined) {
                throw new Error();
            }
            this.actor1Key = _json_.actor1_key;
            if (_json_.actor2_key === undefined) {
                throw new Error();
            }
            this.actor2Key = _json_.actor2_key;
            if (_json_.distance === undefined) {
                throw new Error();
            }
            this.distance = _json_.distance;
            if (_json_.reverse_result === undefined) {
                throw new Error();
            }
            this.reverseResult = _json_.reverse_result;
        }
        actor1Key;
        actor2Key;
        distance;
        reverseResult;
        resolve(_tables) {
            super.resolve(_tables);
        }
    }
    ai.DistanceLessThan = DistanceLessThan;
})(ai = exports.ai || (exports.ai = {}));
(function (ai) {
    class FlowNode extends ai.Node {
        static constructorFrom(_json_) {
            switch (_json_.__type__) {
                case 'Sequence': return new ai.Sequence(_json_);
                case 'Selector': return new ai.Selector(_json_);
                case 'SimpleParallel': return new ai.SimpleParallel(_json_);
                case 'UeWait': return new ai.UeWait(_json_);
                case 'UeWaitBlackboardTime': return new ai.UeWaitBlackboardTime(_json_);
                case 'MoveToTarget': return new ai.MoveToTarget(_json_);
                case 'ChooseSkill': return new ai.ChooseSkill(_json_);
                case 'MoveToRandomLocation': return new ai.MoveToRandomLocation(_json_);
                case 'MoveToLocation': return new ai.MoveToLocation(_json_);
                case 'DebugPrint': return new ai.DebugPrint(_json_);
                default: throw new Error();
            }
        }
        constructor(_json_) {
            super(_json_);
            if (_json_.decorators === undefined) {
                throw new Error();
            }
            {
                this.decorators = [];
                for (let _ele of _json_.decorators) {
                    let _e;
                    _e = ai.Decorator.constructorFrom(_ele);
                    this.decorators.push(_e);
                }
            }
            if (_json_.services === undefined) {
                throw new Error();
            }
            {
                this.services = [];
                for (let _ele of _json_.services) {
                    let _e;
                    _e = ai.Service.constructorFrom(_ele);
                    this.services.push(_e);
                }
            }
        }
        decorators;
        services;
        resolve(_tables) {
            super.resolve(_tables);
            for (let _e of this.decorators) {
                if (_e != null) {
                    _e.resolve(_tables);
                }
            }
            for (let _e of this.services) {
                if (_e != null) {
                    _e.resolve(_tables);
                }
            }
        }
    }
    ai.FlowNode = FlowNode;
})(ai = exports.ai || (exports.ai = {}));
(function (ai) {
    class ComposeNode extends ai.FlowNode {
        static constructorFrom(_json_) {
            switch (_json_.__type__) {
                case 'Sequence': return new ai.Sequence(_json_);
                case 'Selector': return new ai.Selector(_json_);
                case 'SimpleParallel': return new ai.SimpleParallel(_json_);
                default: throw new Error();
            }
        }
        constructor(_json_) {
            super(_json_);
        }
        resolve(_tables) {
            super.resolve(_tables);
        }
    }
    ai.ComposeNode = ComposeNode;
})(ai = exports.ai || (exports.ai = {}));
(function (ai) {
    class Sequence extends ai.ComposeNode {
        constructor(_json_) {
            super(_json_);
            if (_json_.children === undefined) {
                throw new Error();
            }
            {
                this.children = [];
                for (let _ele of _json_.children) {
                    let _e;
                    _e = ai.FlowNode.constructorFrom(_ele);
                    this.children.push(_e);
                }
            }
        }
        children;
        resolve(_tables) {
            super.resolve(_tables);
            for (let _e of this.children) {
                if (_e != null) {
                    _e.resolve(_tables);
                }
            }
        }
    }
    ai.Sequence = Sequence;
})(ai = exports.ai || (exports.ai = {}));
(function (ai) {
    class Selector extends ai.ComposeNode {
        constructor(_json_) {
            super(_json_);
            if (_json_.children === undefined) {
                throw new Error();
            }
            {
                this.children = [];
                for (let _ele of _json_.children) {
                    let _e;
                    _e = ai.FlowNode.constructorFrom(_ele);
                    this.children.push(_e);
                }
            }
        }
        children;
        resolve(_tables) {
            super.resolve(_tables);
            for (let _e of this.children) {
                if (_e != null) {
                    _e.resolve(_tables);
                }
            }
        }
    }
    ai.Selector = Selector;
})(ai = exports.ai || (exports.ai = {}));
(function (ai) {
    class SimpleParallel extends ai.ComposeNode {
        constructor(_json_) {
            super(_json_);
            if (_json_.finish_mode === undefined) {
                throw new Error();
            }
            this.finishMode = _json_.finish_mode;
            if (_json_.main_task === undefined) {
                throw new Error();
            }
            this.mainTask = ai.Task.constructorFrom(_json_.main_task);
            if (_json_.background_node === undefined) {
                throw new Error();
            }
            this.backgroundNode = ai.FlowNode.constructorFrom(_json_.background_node);
        }
        finishMode;
        mainTask;
        backgroundNode;
        resolve(_tables) {
            super.resolve(_tables);
            if (this.mainTask != null) {
                this.mainTask.resolve(_tables);
            }
            if (this.backgroundNode != null) {
                this.backgroundNode.resolve(_tables);
            }
        }
    }
    ai.SimpleParallel = SimpleParallel;
})(ai = exports.ai || (exports.ai = {}));
(function (ai) {
    class Task extends ai.FlowNode {
        static constructorFrom(_json_) {
            switch (_json_.__type__) {
                case 'UeWait': return new ai.UeWait(_json_);
                case 'UeWaitBlackboardTime': return new ai.UeWaitBlackboardTime(_json_);
                case 'MoveToTarget': return new ai.MoveToTarget(_json_);
                case 'ChooseSkill': return new ai.ChooseSkill(_json_);
                case 'MoveToRandomLocation': return new ai.MoveToRandomLocation(_json_);
                case 'MoveToLocation': return new ai.MoveToLocation(_json_);
                case 'DebugPrint': return new ai.DebugPrint(_json_);
                default: throw new Error();
            }
        }
        constructor(_json_) {
            super(_json_);
            if (_json_.ignore_restart_self === undefined) {
                throw new Error();
            }
            this.ignoreRestartSelf = _json_.ignore_restart_self;
        }
        ignoreRestartSelf;
        resolve(_tables) {
            super.resolve(_tables);
        }
    }
    ai.Task = Task;
})(ai = exports.ai || (exports.ai = {}));
(function (ai) {
    class UeWait extends ai.Task {
        constructor(_json_) {
            super(_json_);
            if (_json_.wait_time === undefined) {
                throw new Error();
            }
            this.waitTime = _json_.wait_time;
            if (_json_.random_deviation === undefined) {
                throw new Error();
            }
            this.randomDeviation = _json_.random_deviation;
        }
        waitTime;
        randomDeviation;
        resolve(_tables) {
            super.resolve(_tables);
        }
    }
    ai.UeWait = UeWait;
})(ai = exports.ai || (exports.ai = {}));
(function (ai) {
    class UeWaitBlackboardTime extends ai.Task {
        constructor(_json_) {
            super(_json_);
            if (_json_.blackboard_key === undefined) {
                throw new Error();
            }
            this.blackboardKey = _json_.blackboard_key;
        }
        blackboardKey;
        resolve(_tables) {
            super.resolve(_tables);
        }
    }
    ai.UeWaitBlackboardTime = UeWaitBlackboardTime;
})(ai = exports.ai || (exports.ai = {}));
(function (ai) {
    class MoveToTarget extends ai.Task {
        constructor(_json_) {
            super(_json_);
            if (_json_.target_actor_key === undefined) {
                throw new Error();
            }
            this.targetActorKey = _json_.target_actor_key;
            if (_json_.acceptable_radius === undefined) {
                throw new Error();
            }
            this.acceptableRadius = _json_.acceptable_radius;
        }
        targetActorKey;
        acceptableRadius;
        resolve(_tables) {
            super.resolve(_tables);
        }
    }
    ai.MoveToTarget = MoveToTarget;
})(ai = exports.ai || (exports.ai = {}));
(function (ai) {
    class ChooseSkill extends ai.Task {
        constructor(_json_) {
            super(_json_);
            if (_json_.target_actor_key === undefined) {
                throw new Error();
            }
            this.targetActorKey = _json_.target_actor_key;
            if (_json_.result_skill_id_key === undefined) {
                throw new Error();
            }
            this.resultSkillIdKey = _json_.result_skill_id_key;
        }
        targetActorKey;
        resultSkillIdKey;
        resolve(_tables) {
            super.resolve(_tables);
        }
    }
    ai.ChooseSkill = ChooseSkill;
})(ai = exports.ai || (exports.ai = {}));
(function (ai) {
    class MoveToRandomLocation extends ai.Task {
        constructor(_json_) {
            super(_json_);
            if (_json_.origin_position_key === undefined) {
                throw new Error();
            }
            this.originPositionKey = _json_.origin_position_key;
            if (_json_.radius === undefined) {
                throw new Error();
            }
            this.radius = _json_.radius;
        }
        originPositionKey;
        radius;
        resolve(_tables) {
            super.resolve(_tables);
        }
    }
    ai.MoveToRandomLocation = MoveToRandomLocation;
})(ai = exports.ai || (exports.ai = {}));
(function (ai) {
    class MoveToLocation extends ai.Task {
        constructor(_json_) {
            super(_json_);
            if (_json_.location === undefined) {
                throw new Error();
            }
            this.location = Vector3.deserializeFromJson(_json_.location);
            if (_json_.acceptable_radius === undefined) {
                throw new Error();
            }
            this.acceptableRadius = _json_.acceptable_radius;
        }
        location;
        acceptableRadius;
        resolve(_tables) {
            super.resolve(_tables);
        }
    }
    ai.MoveToLocation = MoveToLocation;
})(ai = exports.ai || (exports.ai = {}));
(function (ai) {
    class DebugPrint extends ai.Task {
        constructor(_json_) {
            super(_json_);
            if (_json_.text === undefined) {
                throw new Error();
            }
            this.text = _json_.text;
        }
        text;
        resolve(_tables) {
            super.resolve(_tables);
        }
    }
    ai.DebugPrint = DebugPrint;
})(ai = exports.ai || (exports.ai = {}));
var blueprint;
(function (blueprint) {
    class TbClazz {
        _dataMap;
        _dataList;
        constructor(_json_) {
            this._dataMap = new Map();
            this._dataList = [];
            for (var _json2_ of _json_) {
                let _v;
                _v = blueprint.Clazz.constructorFrom(_json2_);
                this._dataList.push(_v);
                this._dataMap.set(_v.name, _v);
            }
        }
        getDataMap() { return this._dataMap; }
        getDataList() { return this._dataList; }
        get(key) { return this._dataMap.get(key); }
        resolve(_tables) {
            for (var v of this._dataList) {
                v.resolve(_tables);
            }
        }
    }
    blueprint.TbClazz = TbClazz;
})(blueprint = exports.blueprint || (exports.blueprint = {}));
(function (blueprint) {
    class Clazz {
        static constructorFrom(_json_) {
            switch (_json_.__type__) {
                case 'Interface': return new blueprint.Interface(_json_);
                case 'NormalClazz': return new blueprint.NormalClazz(_json_);
                case 'EnumClazz': return new blueprint.EnumClazz(_json_);
                default: throw new Error();
            }
        }
        constructor(_json_) {
            if (_json_.name === undefined) {
                throw new Error();
            }
            this.name = _json_.name;
            if (_json_.desc === undefined) {
                throw new Error();
            }
            this.desc = _json_.desc;
            if (_json_.parents === undefined) {
                throw new Error();
            }
            {
                this.parents = [];
                for (let _ele of _json_.parents) {
                    let _e;
                    _e = blueprint.Clazz.constructorFrom(_ele);
                    this.parents.push(_e);
                }
            }
            if (_json_.methods === undefined) {
                throw new Error();
            }
            {
                this.methods = [];
                for (let _ele of _json_.methods) {
                    let _e;
                    _e = blueprint.Method.constructorFrom(_ele);
                    this.methods.push(_e);
                }
            }
        }
        name;
        desc;
        parents;
        methods;
        resolve(_tables) {
            for (let _e of this.parents) {
                if (_e != null) {
                    _e.resolve(_tables);
                }
            }
            for (let _e of this.methods) {
                if (_e != null) {
                    _e.resolve(_tables);
                }
            }
        }
    }
    blueprint.Clazz = Clazz;
})(blueprint = exports.blueprint || (exports.blueprint = {}));
(function (blueprint) {
    class Method {
        static constructorFrom(_json_) {
            switch (_json_.__type__) {
                case 'AbstraceMethod': return new blueprint.AbstraceMethod(_json_);
                case 'ExternalMethod': return new blueprint.ExternalMethod(_json_);
                case 'BlueprintMethod': return new blueprint.BlueprintMethod(_json_);
                default: throw new Error();
            }
        }
        constructor(_json_) {
            if (_json_.name === undefined) {
                throw new Error();
            }
            this.name = _json_.name;
            if (_json_.desc === undefined) {
                throw new Error();
            }
            this.desc = _json_.desc;
            if (_json_.is_static === undefined) {
                throw new Error();
            }
            this.isStatic = _json_.is_static;
            if (_json_.return_type === undefined) {
                throw new Error();
            }
            this.returnType = _json_.return_type;
            if (_json_.parameters === undefined) {
                throw new Error();
            }
            {
                this.parameters = [];
                for (let _ele of _json_.parameters) {
                    let _e;
                    _e = new blueprint.ParamInfo(_ele);
                    this.parameters.push(_e);
                }
            }
        }
        name;
        desc;
        isStatic;
        returnType;
        parameters;
        resolve(_tables) {
            for (let _e of this.parameters) {
                if (_e != null) {
                    _e.resolve(_tables);
                }
            }
        }
    }
    blueprint.Method = Method;
})(blueprint = exports.blueprint || (exports.blueprint = {}));
(function (blueprint) {
    class ParamInfo {
        constructor(_json_) {
            if (_json_.name === undefined) {
                throw new Error();
            }
            this.name = _json_.name;
            if (_json_.type === undefined) {
                throw new Error();
            }
            this.type = _json_.type;
            if (_json_.is_ref === undefined) {
                throw new Error();
            }
            this.isRef = _json_.is_ref;
        }
        name;
        type;
        isRef;
        resolve(_tables) {
        }
    }
    blueprint.ParamInfo = ParamInfo;
})(blueprint = exports.blueprint || (exports.blueprint = {}));
(function (blueprint) {
    class AbstraceMethod extends blueprint.Method {
        constructor(_json_) {
            super(_json_);
        }
        resolve(_tables) {
            super.resolve(_tables);
        }
    }
    blueprint.AbstraceMethod = AbstraceMethod;
})(blueprint = exports.blueprint || (exports.blueprint = {}));
(function (blueprint) {
    class ExternalMethod extends blueprint.Method {
        constructor(_json_) {
            super(_json_);
        }
        resolve(_tables) {
            super.resolve(_tables);
        }
    }
    blueprint.ExternalMethod = ExternalMethod;
})(blueprint = exports.blueprint || (exports.blueprint = {}));
(function (blueprint) {
    class BlueprintMethod extends blueprint.Method {
        constructor(_json_) {
            super(_json_);
        }
        resolve(_tables) {
            super.resolve(_tables);
        }
    }
    blueprint.BlueprintMethod = BlueprintMethod;
})(blueprint = exports.blueprint || (exports.blueprint = {}));
(function (blueprint) {
    class Interface extends blueprint.Clazz {
        constructor(_json_) {
            super(_json_);
        }
        resolve(_tables) {
            super.resolve(_tables);
        }
    }
    blueprint.Interface = Interface;
})(blueprint = exports.blueprint || (exports.blueprint = {}));
(function (blueprint) {
    class NormalClazz extends blueprint.Clazz {
        constructor(_json_) {
            super(_json_);
            if (_json_.is_abstract === undefined) {
                throw new Error();
            }
            this.isAbstract = _json_.is_abstract;
            if (_json_.fields === undefined) {
                throw new Error();
            }
            {
                this.fields = [];
                for (let _ele of _json_.fields) {
                    let _e;
                    _e = new blueprint.Field(_ele);
                    this.fields.push(_e);
                }
            }
        }
        isAbstract;
        fields;
        resolve(_tables) {
            super.resolve(_tables);
            for (let _e of this.fields) {
                if (_e != null) {
                    _e.resolve(_tables);
                }
            }
        }
    }
    blueprint.NormalClazz = NormalClazz;
})(blueprint = exports.blueprint || (exports.blueprint = {}));
(function (blueprint) {
    class Field {
        constructor(_json_) {
            if (_json_.name === undefined) {
                throw new Error();
            }
            this.name = _json_.name;
            if (_json_.type === undefined) {
                throw new Error();
            }
            this.type = _json_.type;
            if (_json_.desc === undefined) {
                throw new Error();
            }
            this.desc = _json_.desc;
        }
        name;
        type;
        desc;
        resolve(_tables) {
        }
    }
    blueprint.Field = Field;
})(blueprint = exports.blueprint || (exports.blueprint = {}));
(function (blueprint) {
    class EnumClazz extends blueprint.Clazz {
        constructor(_json_) {
            super(_json_);
            if (_json_.enums === undefined) {
                throw new Error();
            }
            {
                this.enums = [];
                for (let _ele of _json_.enums) {
                    let _e;
                    _e = new blueprint.EnumField(_ele);
                    this.enums.push(_e);
                }
            }
        }
        enums;
        resolve(_tables) {
            super.resolve(_tables);
            for (let _e of this.enums) {
                if (_e != null) {
                    _e.resolve(_tables);
                }
            }
        }
    }
    blueprint.EnumClazz = EnumClazz;
})(blueprint = exports.blueprint || (exports.blueprint = {}));
(function (blueprint) {
    class EnumField {
        constructor(_json_) {
            if (_json_.name === undefined) {
                throw new Error();
            }
            this.name = _json_.name;
            if (_json_.value === undefined) {
                throw new Error();
            }
            this.value = _json_.value;
        }
        name;
        value;
        resolve(_tables) {
        }
    }
    blueprint.EnumField = EnumField;
})(blueprint = exports.blueprint || (exports.blueprint = {}));
var bonus;
(function (bonus) {
    class TbDrop {
        _dataMap;
        _dataList;
        constructor(_json_) {
            this._dataMap = new Map();
            this._dataList = [];
            for (var _json2_ of _json_) {
                let _v;
                _v = new bonus.DropInfo(_json2_);
                this._dataList.push(_v);
                this._dataMap.set(_v.id, _v);
            }
        }
        getDataMap() { return this._dataMap; }
        getDataList() { return this._dataList; }
        get(key) { return this._dataMap.get(key); }
        resolve(_tables) {
            for (var v of this._dataList) {
                v.resolve(_tables);
            }
        }
    }
    bonus.TbDrop = TbDrop;
})(bonus = exports.bonus || (exports.bonus = {}));
(function (bonus) {
    class DropInfo {
        constructor(_json_) {
            if (_json_.id === undefined) {
                throw new Error();
            }
            this.id = _json_.id;
            if (_json_.desc === undefined) {
                throw new Error();
            }
            this.desc = _json_.desc;
            if (_json_.client_show_items === undefined) {
                throw new Error();
            }
            {
                this.clientShowItems = [];
                for (let _ele of _json_.client_show_items) {
                    let _e;
                    _e = new bonus.ShowItemInfo(_ele);
                    this.clientShowItems.push(_e);
                }
            }
            if (_json_.bonus === undefined) {
                throw new Error();
            }
            this.bonus = bonus.Bonus.constructorFrom(_json_.bonus);
        }
        id;
        desc;
        clientShowItems;
        bonus;
        resolve(_tables) {
            for (let _e of this.clientShowItems) {
                if (_e != null) {
                    _e.resolve(_tables);
                }
            }
            if (this.bonus != null) {
                this.bonus.resolve(_tables);
            }
        }
    }
    bonus.DropInfo = DropInfo;
})(bonus = exports.bonus || (exports.bonus = {}));
(function (bonus) {
    class ShowItemInfo {
        constructor(_json_) {
            if (_json_.item_id === undefined) {
                throw new Error();
            }
            this.itemId = _json_.item_id;
            if (_json_.item_num === undefined) {
                throw new Error();
            }
            this.itemNum = _json_.item_num;
        }
        itemId;
        itemId_Ref = undefined;
        itemNum;
        resolve(_tables) {
            this.itemId_Ref = _tables.get('item.TbItem').get(this.itemId);
        }
    }
    bonus.ShowItemInfo = ShowItemInfo;
})(bonus = exports.bonus || (exports.bonus = {}));
(function (bonus) {
    class Bonus {
        static constructorFrom(_json_) {
            switch (_json_.__type__) {
                case 'OneItem': return new bonus.OneItem(_json_);
                case 'OneItems': return new bonus.OneItems(_json_);
                case 'Item': return new bonus.Item(_json_);
                case 'Items': return new bonus.Items(_json_);
                case 'CoefficientItem': return new bonus.CoefficientItem(_json_);
                case 'WeightItems': return new bonus.WeightItems(_json_);
                case 'ProbabilityItems': return new bonus.ProbabilityItems(_json_);
                case 'MultiBonus': return new bonus.MultiBonus(_json_);
                case 'ProbabilityBonus': return new bonus.ProbabilityBonus(_json_);
                case 'WeightBonus': return new bonus.WeightBonus(_json_);
                case 'DropBonus': return new bonus.DropBonus(_json_);
                default: throw new Error();
            }
        }
        constructor(_json_) {
        }
        resolve(_tables) {
        }
    }
    bonus.Bonus = Bonus;
})(bonus = exports.bonus || (exports.bonus = {}));
(function (bonus) {
    class OneItem extends bonus.Bonus {
        constructor(_json_) {
            super(_json_);
            if (_json_.item_id === undefined) {
                throw new Error();
            }
            this.itemId = _json_.item_id;
        }
        itemId;
        itemId_Ref = undefined;
        resolve(_tables) {
            super.resolve(_tables);
            this.itemId_Ref = _tables.get('item.TbItem').get(this.itemId);
        }
    }
    bonus.OneItem = OneItem;
})(bonus = exports.bonus || (exports.bonus = {}));
(function (bonus) {
    class OneItems extends bonus.Bonus {
        constructor(_json_) {
            super(_json_);
            if (_json_.items === undefined) {
                throw new Error();
            }
            this.items = _json_.items;
        }
        items;
        resolve(_tables) {
            super.resolve(_tables);
        }
    }
    bonus.OneItems = OneItems;
})(bonus = exports.bonus || (exports.bonus = {}));
(function (bonus) {
    class Item extends bonus.Bonus {
        constructor(_json_) {
            super(_json_);
            if (_json_.item_id === undefined) {
                throw new Error();
            }
            this.itemId = _json_.item_id;
            if (_json_.amount === undefined) {
                throw new Error();
            }
            this.amount = _json_.amount;
        }
        itemId;
        itemId_Ref = undefined;
        amount;
        resolve(_tables) {
            super.resolve(_tables);
            this.itemId_Ref = _tables.get('item.TbItem').get(this.itemId);
        }
    }
    bonus.Item = Item;
})(bonus = exports.bonus || (exports.bonus = {}));
(function (bonus) {
    class Items extends bonus.Bonus {
        constructor(_json_) {
            super(_json_);
            if (_json_.item_list === undefined) {
                throw new Error();
            }
            {
                this.itemList = [];
                for (let _ele of _json_.item_list) {
                    let _e;
                    _e = new bonus.Item(_ele);
                    this.itemList.push(_e);
                }
            }
        }
        itemList;
        resolve(_tables) {
            super.resolve(_tables);
            for (let _e of this.itemList) {
                if (_e != null) {
                    _e.resolve(_tables);
                }
            }
        }
    }
    bonus.Items = Items;
})(bonus = exports.bonus || (exports.bonus = {}));
(function (bonus) {
    class CoefficientItem extends bonus.Bonus {
        constructor(_json_) {
            super(_json_);
            if (_json_.bonus_id === undefined) {
                throw new Error();
            }
            this.bonusId = _json_.bonus_id;
            if (_json_.bonus_list === undefined) {
                throw new Error();
            }
            this.bonusList = new bonus.Items(_json_.bonus_list);
        }
        bonusId;
        bonusList;
        resolve(_tables) {
            super.resolve(_tables);
            if (this.bonusList != null) {
                this.bonusList.resolve(_tables);
            }
        }
    }
    bonus.CoefficientItem = CoefficientItem;
})(bonus = exports.bonus || (exports.bonus = {}));
(function (bonus) {
    class WeightItems extends bonus.Bonus {
        constructor(_json_) {
            super(_json_);
            if (_json_.item_list === undefined) {
                throw new Error();
            }
            {
                this.itemList = [];
                for (let _ele of _json_.item_list) {
                    let _e;
                    _e = new bonus.WeightItemInfo(_ele);
                    this.itemList.push(_e);
                }
            }
        }
        itemList;
        resolve(_tables) {
            super.resolve(_tables);
            for (let _e of this.itemList) {
                if (_e != null) {
                    _e.resolve(_tables);
                }
            }
        }
    }
    bonus.WeightItems = WeightItems;
})(bonus = exports.bonus || (exports.bonus = {}));
(function (bonus) {
    class WeightItemInfo {
        constructor(_json_) {
            if (_json_.item_id === undefined) {
                throw new Error();
            }
            this.itemId = _json_.item_id;
            if (_json_.num === undefined) {
                throw new Error();
            }
            this.num = _json_.num;
            if (_json_.weight === undefined) {
                throw new Error();
            }
            this.weight = _json_.weight;
        }
        itemId;
        itemId_Ref = undefined;
        num;
        weight;
        resolve(_tables) {
            this.itemId_Ref = _tables.get('item.TbItem').get(this.itemId);
        }
    }
    bonus.WeightItemInfo = WeightItemInfo;
})(bonus = exports.bonus || (exports.bonus = {}));
(function (bonus) {
    class ProbabilityItems extends bonus.Bonus {
        constructor(_json_) {
            super(_json_);
            if (_json_.item_list === undefined) {
                throw new Error();
            }
            {
                this.itemList = [];
                for (let _ele of _json_.item_list) {
                    let _e;
                    _e = new bonus.ProbabilityItemInfo(_ele);
                    this.itemList.push(_e);
                }
            }
        }
        itemList;
        resolve(_tables) {
            super.resolve(_tables);
            for (let _e of this.itemList) {
                if (_e != null) {
                    _e.resolve(_tables);
                }
            }
        }
    }
    bonus.ProbabilityItems = ProbabilityItems;
})(bonus = exports.bonus || (exports.bonus = {}));
(function (bonus) {
    class ProbabilityItemInfo {
        constructor(_json_) {
            if (_json_.item_id === undefined) {
                throw new Error();
            }
            this.itemId = _json_.item_id;
            if (_json_.num === undefined) {
                throw new Error();
            }
            this.num = _json_.num;
            if (_json_.probability === undefined) {
                throw new Error();
            }
            this.probability = _json_.probability;
        }
        itemId;
        itemId_Ref = undefined;
        num;
        probability;
        resolve(_tables) {
            this.itemId_Ref = _tables.get('item.TbItem').get(this.itemId);
        }
    }
    bonus.ProbabilityItemInfo = ProbabilityItemInfo;
})(bonus = exports.bonus || (exports.bonus = {}));
(function (bonus) {
    class MultiBonus extends bonus.Bonus {
        constructor(_json_) {
            super(_json_);
            if (_json_.bonuses === undefined) {
                throw new Error();
            }
            {
                this.bonuses = [];
                for (let _ele of _json_.bonuses) {
                    let _e;
                    _e = bonus.Bonus.constructorFrom(_ele);
                    this.bonuses.push(_e);
                }
            }
        }
        bonuses;
        resolve(_tables) {
            super.resolve(_tables);
            for (let _e of this.bonuses) {
                if (_e != null) {
                    _e.resolve(_tables);
                }
            }
        }
    }
    bonus.MultiBonus = MultiBonus;
})(bonus = exports.bonus || (exports.bonus = {}));
(function (bonus) {
    class ProbabilityBonus extends bonus.Bonus {
        constructor(_json_) {
            super(_json_);
            if (_json_.bonuses === undefined) {
                throw new Error();
            }
            {
                this.bonuses = [];
                for (let _ele of _json_.bonuses) {
                    let _e;
                    _e = new bonus.ProbabilityBonusInfo(_ele);
                    this.bonuses.push(_e);
                }
            }
        }
        bonuses;
        resolve(_tables) {
            super.resolve(_tables);
            for (let _e of this.bonuses) {
                if (_e != null) {
                    _e.resolve(_tables);
                }
            }
        }
    }
    bonus.ProbabilityBonus = ProbabilityBonus;
})(bonus = exports.bonus || (exports.bonus = {}));
(function (bonus) {
    class ProbabilityBonusInfo {
        constructor(_json_) {
            if (_json_.bonus === undefined) {
                throw new Error();
            }
            this.bonus = bonus.Bonus.constructorFrom(_json_.bonus);
            if (_json_.probability === undefined) {
                throw new Error();
            }
            this.probability = _json_.probability;
        }
        bonus;
        probability;
        resolve(_tables) {
            if (this.bonus != null) {
                this.bonus.resolve(_tables);
            }
        }
    }
    bonus.ProbabilityBonusInfo = ProbabilityBonusInfo;
})(bonus = exports.bonus || (exports.bonus = {}));
(function (bonus) {
    class WeightBonus extends bonus.Bonus {
        constructor(_json_) {
            super(_json_);
            if (_json_.bonuses === undefined) {
                throw new Error();
            }
            {
                this.bonuses = [];
                for (let _ele of _json_.bonuses) {
                    let _e;
                    _e = new bonus.WeightBonusInfo(_ele);
                    this.bonuses.push(_e);
                }
            }
        }
        bonuses;
        resolve(_tables) {
            super.resolve(_tables);
            for (let _e of this.bonuses) {
                if (_e != null) {
                    _e.resolve(_tables);
                }
            }
        }
    }
    bonus.WeightBonus = WeightBonus;
})(bonus = exports.bonus || (exports.bonus = {}));
(function (bonus) {
    class WeightBonusInfo {
        constructor(_json_) {
            if (_json_.bonus === undefined) {
                throw new Error();
            }
            this.bonus = bonus.Bonus.constructorFrom(_json_.bonus);
            if (_json_.weight === undefined) {
                throw new Error();
            }
            this.weight = _json_.weight;
        }
        bonus;
        weight;
        resolve(_tables) {
            if (this.bonus != null) {
                this.bonus.resolve(_tables);
            }
        }
    }
    bonus.WeightBonusInfo = WeightBonusInfo;
})(bonus = exports.bonus || (exports.bonus = {}));
(function (bonus) {
    class DropBonus extends bonus.Bonus {
        constructor(_json_) {
            super(_json_);
            if (_json_.id === undefined) {
                throw new Error();
            }
            this.id = _json_.id;
        }
        id;
        id_Ref = undefined;
        resolve(_tables) {
            super.resolve(_tables);
            this.id_Ref = _tables.get('bonus.TbDrop').get(this.id);
        }
    }
    bonus.DropBonus = DropBonus;
})(bonus = exports.bonus || (exports.bonus = {}));
(function (common) {
    class TbGlobalConfig {
        _data;
        constructor(_json_) {
            if (_json_.length != 1)
                throw new Error('table mode=one, but size != 1');
            this._data = new common.GlobalConfig(_json_[0]);
        }
        getData() { return this._data; }
        /**
         * 背包容量
         */
        get bagCapacity() { return this._data.bagCapacity; }
        get bagCapacitySpecial() { return this._data.bagCapacitySpecial; }
        get bagTempExpendableCapacity() { return this._data.bagTempExpendableCapacity; }
        get bagTempToolCapacity() { return this._data.bagTempToolCapacity; }
        get bagInitCapacity() { return this._data.bagInitCapacity; }
        get quickBagCapacity() { return this._data.quickBagCapacity; }
        get clothBagCapacity() { return this._data.clothBagCapacity; }
        get clothBagInitCapacity() { return this._data.clothBagInitCapacity; }
        get clothBagCapacitySpecial() { return this._data.clothBagCapacitySpecial; }
        get bagInitItemsDropId() { return this._data.bagInitItemsDropId; }
        get mailBoxCapacity() { return this._data.mailBoxCapacity; }
        get damageParamC() { return this._data.damageParamC; }
        get damageParamE() { return this._data.damageParamE; }
        get damageParamF() { return this._data.damageParamF; }
        get damageParamD() { return this._data.damageParamD; }
        get roleSpeed() { return this._data.roleSpeed; }
        get monsterSpeed() { return this._data.monsterSpeed; }
        get initEnergy() { return this._data.initEnergy; }
        get initViality() { return this._data.initViality; }
        get maxViality() { return this._data.maxViality; }
        get perVialityRecoveryTime() { return this._data.perVialityRecoveryTime; }
        resolve(_tables) {
            this._data.resolve(_tables);
        }
    }
    common.TbGlobalConfig = TbGlobalConfig;
})(common = exports.common || (exports.common = {}));
(function (common) {
    class GlobalConfig {
        constructor(_json_) {
            if (_json_.bag_capacity === undefined) {
                throw new Error();
            }
            this.bagCapacity = _json_.bag_capacity;
            if (_json_.bag_capacity_special === undefined) {
                throw new Error();
            }
            this.bagCapacitySpecial = _json_.bag_capacity_special;
            if (_json_.bag_temp_expendable_capacity === undefined) {
                throw new Error();
            }
            this.bagTempExpendableCapacity = _json_.bag_temp_expendable_capacity;
            if (_json_.bag_temp_tool_capacity === undefined) {
                throw new Error();
            }
            this.bagTempToolCapacity = _json_.bag_temp_tool_capacity;
            if (_json_.bag_init_capacity === undefined) {
                throw new Error();
            }
            this.bagInitCapacity = _json_.bag_init_capacity;
            if (_json_.quick_bag_capacity === undefined) {
                throw new Error();
            }
            this.quickBagCapacity = _json_.quick_bag_capacity;
            if (_json_.cloth_bag_capacity === undefined) {
                throw new Error();
            }
            this.clothBagCapacity = _json_.cloth_bag_capacity;
            if (_json_.cloth_bag_init_capacity === undefined) {
                throw new Error();
            }
            this.clothBagInitCapacity = _json_.cloth_bag_init_capacity;
            if (_json_.cloth_bag_capacity_special === undefined) {
                throw new Error();
            }
            this.clothBagCapacitySpecial = _json_.cloth_bag_capacity_special;
            if (_json_.bag_init_items_drop_id != undefined) {
                this.bagInitItemsDropId = _json_.bag_init_items_drop_id;
            }
            else {
                this.bagInitItemsDropId = undefined;
            }
            if (_json_.mail_box_capacity === undefined) {
                throw new Error();
            }
            this.mailBoxCapacity = _json_.mail_box_capacity;
            if (_json_.damage_param_c === undefined) {
                throw new Error();
            }
            this.damageParamC = _json_.damage_param_c;
            if (_json_.damage_param_e === undefined) {
                throw new Error();
            }
            this.damageParamE = _json_.damage_param_e;
            if (_json_.damage_param_f === undefined) {
                throw new Error();
            }
            this.damageParamF = _json_.damage_param_f;
            if (_json_.damage_param_d === undefined) {
                throw new Error();
            }
            this.damageParamD = _json_.damage_param_d;
            if (_json_.role_speed === undefined) {
                throw new Error();
            }
            this.roleSpeed = _json_.role_speed;
            if (_json_.monster_speed === undefined) {
                throw new Error();
            }
            this.monsterSpeed = _json_.monster_speed;
            if (_json_.init_energy === undefined) {
                throw new Error();
            }
            this.initEnergy = _json_.init_energy;
            if (_json_.init_viality === undefined) {
                throw new Error();
            }
            this.initViality = _json_.init_viality;
            if (_json_.max_viality === undefined) {
                throw new Error();
            }
            this.maxViality = _json_.max_viality;
            if (_json_.per_viality_recovery_time === undefined) {
                throw new Error();
            }
            this.perVialityRecoveryTime = _json_.per_viality_recovery_time;
        }
        /**
         * 背包容量
         */
        bagCapacity;
        bagCapacitySpecial;
        bagTempExpendableCapacity;
        bagTempToolCapacity;
        bagInitCapacity;
        quickBagCapacity;
        clothBagCapacity;
        clothBagInitCapacity;
        clothBagCapacitySpecial;
        bagInitItemsDropId;
        bagInitItemsDropId_Ref;
        mailBoxCapacity;
        damageParamC;
        damageParamE;
        damageParamF;
        damageParamD;
        roleSpeed;
        monsterSpeed;
        initEnergy;
        initViality;
        maxViality;
        perVialityRecoveryTime;
        resolve(_tables) {
            this.bagInitItemsDropId_Ref = this.bagInitItemsDropId != undefined ? _tables.get('bonus.TbDrop').get(this.bagInitItemsDropId) : undefined;
        }
    }
    common.GlobalConfig = GlobalConfig;
})(common = exports.common || (exports.common = {}));
(function (error) {
    class TbErrorInfo {
        _dataMap;
        _dataList;
        constructor(_json_) {
            this._dataMap = new Map();
            this._dataList = [];
            for (var _json2_ of _json_) {
                let _v;
                _v = new error.ErrorInfo(_json2_);
                this._dataList.push(_v);
                this._dataMap.set(_v.code, _v);
            }
        }
        getDataMap() { return this._dataMap; }
        getDataList() { return this._dataList; }
        get(key) { return this._dataMap.get(key); }
        resolve(_tables) {
            for (var v of this._dataList) {
                v.resolve(_tables);
            }
        }
    }
    error.TbErrorInfo = TbErrorInfo;
})(error = exports.error || (exports.error = {}));
(function (error) {
    class ErrorInfo {
        constructor(_json_) {
            if (_json_.code === undefined) {
                throw new Error();
            }
            this.code = _json_.code;
            if (_json_.desc === undefined) {
                throw new Error();
            }
            this.desc = _json_.desc;
            if (_json_.style === undefined) {
                throw new Error();
            }
            this.style = error.ErrorStyle.constructorFrom(_json_.style);
        }
        code;
        desc;
        style;
        resolve(_tables) {
            if (this.style != null) {
                this.style.resolve(_tables);
            }
        }
    }
    error.ErrorInfo = ErrorInfo;
})(error = exports.error || (exports.error = {}));
(function (error) {
    class ErrorStyle {
        static constructorFrom(_json_) {
            switch (_json_.__type__) {
                case 'ErrorStyleTip': return new error.ErrorStyleTip(_json_);
                case 'ErrorStyleMsgbox': return new error.ErrorStyleMsgbox(_json_);
                case 'ErrorStyleDlgOk': return new error.ErrorStyleDlgOk(_json_);
                case 'ErrorStyleDlgOkCancel': return new error.ErrorStyleDlgOkCancel(_json_);
                default: throw new Error();
            }
        }
        constructor(_json_) {
        }
        resolve(_tables) {
        }
    }
    error.ErrorStyle = ErrorStyle;
})(error = exports.error || (exports.error = {}));
(function (error) {
    class ErrorStyleTip extends error.ErrorStyle {
        constructor(_json_) {
            super(_json_);
        }
        resolve(_tables) {
            super.resolve(_tables);
        }
    }
    error.ErrorStyleTip = ErrorStyleTip;
})(error = exports.error || (exports.error = {}));
(function (error) {
    class ErrorStyleMsgbox extends error.ErrorStyle {
        constructor(_json_) {
            super(_json_);
            if (_json_.btn_name === undefined) {
                throw new Error();
            }
            this.btnName = _json_.btn_name;
            if (_json_.operation === undefined) {
                throw new Error();
            }
            this.operation = _json_.operation;
        }
        btnName;
        operation;
        resolve(_tables) {
            super.resolve(_tables);
        }
    }
    error.ErrorStyleMsgbox = ErrorStyleMsgbox;
})(error = exports.error || (exports.error = {}));
(function (error) {
    class ErrorStyleDlgOk extends error.ErrorStyle {
        constructor(_json_) {
            super(_json_);
            if (_json_.btn_name === undefined) {
                throw new Error();
            }
            this.btnName = _json_.btn_name;
        }
        btnName;
        resolve(_tables) {
            super.resolve(_tables);
        }
    }
    error.ErrorStyleDlgOk = ErrorStyleDlgOk;
})(error = exports.error || (exports.error = {}));
(function (error) {
    class ErrorStyleDlgOkCancel extends error.ErrorStyle {
        constructor(_json_) {
            super(_json_);
            if (_json_.btn1_name === undefined) {
                throw new Error();
            }
            this.btn1Name = _json_.btn1_name;
            if (_json_.btn2_name === undefined) {
                throw new Error();
            }
            this.btn2Name = _json_.btn2_name;
        }
        btn1Name;
        btn2Name;
        resolve(_tables) {
            super.resolve(_tables);
        }
    }
    error.ErrorStyleDlgOkCancel = ErrorStyleDlgOkCancel;
})(error = exports.error || (exports.error = {}));
(function (error) {
    class TbCodeInfo {
        _dataMap;
        _dataList;
        constructor(_json_) {
            this._dataMap = new Map();
            this._dataList = [];
            for (var _json2_ of _json_) {
                let _v;
                _v = new error.CodeInfo(_json2_);
                this._dataList.push(_v);
                this._dataMap.set(_v.code, _v);
            }
        }
        getDataMap() { return this._dataMap; }
        getDataList() { return this._dataList; }
        get(key) { return this._dataMap.get(key); }
        resolve(_tables) {
            for (var v of this._dataList) {
                v.resolve(_tables);
            }
        }
    }
    error.TbCodeInfo = TbCodeInfo;
})(error = exports.error || (exports.error = {}));
(function (error) {
    class CodeInfo {
        constructor(_json_) {
            if (_json_.code === undefined) {
                throw new Error();
            }
            this.code = _json_.code;
            if (_json_.key === undefined) {
                throw new Error();
            }
            this.key = _json_.key;
        }
        code;
        key;
        resolve(_tables) {
        }
    }
    error.CodeInfo = CodeInfo;
})(error = exports.error || (exports.error = {}));
(function (item) {
    /**
     * 道具表
     */
    class TbItem {
        _dataMap;
        _dataList;
        constructor(_json_) {
            this._dataMap = new Map();
            this._dataList = [];
            for (var _json2_ of _json_) {
                let _v;
                _v = new item.Item(_json2_);
                this._dataList.push(_v);
                this._dataMap.set(_v.id, _v);
            }
        }
        getDataMap() { return this._dataMap; }
        getDataList() { return this._dataList; }
        get(key) { return this._dataMap.get(key); }
        resolve(_tables) {
            for (var v of this._dataList) {
                v.resolve(_tables);
            }
        }
    }
    item.TbItem = TbItem;
})(item = exports.item || (exports.item = {}));
(function (item) {
    /**
     * 道具
     */
    class Item {
        constructor(_json_) {
            if (_json_.id === undefined) {
                throw new Error();
            }
            this.id = _json_.id;
            if (_json_.name === undefined) {
                throw new Error();
            }
            this.name = _json_.name;
            if (_json_.major_type === undefined) {
                throw new Error();
            }
            this.majorType = _json_.major_type;
            if (_json_.minor_type === undefined) {
                throw new Error();
            }
            this.minorType = _json_.minor_type;
            if (_json_.max_pile_num === undefined) {
                throw new Error();
            }
            this.maxPileNum = _json_.max_pile_num;
            if (_json_.quality === undefined) {
                throw new Error();
            }
            this.quality = _json_.quality;
            if (_json_.icon === undefined) {
                throw new Error();
            }
            this.icon = _json_.icon;
            if (_json_.icon_backgroud === undefined) {
                throw new Error();
            }
            this.iconBackgroud = _json_.icon_backgroud;
            if (_json_.icon_mask === undefined) {
                throw new Error();
            }
            this.iconMask = _json_.icon_mask;
            if (_json_.desc === undefined) {
                throw new Error();
            }
            this.desc = _json_.desc;
            if (_json_.show_order === undefined) {
                throw new Error();
            }
            this.showOrder = _json_.show_order;
            if (_json_.quantifier === undefined) {
                throw new Error();
            }
            this.quantifier = _json_.quantifier;
            if (_json_.show_in_bag === undefined) {
                throw new Error();
            }
            this.showInBag = _json_.show_in_bag;
            if (_json_.min_show_level === undefined) {
                throw new Error();
            }
            this.minShowLevel = _json_.min_show_level;
            if (_json_.batch_usable === undefined) {
                throw new Error();
            }
            this.batchUsable = _json_.batch_usable;
            if (_json_.progress_time_when_use === undefined) {
                throw new Error();
            }
            this.progressTimeWhenUse = _json_.progress_time_when_use;
            if (_json_.show_hint_when_use === undefined) {
                throw new Error();
            }
            this.showHintWhenUse = _json_.show_hint_when_use;
            if (_json_.droppable === undefined) {
                throw new Error();
            }
            this.droppable = _json_.droppable;
            if (_json_.price != undefined) {
                this.price = _json_.price;
            }
            else {
                this.price = undefined;
            }
            if (_json_.use_type === undefined) {
                throw new Error();
            }
            this.useType = _json_.use_type;
            if (_json_.level_up_id != undefined) {
                this.levelUpId = _json_.level_up_id;
            }
            else {
                this.levelUpId = undefined;
            }
        }
        /**
         * 道具id
         */
        id;
        name;
        majorType;
        minorType;
        maxPileNum;
        quality;
        icon;
        iconBackgroud;
        iconMask;
        desc;
        showOrder;
        quantifier;
        showInBag;
        minShowLevel;
        batchUsable;
        progressTimeWhenUse;
        showHintWhenUse;
        droppable;
        price;
        useType;
        levelUpId;
        resolve(_tables) {
        }
    }
    item.Item = Item;
})(item = exports.item || (exports.item = {}));
(function (item) {
    class TbItemFunc {
        _dataMap;
        _dataList;
        constructor(_json_) {
            this._dataMap = new Map();
            this._dataList = [];
            for (var _json2_ of _json_) {
                let _v;
                _v = new item.ItemFunction(_json2_);
                this._dataList.push(_v);
                this._dataMap.set(_v.minorType, _v);
            }
        }
        getDataMap() { return this._dataMap; }
        getDataList() { return this._dataList; }
        get(key) { return this._dataMap.get(key); }
        resolve(_tables) {
            for (var v of this._dataList) {
                v.resolve(_tables);
            }
        }
    }
    item.TbItemFunc = TbItemFunc;
})(item = exports.item || (exports.item = {}));
(function (item) {
    class ItemFunction {
        constructor(_json_) {
            if (_json_.minor_type === undefined) {
                throw new Error();
            }
            this.minorType = _json_.minor_type;
            if (_json_.func_type === undefined) {
                throw new Error();
            }
            this.funcType = _json_.func_type;
            if (_json_.method === undefined) {
                throw new Error();
            }
            this.method = _json_.method;
            if (_json_.close_bag_ui === undefined) {
                throw new Error();
            }
            this.closeBagUi = _json_.close_bag_ui;
        }
        minorType;
        funcType;
        method;
        closeBagUi;
        resolve(_tables) {
        }
    }
    item.ItemFunction = ItemFunction;
})(item = exports.item || (exports.item = {}));
(function (item) {
    class TbItemExtra {
        _dataMap;
        _dataList;
        constructor(_json_) {
            this._dataMap = new Map();
            this._dataList = [];
            for (var _json2_ of _json_) {
                let _v;
                _v = item.ItemExtra.constructorFrom(_json2_);
                this._dataList.push(_v);
                this._dataMap.set(_v.id, _v);
            }
        }
        getDataMap() { return this._dataMap; }
        getDataList() { return this._dataList; }
        get(key) { return this._dataMap.get(key); }
        resolve(_tables) {
            for (var v of this._dataList) {
                v.resolve(_tables);
            }
        }
    }
    item.TbItemExtra = TbItemExtra;
})(item = exports.item || (exports.item = {}));
(function (item) {
    class ItemExtra {
        static constructorFrom(_json_) {
            switch (_json_.__type__) {
                case 'TreasureBox': return new item.TreasureBox(_json_);
                case 'InteractionItem': return new item.InteractionItem(_json_);
                case 'Clothes': return new item.Clothes(_json_);
                case 'DesignDrawing': return new item.DesignDrawing(_json_);
                case 'Dymmy': return new item.Dymmy(_json_);
                default: throw new Error();
            }
        }
        constructor(_json_) {
            if (_json_.id === undefined) {
                throw new Error();
            }
            this.id = _json_.id;
        }
        id;
        resolve(_tables) {
        }
    }
    item.ItemExtra = ItemExtra;
})(item = exports.item || (exports.item = {}));
(function (item) {
    class TreasureBox extends item.ItemExtra {
        constructor(_json_) {
            super(_json_);
            if (_json_.key_item_id != undefined) {
                this.keyItemId = _json_.key_item_id;
            }
            else {
                this.keyItemId = undefined;
            }
            if (_json_.open_level === undefined) {
                throw new Error();
            }
            this.openLevel = new condition.MinLevel(_json_.open_level);
            if (_json_.use_on_obtain === undefined) {
                throw new Error();
            }
            this.useOnObtain = _json_.use_on_obtain;
            if (_json_.drop_ids === undefined) {
                throw new Error();
            }
            this.dropIds = _json_.drop_ids;
            if (_json_.choose_list === undefined) {
                throw new Error();
            }
            {
                this.chooseList = [];
                for (let _ele of _json_.choose_list) {
                    let _e;
                    _e = new item.ChooseOneBonus(_ele);
                    this.chooseList.push(_e);
                }
            }
        }
        keyItemId;
        openLevel;
        useOnObtain;
        dropIds;
        chooseList;
        resolve(_tables) {
            super.resolve(_tables);
            if (this.openLevel != null) {
                this.openLevel.resolve(_tables);
            }
            for (let _e of this.chooseList) {
                if (_e != null) {
                    _e.resolve(_tables);
                }
            }
        }
    }
    item.TreasureBox = TreasureBox;
})(item = exports.item || (exports.item = {}));
var condition;
(function (condition) {
    class Condition {
        static constructorFrom(_json_) {
            switch (_json_.__type__) {
                case 'TimeRange': return new condition.TimeRange(_json_);
                case 'MultiRoleCondition': return new condition.MultiRoleCondition(_json_);
                case 'GenderLimit': return new condition.GenderLimit(_json_);
                case 'MinLevel': return new condition.MinLevel(_json_);
                case 'MaxLevel': return new condition.MaxLevel(_json_);
                case 'MinMaxLevel': return new condition.MinMaxLevel(_json_);
                case 'ClothesPropertyScoreGreaterThan': return new condition.ClothesPropertyScoreGreaterThan(_json_);
                case 'ContainsItem': return new condition.ContainsItem(_json_);
                default: throw new Error();
            }
        }
        constructor(_json_) {
        }
        resolve(_tables) {
        }
    }
    condition.Condition = Condition;
})(condition = exports.condition || (exports.condition = {}));
(function (condition) {
    class TimeRange extends condition.Condition {
        constructor(_json_) {
            super(_json_);
            if (_json_.date_time_range === undefined) {
                throw new Error();
            }
            this.dateTimeRange = new common.DateTimeRange(_json_.date_time_range);
        }
        dateTimeRange;
        resolve(_tables) {
            super.resolve(_tables);
            if (this.dateTimeRange != null) {
                this.dateTimeRange.resolve(_tables);
            }
        }
    }
    condition.TimeRange = TimeRange;
})(condition = exports.condition || (exports.condition = {}));
(function (common) {
    class DateTimeRange {
        constructor(_json_) {
            if (_json_.start_time != undefined) {
                this.startTime = _json_.start_time;
            }
            else {
                this.startTime = undefined;
            }
            if (_json_.end_time != undefined) {
                this.endTime = _json_.end_time;
            }
            else {
                this.endTime = undefined;
            }
        }
        startTime;
        endTime;
        resolve(_tables) {
        }
    }
    common.DateTimeRange = DateTimeRange;
})(common = exports.common || (exports.common = {}));
(function (condition) {
    class RoleCondition extends condition.Condition {
        static constructorFrom(_json_) {
            switch (_json_.__type__) {
                case 'MultiRoleCondition': return new condition.MultiRoleCondition(_json_);
                case 'GenderLimit': return new condition.GenderLimit(_json_);
                case 'MinLevel': return new condition.MinLevel(_json_);
                case 'MaxLevel': return new condition.MaxLevel(_json_);
                case 'MinMaxLevel': return new condition.MinMaxLevel(_json_);
                case 'ClothesPropertyScoreGreaterThan': return new condition.ClothesPropertyScoreGreaterThan(_json_);
                case 'ContainsItem': return new condition.ContainsItem(_json_);
                default: throw new Error();
            }
        }
        constructor(_json_) {
            super(_json_);
        }
        resolve(_tables) {
            super.resolve(_tables);
        }
    }
    condition.RoleCondition = RoleCondition;
})(condition = exports.condition || (exports.condition = {}));
(function (condition) {
    class MultiRoleCondition extends condition.RoleCondition {
        constructor(_json_) {
            super(_json_);
            if (_json_.conditions === undefined) {
                throw new Error();
            }
            {
                this.conditions = [];
                for (let _ele of _json_.conditions) {
                    let _e;
                    _e = condition.RoleCondition.constructorFrom(_ele);
                    this.conditions.push(_e);
                }
            }
        }
        conditions;
        resolve(_tables) {
            super.resolve(_tables);
            for (let _e of this.conditions) {
                if (_e != null) {
                    _e.resolve(_tables);
                }
            }
        }
    }
    condition.MultiRoleCondition = MultiRoleCondition;
})(condition = exports.condition || (exports.condition = {}));
(function (condition) {
    class BoolRoleCondition extends condition.RoleCondition {
        static constructorFrom(_json_) {
            switch (_json_.__type__) {
                case 'GenderLimit': return new condition.GenderLimit(_json_);
                case 'MinLevel': return new condition.MinLevel(_json_);
                case 'MaxLevel': return new condition.MaxLevel(_json_);
                case 'MinMaxLevel': return new condition.MinMaxLevel(_json_);
                case 'ClothesPropertyScoreGreaterThan': return new condition.ClothesPropertyScoreGreaterThan(_json_);
                default: throw new Error();
            }
        }
        constructor(_json_) {
            super(_json_);
        }
        resolve(_tables) {
            super.resolve(_tables);
        }
    }
    condition.BoolRoleCondition = BoolRoleCondition;
})(condition = exports.condition || (exports.condition = {}));
(function (condition) {
    class GenderLimit extends condition.BoolRoleCondition {
        constructor(_json_) {
            super(_json_);
            if (_json_.gender === undefined) {
                throw new Error();
            }
            this.gender = _json_.gender;
        }
        gender;
        resolve(_tables) {
            super.resolve(_tables);
        }
    }
    condition.GenderLimit = GenderLimit;
})(condition = exports.condition || (exports.condition = {}));
(function (condition) {
    class MinLevel extends condition.BoolRoleCondition {
        constructor(_json_) {
            super(_json_);
            if (_json_.level === undefined) {
                throw new Error();
            }
            this.level = _json_.level;
        }
        level;
        resolve(_tables) {
            super.resolve(_tables);
        }
    }
    condition.MinLevel = MinLevel;
})(condition = exports.condition || (exports.condition = {}));
(function (condition) {
    class MaxLevel extends condition.BoolRoleCondition {
        constructor(_json_) {
            super(_json_);
            if (_json_.level === undefined) {
                throw new Error();
            }
            this.level = _json_.level;
        }
        level;
        resolve(_tables) {
            super.resolve(_tables);
        }
    }
    condition.MaxLevel = MaxLevel;
})(condition = exports.condition || (exports.condition = {}));
(function (condition) {
    class MinMaxLevel extends condition.BoolRoleCondition {
        constructor(_json_) {
            super(_json_);
            if (_json_.min === undefined) {
                throw new Error();
            }
            this.min = _json_.min;
            if (_json_.max === undefined) {
                throw new Error();
            }
            this.max = _json_.max;
        }
        min;
        max;
        resolve(_tables) {
            super.resolve(_tables);
        }
    }
    condition.MinMaxLevel = MinMaxLevel;
})(condition = exports.condition || (exports.condition = {}));
(function (condition) {
    class ClothesPropertyScoreGreaterThan extends condition.BoolRoleCondition {
        constructor(_json_) {
            super(_json_);
            if (_json_.prop === undefined) {
                throw new Error();
            }
            this.prop = _json_.prop;
            if (_json_.value === undefined) {
                throw new Error();
            }
            this.value = _json_.value;
        }
        prop;
        value;
        resolve(_tables) {
            super.resolve(_tables);
        }
    }
    condition.ClothesPropertyScoreGreaterThan = ClothesPropertyScoreGreaterThan;
})(condition = exports.condition || (exports.condition = {}));
(function (condition) {
    class ContainsItem extends condition.RoleCondition {
        constructor(_json_) {
            super(_json_);
            if (_json_.item_id === undefined) {
                throw new Error();
            }
            this.itemId = _json_.item_id;
            if (_json_.num === undefined) {
                throw new Error();
            }
            this.num = _json_.num;
            if (_json_.reverse === undefined) {
                throw new Error();
            }
            this.reverse = _json_.reverse;
        }
        itemId;
        itemId_Ref = undefined;
        num;
        reverse;
        resolve(_tables) {
            super.resolve(_tables);
            this.itemId_Ref = _tables.get('item.TbItem').get(this.itemId);
        }
    }
    condition.ContainsItem = ContainsItem;
})(condition = exports.condition || (exports.condition = {}));
(function (item) {
    class ChooseOneBonus {
        constructor(_json_) {
            if (_json_.drop_id === undefined) {
                throw new Error();
            }
            this.dropId = _json_.drop_id;
            if (_json_.is_unique === undefined) {
                throw new Error();
            }
            this.isUnique = _json_.is_unique;
        }
        dropId;
        dropId_Ref = undefined;
        isUnique;
        resolve(_tables) {
            this.dropId_Ref = _tables.get('bonus.TbDrop').get(this.dropId);
        }
    }
    item.ChooseOneBonus = ChooseOneBonus;
})(item = exports.item || (exports.item = {}));
(function (item) {
    class InteractionItem extends item.ItemExtra {
        constructor(_json_) {
            super(_json_);
            if (_json_.attack_num != undefined) {
                this.attackNum = _json_.attack_num;
            }
            else {
                this.attackNum = undefined;
            }
            if (_json_.holding_static_mesh === undefined) {
                throw new Error();
            }
            this.holdingStaticMesh = _json_.holding_static_mesh;
            if (_json_.holding_static_mesh_mat === undefined) {
                throw new Error();
            }
            this.holdingStaticMeshMat = _json_.holding_static_mesh_mat;
        }
        attackNum;
        holdingStaticMesh;
        holdingStaticMeshMat;
        resolve(_tables) {
            super.resolve(_tables);
        }
    }
    item.InteractionItem = InteractionItem;
})(item = exports.item || (exports.item = {}));
(function (item) {
    class Clothes extends item.ItemExtra {
        constructor(_json_) {
            super(_json_);
            if (_json_.attack === undefined) {
                throw new Error();
            }
            this.attack = _json_.attack;
            if (_json_.hp === undefined) {
                throw new Error();
            }
            this.hp = _json_.hp;
            if (_json_.energy_limit === undefined) {
                throw new Error();
            }
            this.energyLimit = _json_.energy_limit;
            if (_json_.energy_resume === undefined) {
                throw new Error();
            }
            this.energyResume = _json_.energy_resume;
        }
        attack;
        hp;
        energyLimit;
        energyResume;
        resolve(_tables) {
            super.resolve(_tables);
        }
    }
    item.Clothes = Clothes;
})(item = exports.item || (exports.item = {}));
(function (item) {
    class DesignDrawing extends item.ItemExtra {
        constructor(_json_) {
            super(_json_);
            if (_json_.learn_component_id === undefined) {
                throw new Error();
            }
            this.learnComponentId = _json_.learn_component_id;
        }
        learnComponentId;
        resolve(_tables) {
            super.resolve(_tables);
        }
    }
    item.DesignDrawing = DesignDrawing;
})(item = exports.item || (exports.item = {}));
(function (item) {
    class Dymmy extends item.ItemExtra {
        constructor(_json_) {
            super(_json_);
            if (_json_.cost === undefined) {
                throw new Error();
            }
            this.cost = cost.Cost.constructorFrom(_json_.cost);
        }
        cost;
        resolve(_tables) {
            super.resolve(_tables);
            if (this.cost != null) {
                this.cost.resolve(_tables);
            }
        }
    }
    item.Dymmy = Dymmy;
})(item = exports.item || (exports.item = {}));
var cost;
(function (cost) {
    class Cost {
        static constructorFrom(_json_) {
            switch (_json_.__type__) {
                case 'CostCurrency': return new cost.CostCurrency(_json_);
                case 'CostCurrencies': return new cost.CostCurrencies(_json_);
                case 'CostOneItem': return new cost.CostOneItem(_json_);
                case 'CostItem': return new cost.CostItem(_json_);
                case 'CostItems': return new cost.CostItems(_json_);
                default: throw new Error();
            }
        }
        constructor(_json_) {
        }
        resolve(_tables) {
        }
    }
    cost.Cost = Cost;
})(cost = exports.cost || (exports.cost = {}));
(function (cost) {
    class CostCurrency extends cost.Cost {
        constructor(_json_) {
            super(_json_);
            if (_json_.type === undefined) {
                throw new Error();
            }
            this.type = _json_.type;
            if (_json_.num === undefined) {
                throw new Error();
            }
            this.num = _json_.num;
        }
        type;
        num;
        resolve(_tables) {
            super.resolve(_tables);
        }
    }
    cost.CostCurrency = CostCurrency;
})(cost = exports.cost || (exports.cost = {}));
(function (cost) {
    class CostCurrencies extends cost.Cost {
        constructor(_json_) {
            super(_json_);
            if (_json_.currencies === undefined) {
                throw new Error();
            }
            {
                this.currencies = [];
                for (let _ele of _json_.currencies) {
                    let _e;
                    _e = new cost.CostCurrency(_ele);
                    this.currencies.push(_e);
                }
            }
        }
        currencies;
        resolve(_tables) {
            super.resolve(_tables);
            for (let _e of this.currencies) {
                if (_e != null) {
                    _e.resolve(_tables);
                }
            }
        }
    }
    cost.CostCurrencies = CostCurrencies;
})(cost = exports.cost || (exports.cost = {}));
(function (cost) {
    class CostOneItem extends cost.Cost {
        constructor(_json_) {
            super(_json_);
            if (_json_.item_id === undefined) {
                throw new Error();
            }
            this.itemId = _json_.item_id;
        }
        itemId;
        itemId_Ref = undefined;
        resolve(_tables) {
            super.resolve(_tables);
            this.itemId_Ref = _tables.get('item.TbItem').get(this.itemId);
        }
    }
    cost.CostOneItem = CostOneItem;
})(cost = exports.cost || (exports.cost = {}));
(function (cost) {
    class CostItem extends cost.Cost {
        constructor(_json_) {
            super(_json_);
            if (_json_.item_id === undefined) {
                throw new Error();
            }
            this.itemId = _json_.item_id;
            if (_json_.amount === undefined) {
                throw new Error();
            }
            this.amount = _json_.amount;
        }
        itemId;
        itemId_Ref = undefined;
        amount;
        resolve(_tables) {
            super.resolve(_tables);
            this.itemId_Ref = _tables.get('item.TbItem').get(this.itemId);
        }
    }
    cost.CostItem = CostItem;
})(cost = exports.cost || (exports.cost = {}));
(function (cost) {
    class CostItems extends cost.Cost {
        constructor(_json_) {
            super(_json_);
            if (_json_.item_list === undefined) {
                throw new Error();
            }
            {
                this.itemList = [];
                for (let _ele of _json_.item_list) {
                    let _e;
                    _e = new cost.CostItem(_ele);
                    this.itemList.push(_e);
                }
            }
        }
        itemList;
        resolve(_tables) {
            super.resolve(_tables);
            for (let _e of this.itemList) {
                if (_e != null) {
                    _e.resolve(_tables);
                }
            }
        }
    }
    cost.CostItems = CostItems;
})(cost = exports.cost || (exports.cost = {}));
var l10n;
(function (l10n) {
    class TbL10NDemo {
        _dataMap;
        _dataList;
        constructor(_json_) {
            this._dataMap = new Map();
            this._dataList = [];
            for (var _json2_ of _json_) {
                let _v;
                _v = new l10n.L10NDemo(_json2_);
                this._dataList.push(_v);
                this._dataMap.set(_v.id, _v);
            }
        }
        getDataMap() { return this._dataMap; }
        getDataList() { return this._dataList; }
        get(key) { return this._dataMap.get(key); }
        resolve(_tables) {
            for (var v of this._dataList) {
                v.resolve(_tables);
            }
        }
    }
    l10n.TbL10NDemo = TbL10NDemo;
})(l10n = exports.l10n || (exports.l10n = {}));
(function (l10n) {
    class L10NDemo {
        constructor(_json_) {
            if (_json_.id === undefined) {
                throw new Error();
            }
            this.id = _json_.id;
            if (_json_.text === undefined) {
                throw new Error();
            }
            this.text = _json_.text['text'];
        }
        id;
        text;
        resolve(_tables) {
        }
    }
    l10n.L10NDemo = L10NDemo;
})(l10n = exports.l10n || (exports.l10n = {}));
(function (l10n) {
    class TbPatchDemo {
        _dataMap;
        _dataList;
        constructor(_json_) {
            this._dataMap = new Map();
            this._dataList = [];
            for (var _json2_ of _json_) {
                let _v;
                _v = new l10n.PatchDemo(_json2_);
                this._dataList.push(_v);
                this._dataMap.set(_v.id, _v);
            }
        }
        getDataMap() { return this._dataMap; }
        getDataList() { return this._dataList; }
        get(key) { return this._dataMap.get(key); }
        resolve(_tables) {
            for (var v of this._dataList) {
                v.resolve(_tables);
            }
        }
    }
    l10n.TbPatchDemo = TbPatchDemo;
})(l10n = exports.l10n || (exports.l10n = {}));
(function (l10n) {
    class PatchDemo {
        constructor(_json_) {
            if (_json_.id === undefined) {
                throw new Error();
            }
            this.id = _json_.id;
            if (_json_.value === undefined) {
                throw new Error();
            }
            this.value = _json_.value;
        }
        id;
        value;
        resolve(_tables) {
        }
    }
    l10n.PatchDemo = PatchDemo;
})(l10n = exports.l10n || (exports.l10n = {}));
(function (mail) {
    class TbSystemMail {
        _dataMap;
        _dataList;
        constructor(_json_) {
            this._dataMap = new Map();
            this._dataList = [];
            for (var _json2_ of _json_) {
                let _v;
                _v = new mail.SystemMail(_json2_);
                this._dataList.push(_v);
                this._dataMap.set(_v.id, _v);
            }
        }
        getDataMap() { return this._dataMap; }
        getDataList() { return this._dataList; }
        get(key) { return this._dataMap.get(key); }
        resolve(_tables) {
            for (var v of this._dataList) {
                v.resolve(_tables);
            }
        }
    }
    mail.TbSystemMail = TbSystemMail;
})(mail = exports.mail || (exports.mail = {}));
(function (mail) {
    class SystemMail {
        constructor(_json_) {
            if (_json_.id === undefined) {
                throw new Error();
            }
            this.id = _json_.id;
            if (_json_.title === undefined) {
                throw new Error();
            }
            this.title = _json_.title;
            if (_json_.sender === undefined) {
                throw new Error();
            }
            this.sender = _json_.sender;
            if (_json_.content === undefined) {
                throw new Error();
            }
            this.content = _json_.content;
            if (_json_.award === undefined) {
                throw new Error();
            }
            this.award = _json_.award;
        }
        id;
        title;
        sender;
        content;
        award;
        resolve(_tables) {
        }
    }
    mail.SystemMail = SystemMail;
})(mail = exports.mail || (exports.mail = {}));
(function (mail) {
    class TbGlobalMail {
        _dataMap;
        _dataList;
        constructor(_json_) {
            this._dataMap = new Map();
            this._dataList = [];
            for (var _json2_ of _json_) {
                let _v;
                _v = new mail.GlobalMail(_json2_);
                this._dataList.push(_v);
                this._dataMap.set(_v.id, _v);
            }
        }
        getDataMap() { return this._dataMap; }
        getDataList() { return this._dataList; }
        get(key) { return this._dataMap.get(key); }
        resolve(_tables) {
            for (var v of this._dataList) {
                v.resolve(_tables);
            }
        }
    }
    mail.TbGlobalMail = TbGlobalMail;
})(mail = exports.mail || (exports.mail = {}));
(function (mail) {
    class GlobalMail {
        constructor(_json_) {
            if (_json_.id === undefined) {
                throw new Error();
            }
            this.id = _json_.id;
            if (_json_.title === undefined) {
                throw new Error();
            }
            this.title = _json_.title;
            if (_json_.sender === undefined) {
                throw new Error();
            }
            this.sender = _json_.sender;
            if (_json_.content === undefined) {
                throw new Error();
            }
            this.content = _json_.content;
            if (_json_.award === undefined) {
                throw new Error();
            }
            this.award = _json_.award;
            if (_json_.all_server === undefined) {
                throw new Error();
            }
            this.allServer = _json_.all_server;
            if (_json_.server_list === undefined) {
                throw new Error();
            }
            this.serverList = _json_.server_list;
            if (_json_.platform === undefined) {
                throw new Error();
            }
            this.platform = _json_.platform;
            if (_json_.channel === undefined) {
                throw new Error();
            }
            this.channel = _json_.channel;
            if (_json_.min_max_level === undefined) {
                throw new Error();
            }
            this.minMaxLevel = new condition.MinMaxLevel(_json_.min_max_level);
            if (_json_.register_time === undefined) {
                throw new Error();
            }
            this.registerTime = new condition.TimeRange(_json_.register_time);
            if (_json_.mail_time === undefined) {
                throw new Error();
            }
            this.mailTime = new condition.TimeRange(_json_.mail_time);
        }
        id;
        title;
        sender;
        content;
        award;
        allServer;
        serverList;
        platform;
        channel;
        minMaxLevel;
        registerTime;
        mailTime;
        resolve(_tables) {
            if (this.minMaxLevel != null) {
                this.minMaxLevel.resolve(_tables);
            }
            if (this.registerTime != null) {
                this.registerTime.resolve(_tables);
            }
            if (this.mailTime != null) {
                this.mailTime.resolve(_tables);
            }
        }
    }
    mail.GlobalMail = GlobalMail;
})(mail = exports.mail || (exports.mail = {}));
(function (role) {
    class TbRoleLevelExpAttr {
        _dataMap;
        _dataList;
        constructor(_json_) {
            this._dataMap = new Map();
            this._dataList = [];
            for (var _json2_ of _json_) {
                let _v;
                _v = new role.LevelExpAttr(_json2_);
                this._dataList.push(_v);
                this._dataMap.set(_v.level, _v);
            }
        }
        getDataMap() { return this._dataMap; }
        getDataList() { return this._dataList; }
        get(key) { return this._dataMap.get(key); }
        resolve(_tables) {
            for (var v of this._dataList) {
                v.resolve(_tables);
            }
        }
    }
    role.TbRoleLevelExpAttr = TbRoleLevelExpAttr;
})(role = exports.role || (exports.role = {}));
(function (role) {
    class LevelExpAttr {
        constructor(_json_) {
            if (_json_.level === undefined) {
                throw new Error();
            }
            this.level = _json_.level;
            if (_json_.need_exp === undefined) {
                throw new Error();
            }
            this.needExp = _json_.need_exp;
            if (_json_.clothes_attrs === undefined) {
                throw new Error();
            }
            this.clothesAttrs = _json_.clothes_attrs;
        }
        level;
        needExp;
        clothesAttrs;
        resolve(_tables) {
        }
    }
    role.LevelExpAttr = LevelExpAttr;
})(role = exports.role || (exports.role = {}));
(function (role) {
    class TbRoleLevelBonusCoefficient {
        _dataMap;
        _dataList;
        constructor(_json_) {
            this._dataMap = new Map();
            this._dataList = [];
            for (var _json2_ of _json_) {
                let _v;
                _v = new role.LevelBonus(_json2_);
                this._dataList.push(_v);
                this._dataMap.set(_v.id, _v);
            }
        }
        getDataMap() { return this._dataMap; }
        getDataList() { return this._dataList; }
        get(key) { return this._dataMap.get(key); }
        resolve(_tables) {
            for (var v of this._dataList) {
                v.resolve(_tables);
            }
        }
    }
    role.TbRoleLevelBonusCoefficient = TbRoleLevelBonusCoefficient;
})(role = exports.role || (exports.role = {}));
(function (role) {
    class LevelBonus {
        constructor(_json_) {
            if (_json_.id === undefined) {
                throw new Error();
            }
            this.id = _json_.id;
            if (_json_.distinct_bonus_infos === undefined) {
                throw new Error();
            }
            {
                this.distinctBonusInfos = [];
                for (let _ele of _json_.distinct_bonus_infos) {
                    let _e;
                    _e = new role.DistinctBonusInfos(_ele);
                    this.distinctBonusInfos.push(_e);
                }
            }
        }
        id;
        distinctBonusInfos;
        resolve(_tables) {
            for (let _e of this.distinctBonusInfos) {
                if (_e != null) {
                    _e.resolve(_tables);
                }
            }
        }
    }
    role.LevelBonus = LevelBonus;
})(role = exports.role || (exports.role = {}));
(function (role) {
    class DistinctBonusInfos {
        constructor(_json_) {
            if (_json_.effective_level === undefined) {
                throw new Error();
            }
            this.effectiveLevel = _json_.effective_level;
            if (_json_.bonus_info === undefined) {
                throw new Error();
            }
            {
                this.bonusInfo = [];
                for (let _ele of _json_.bonus_info) {
                    let _e;
                    _e = new role.BonusInfo(_ele);
                    this.bonusInfo.push(_e);
                }
            }
        }
        effectiveLevel;
        bonusInfo;
        resolve(_tables) {
            for (let _e of this.bonusInfo) {
                if (_e != null) {
                    _e.resolve(_tables);
                }
            }
        }
    }
    role.DistinctBonusInfos = DistinctBonusInfos;
})(role = exports.role || (exports.role = {}));
(function (role) {
    class BonusInfo {
        constructor(_json_) {
            if (_json_.type === undefined) {
                throw new Error();
            }
            this.type = _json_.type;
            if (_json_.coefficient === undefined) {
                throw new Error();
            }
            this.coefficient = _json_.coefficient;
        }
        type;
        coefficient;
        resolve(_tables) {
        }
    }
    role.BonusInfo = BonusInfo;
})(role = exports.role || (exports.role = {}));
var tag;
(function (tag) {
    class TbTestTag {
        _dataMap;
        _dataList;
        constructor(_json_) {
            this._dataMap = new Map();
            this._dataList = [];
            for (var _json2_ of _json_) {
                let _v;
                _v = new tag.TestTag(_json2_);
                this._dataList.push(_v);
                this._dataMap.set(_v.id, _v);
            }
        }
        getDataMap() { return this._dataMap; }
        getDataList() { return this._dataList; }
        get(key) { return this._dataMap.get(key); }
        resolve(_tables) {
            for (var v of this._dataList) {
                v.resolve(_tables);
            }
        }
    }
    tag.TbTestTag = TbTestTag;
})(tag = exports.tag || (exports.tag = {}));
(function (tag) {
    class TestTag {
        constructor(_json_) {
            if (_json_.id === undefined) {
                throw new Error();
            }
            this.id = _json_.id;
            if (_json_.value === undefined) {
                throw new Error();
            }
            this.value = _json_.value;
        }
        id;
        value;
        resolve(_tables) {
        }
    }
    tag.TestTag = TestTag;
})(tag = exports.tag || (exports.tag = {}));
(function (test) {
    class TbFullTypes {
        _dataMap;
        _dataList;
        constructor(_json_) {
            this._dataMap = new Map();
            this._dataList = [];
            for (var _json2_ of _json_) {
                let _v;
                _v = new test.DemoType2(_json2_);
                this._dataList.push(_v);
                this._dataMap.set(_v.x4, _v);
            }
        }
        getDataMap() { return this._dataMap; }
        getDataList() { return this._dataList; }
        get(key) { return this._dataMap.get(key); }
        resolve(_tables) {
            for (var v of this._dataList) {
                v.resolve(_tables);
            }
        }
    }
    test.TbFullTypes = TbFullTypes;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class DemoType2 {
        constructor(_json_) {
            if (_json_.x4 === undefined) {
                throw new Error();
            }
            this.x4 = _json_.x4;
            if (_json_.x1 === undefined) {
                throw new Error();
            }
            this.x1 = _json_.x1;
            if (_json_.x2 === undefined) {
                throw new Error();
            }
            this.x2 = _json_.x2;
            if (_json_.x3 === undefined) {
                throw new Error();
            }
            this.x3 = _json_.x3;
            if (_json_.x5 === undefined) {
                throw new Error();
            }
            this.x5 = _json_.x5;
            if (_json_.x6 === undefined) {
                throw new Error();
            }
            this.x6 = _json_.x6;
            if (_json_.x7 === undefined) {
                throw new Error();
            }
            this.x7 = _json_.x7;
            if (_json_.x8_0 === undefined) {
                throw new Error();
            }
            this.x80 = _json_.x8_0;
            if (_json_.x8 === undefined) {
                throw new Error();
            }
            this.x8 = _json_.x8;
            if (_json_.x9 === undefined) {
                throw new Error();
            }
            this.x9 = _json_.x9;
            if (_json_.x10 === undefined) {
                throw new Error();
            }
            this.x10 = _json_.x10;
            if (_json_.x12 === undefined) {
                throw new Error();
            }
            this.x12 = new test.DemoType1(_json_.x12);
            if (_json_.x13 === undefined) {
                throw new Error();
            }
            this.x13 = _json_.x13;
            if (_json_.x14 === undefined) {
                throw new Error();
            }
            this.x14 = test.DemoDynamic.constructorFrom(_json_.x14);
            if (_json_.s1 === undefined) {
                throw new Error();
            }
            this.s1 = _json_.s1['text'];
            if (_json_.v2 === undefined) {
                throw new Error();
            }
            this.v2 = Vector2.deserializeFromJson(_json_.v2);
            if (_json_.v3 === undefined) {
                throw new Error();
            }
            this.v3 = Vector3.deserializeFromJson(_json_.v3);
            if (_json_.v4 === undefined) {
                throw new Error();
            }
            this.v4 = Vector4.deserializeFromJson(_json_.v4);
            if (_json_.t1 === undefined) {
                throw new Error();
            }
            this.t1 = _json_.t1;
            if (_json_.k1 === undefined) {
                throw new Error();
            }
            this.k1 = _json_.k1;
            if (_json_.k2 === undefined) {
                throw new Error();
            }
            this.k2 = _json_.k2;
            if (_json_.k5 === undefined) {
                throw new Error();
            }
            this.k5 = _json_.k5;
            if (_json_.k8 === undefined) {
                throw new Error();
            }
            this.k8 = new Map();
            for (var _entry_ of _json_.k8) {
                let _k;
                _k = _entry_[0];
                let _v;
                _v = _entry_[1];
                this.k8.set(_k, _v);
            }
            if (_json_.k9 === undefined) {
                throw new Error();
            }
            {
                this.k9 = [];
                for (let _ele of _json_.k9) {
                    let _e;
                    _e = new test.DemoE2(_ele);
                    this.k9.push(_e);
                }
            }
            if (_json_.k15 === undefined) {
                throw new Error();
            }
            {
                this.k15 = [];
                for (let _ele of _json_.k15) {
                    let _e;
                    _e = test.DemoDynamic.constructorFrom(_ele);
                    this.k15.push(_e);
                }
            }
        }
        x4;
        x1;
        x2;
        x3;
        x5;
        x6;
        x7;
        x80;
        x8;
        x9;
        x10;
        x12;
        x13;
        x14;
        s1;
        v2;
        v3;
        v4;
        t1;
        k1;
        k2;
        k5;
        k8;
        k9;
        k15;
        resolve(_tables) {
            if (this.x12 != null) {
                this.x12.resolve(_tables);
            }
            if (this.x14 != null) {
                this.x14.resolve(_tables);
            }
            for (let _e of this.k9) {
                if (_e != null) {
                    _e.resolve(_tables);
                }
            }
            for (let _e of this.k15) {
                if (_e != null) {
                    _e.resolve(_tables);
                }
            }
        }
    }
    test.DemoType2 = DemoType2;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class DemoType1 {
        constructor(_json_) {
            if (_json_.x1 === undefined) {
                throw new Error();
            }
            this.x1 = _json_.x1;
        }
        x1;
        resolve(_tables) {
        }
    }
    test.DemoType1 = DemoType1;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class DemoDynamic {
        static constructorFrom(_json_) {
            switch (_json_.__type__) {
                case 'DemoD2': return new test.DemoD2(_json_);
                case 'DemoE1': return new test.DemoE1(_json_);
                case 'DemoD5': return new test.DemoD5(_json_);
                default: throw new Error();
            }
        }
        constructor(_json_) {
            if (_json_.x1 === undefined) {
                throw new Error();
            }
            this.x1 = _json_.x1;
        }
        x1;
        resolve(_tables) {
        }
    }
    test.DemoDynamic = DemoDynamic;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class DemoD2 extends test.DemoDynamic {
        constructor(_json_) {
            super(_json_);
            if (_json_.x2 === undefined) {
                throw new Error();
            }
            this.x2 = _json_.x2;
        }
        x2;
        resolve(_tables) {
            super.resolve(_tables);
        }
    }
    test.DemoD2 = DemoD2;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class DemoD3 extends test.DemoDynamic {
        static constructorFrom(_json_) {
            switch (_json_.__type__) {
                case 'DemoE1': return new test.DemoE1(_json_);
                default: throw new Error();
            }
        }
        constructor(_json_) {
            super(_json_);
            if (_json_.x3 === undefined) {
                throw new Error();
            }
            this.x3 = _json_.x3;
        }
        x3;
        resolve(_tables) {
            super.resolve(_tables);
        }
    }
    test.DemoD3 = DemoD3;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class DemoE1 extends test.DemoD3 {
        constructor(_json_) {
            super(_json_);
            if (_json_.x4 === undefined) {
                throw new Error();
            }
            this.x4 = _json_.x4;
        }
        x4;
        resolve(_tables) {
            super.resolve(_tables);
        }
    }
    test.DemoE1 = DemoE1;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class DemoD5 extends test.DemoDynamic {
        constructor(_json_) {
            super(_json_);
            if (_json_.time === undefined) {
                throw new Error();
            }
            this.time = new test.DateTimeRange(_json_.time);
        }
        time;
        resolve(_tables) {
            super.resolve(_tables);
            if (this.time != null) {
                this.time.resolve(_tables);
            }
        }
    }
    test.DemoD5 = DemoD5;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class DateTimeRange {
        constructor(_json_) {
            if (_json_.start_time === undefined) {
                throw new Error();
            }
            this.startTime = _json_.start_time;
            if (_json_.end_time === undefined) {
                throw new Error();
            }
            this.endTime = _json_.end_time;
        }
        startTime;
        endTime;
        resolve(_tables) {
        }
    }
    test.DateTimeRange = DateTimeRange;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class DemoE2 {
        constructor(_json_) {
            if (_json_.y1 != undefined) {
                this.y1 = _json_.y1;
            }
            else {
                this.y1 = undefined;
            }
            if (_json_.y2 === undefined) {
                throw new Error();
            }
            this.y2 = _json_.y2;
        }
        y1;
        y2;
        resolve(_tables) {
        }
    }
    test.DemoE2 = DemoE2;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class TbSingleton {
        _data;
        constructor(_json_) {
            if (_json_.length != 1)
                throw new Error('table mode=one, but size != 1');
            this._data = new test.DemoSingletonType(_json_[0]);
        }
        getData() { return this._data; }
        get id() { return this._data.id; }
        get name() { return this._data.name; }
        get date() { return this._data.date; }
        resolve(_tables) {
            this._data.resolve(_tables);
        }
    }
    test.TbSingleton = TbSingleton;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class DemoSingletonType {
        constructor(_json_) {
            if (_json_.id === undefined) {
                throw new Error();
            }
            this.id = _json_.id;
            if (_json_.name === undefined) {
                throw new Error();
            }
            this.name = _json_.name['text'];
            if (_json_.date === undefined) {
                throw new Error();
            }
            this.date = test.DemoDynamic.constructorFrom(_json_.date);
        }
        id;
        name;
        date;
        resolve(_tables) {
            if (this.date != null) {
                this.date.resolve(_tables);
            }
        }
    }
    test.DemoSingletonType = DemoSingletonType;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class TbNotIndexList {
        _dataList;
        constructor(_json_) {
            this._dataList = [];
            for (var _json2_ of _json_) {
                let _v;
                _v = new test.NotIndexList(_json2_);
                this._dataList.push(_v);
            }
        }
        getDataList() { return this._dataList; }
        get(index) { return this._dataList[index]; }
        resolve(_tables) {
            for (var v of this._dataList) {
                v.resolve(_tables);
            }
        }
    }
    test.TbNotIndexList = TbNotIndexList;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class NotIndexList {
        constructor(_json_) {
            if (_json_.x === undefined) {
                throw new Error();
            }
            this.x = _json_.x;
            if (_json_.y === undefined) {
                throw new Error();
            }
            this.y = _json_.y;
        }
        x;
        y;
        resolve(_tables) {
        }
    }
    test.NotIndexList = NotIndexList;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class TbMultiUnionIndexList {
        _dataList;
        constructor(_json_) {
            this._dataList = [];
            for (var _json2_ of _json_) {
                let _v;
                _v = new test.MultiUnionIndexList(_json2_);
                this._dataList.push(_v);
            }
        }
        getDataList() { return this._dataList; }
        get(index) { return this._dataList[index]; }
        resolve(_tables) {
            for (var v of this._dataList) {
                v.resolve(_tables);
            }
        }
    }
    test.TbMultiUnionIndexList = TbMultiUnionIndexList;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class MultiUnionIndexList {
        constructor(_json_) {
            if (_json_.id1 === undefined) {
                throw new Error();
            }
            this.id1 = _json_.id1;
            if (_json_.id2 === undefined) {
                throw new Error();
            }
            this.id2 = _json_.id2;
            if (_json_.id3 === undefined) {
                throw new Error();
            }
            this.id3 = _json_.id3;
            if (_json_.num === undefined) {
                throw new Error();
            }
            this.num = _json_.num;
            if (_json_.desc === undefined) {
                throw new Error();
            }
            this.desc = _json_.desc;
        }
        id1;
        id2;
        id3;
        num;
        desc;
        resolve(_tables) {
        }
    }
    test.MultiUnionIndexList = MultiUnionIndexList;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class TbMultiIndexList {
        _dataList;
        constructor(_json_) {
            this._dataList = [];
            for (var _json2_ of _json_) {
                let _v;
                _v = new test.MultiIndexList(_json2_);
                this._dataList.push(_v);
            }
        }
        getDataList() { return this._dataList; }
        get(index) { return this._dataList[index]; }
        resolve(_tables) {
            for (var v of this._dataList) {
                v.resolve(_tables);
            }
        }
    }
    test.TbMultiIndexList = TbMultiIndexList;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class MultiIndexList {
        constructor(_json_) {
            if (_json_.id1 === undefined) {
                throw new Error();
            }
            this.id1 = _json_.id1;
            if (_json_.id2 === undefined) {
                throw new Error();
            }
            this.id2 = _json_.id2;
            if (_json_.id3 === undefined) {
                throw new Error();
            }
            this.id3 = _json_.id3;
            if (_json_.num === undefined) {
                throw new Error();
            }
            this.num = _json_.num;
            if (_json_.desc === undefined) {
                throw new Error();
            }
            this.desc = _json_.desc;
        }
        id1;
        id2;
        id3;
        num;
        desc;
        resolve(_tables) {
        }
    }
    test.MultiIndexList = MultiIndexList;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class TbDataFromMisc {
        _dataMap;
        _dataList;
        constructor(_json_) {
            this._dataMap = new Map();
            this._dataList = [];
            for (var _json2_ of _json_) {
                let _v;
                _v = new test.DemoType2(_json2_);
                this._dataList.push(_v);
                this._dataMap.set(_v.x4, _v);
            }
        }
        getDataMap() { return this._dataMap; }
        getDataList() { return this._dataList; }
        get(key) { return this._dataMap.get(key); }
        resolve(_tables) {
            for (var v of this._dataList) {
                v.resolve(_tables);
            }
        }
    }
    test.TbDataFromMisc = TbDataFromMisc;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class TbMultiRowRecord {
        _dataMap;
        _dataList;
        constructor(_json_) {
            this._dataMap = new Map();
            this._dataList = [];
            for (var _json2_ of _json_) {
                let _v;
                _v = new test.MultiRowRecord(_json2_);
                this._dataList.push(_v);
                this._dataMap.set(_v.id, _v);
            }
        }
        getDataMap() { return this._dataMap; }
        getDataList() { return this._dataList; }
        get(key) { return this._dataMap.get(key); }
        resolve(_tables) {
            for (var v of this._dataList) {
                v.resolve(_tables);
            }
        }
    }
    test.TbMultiRowRecord = TbMultiRowRecord;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class MultiRowRecord {
        constructor(_json_) {
            if (_json_.id === undefined) {
                throw new Error();
            }
            this.id = _json_.id;
            if (_json_.name === undefined) {
                throw new Error();
            }
            this.name = _json_.name;
            if (_json_.one_rows === undefined) {
                throw new Error();
            }
            {
                this.oneRows = [];
                for (let _ele of _json_.one_rows) {
                    let _e;
                    _e = new test.MultiRowType1(_ele);
                    this.oneRows.push(_e);
                }
            }
            if (_json_.multi_rows1 === undefined) {
                throw new Error();
            }
            {
                this.multiRows1 = [];
                for (let _ele of _json_.multi_rows1) {
                    let _e;
                    _e = new test.MultiRowType1(_ele);
                    this.multiRows1.push(_e);
                }
            }
            if (_json_.multi_rows2 === undefined) {
                throw new Error();
            }
            {
                this.multiRows2 = [];
                for (let _ele of _json_.multi_rows2) {
                    let _e;
                    _e = new test.MultiRowType1(_ele);
                    this.multiRows2.push(_e);
                }
            }
            if (_json_.multi_rows4 === undefined) {
                throw new Error();
            }
            this.multiRows4 = new Map();
            for (var _entry_ of _json_.multi_rows4) {
                let _k;
                _k = _entry_[0];
                let _v;
                _v = new test.MultiRowType2(_entry_[1]);
                this.multiRows4.set(_k, _v);
            }
            if (_json_.multi_rows5 === undefined) {
                throw new Error();
            }
            {
                this.multiRows5 = [];
                for (let _ele of _json_.multi_rows5) {
                    let _e;
                    _e = new test.MultiRowType3(_ele);
                    this.multiRows5.push(_e);
                }
            }
            if (_json_.multi_rows6 === undefined) {
                throw new Error();
            }
            this.multiRows6 = new Map();
            for (var _entry_ of _json_.multi_rows6) {
                let _k;
                _k = _entry_[0];
                let _v;
                _v = new test.MultiRowType2(_entry_[1]);
                this.multiRows6.set(_k, _v);
            }
            if (_json_.multi_rows7 === undefined) {
                throw new Error();
            }
            this.multiRows7 = new Map();
            for (var _entry_ of _json_.multi_rows7) {
                let _k;
                _k = _entry_[0];
                let _v;
                _v = _entry_[1];
                this.multiRows7.set(_k, _v);
            }
        }
        id;
        name;
        oneRows;
        multiRows1;
        multiRows2;
        multiRows4;
        multiRows5;
        multiRows6;
        multiRows7;
        resolve(_tables) {
            for (let _e of this.oneRows) {
                if (_e != null) {
                    _e.resolve(_tables);
                }
            }
            for (let _e of this.multiRows1) {
                if (_e != null) {
                    _e.resolve(_tables);
                }
            }
            for (let _e of this.multiRows2) {
                if (_e != null) {
                    _e.resolve(_tables);
                }
            }
            for (let _e of this.multiRows4.values()) {
                if (_e != null) {
                    _e.resolve(_tables);
                }
            }
            for (let _e of this.multiRows5) {
                if (_e != null) {
                    _e.resolve(_tables);
                }
            }
            for (let _e of this.multiRows6.values()) {
                if (_e != null) {
                    _e.resolve(_tables);
                }
            }
        }
    }
    test.MultiRowRecord = MultiRowRecord;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class MultiRowType1 {
        constructor(_json_) {
            if (_json_.id === undefined) {
                throw new Error();
            }
            this.id = _json_.id;
            if (_json_.x === undefined) {
                throw new Error();
            }
            this.x = _json_.x;
        }
        id;
        x;
        resolve(_tables) {
        }
    }
    test.MultiRowType1 = MultiRowType1;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class MultiRowType2 {
        constructor(_json_) {
            if (_json_.id === undefined) {
                throw new Error();
            }
            this.id = _json_.id;
            if (_json_.x === undefined) {
                throw new Error();
            }
            this.x = _json_.x;
            if (_json_.y === undefined) {
                throw new Error();
            }
            this.y = _json_.y;
        }
        id;
        x;
        y;
        resolve(_tables) {
        }
    }
    test.MultiRowType2 = MultiRowType2;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class MultiRowType3 {
        constructor(_json_) {
            if (_json_.id === undefined) {
                throw new Error();
            }
            this.id = _json_.id;
            if (_json_.items === undefined) {
                throw new Error();
            }
            {
                this.items = [];
                for (let _ele of _json_.items) {
                    let _e;
                    _e = new test.MultiRowType1(_ele);
                    this.items.push(_e);
                }
            }
        }
        id;
        items;
        resolve(_tables) {
            for (let _e of this.items) {
                if (_e != null) {
                    _e.resolve(_tables);
                }
            }
        }
    }
    test.MultiRowType3 = MultiRowType3;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class TbMultiRowTitle {
        _dataMap;
        _dataList;
        constructor(_json_) {
            this._dataMap = new Map();
            this._dataList = [];
            for (var _json2_ of _json_) {
                let _v;
                _v = new test.MultiRowTitle(_json2_);
                this._dataList.push(_v);
                this._dataMap.set(_v.id, _v);
            }
        }
        getDataMap() { return this._dataMap; }
        getDataList() { return this._dataList; }
        get(key) { return this._dataMap.get(key); }
        resolve(_tables) {
            for (var v of this._dataList) {
                v.resolve(_tables);
            }
        }
    }
    test.TbMultiRowTitle = TbMultiRowTitle;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class MultiRowTitle {
        constructor(_json_) {
            if (_json_.id === undefined) {
                throw new Error();
            }
            this.id = _json_.id;
            if (_json_.name === undefined) {
                throw new Error();
            }
            this.name = _json_.name;
            if (_json_.x1 === undefined) {
                throw new Error();
            }
            this.x1 = new test.H1(_json_.x1);
            if (_json_.x2 === undefined) {
                throw new Error();
            }
            {
                this.x2 = [];
                for (let _ele of _json_.x2) {
                    let _e;
                    _e = new test.H2(_ele);
                    this.x2.push(_e);
                }
            }
            if (_json_.x3 === undefined) {
                throw new Error();
            }
            {
                this.x3 = [];
                for (let _ele of _json_.x3) {
                    let _e;
                    _e = new test.H2(_ele);
                    this.x3.push(_e);
                }
            }
            if (_json_.x4 === undefined) {
                throw new Error();
            }
            {
                this.x4 = [];
                for (let _ele of _json_.x4) {
                    let _e;
                    _e = new test.H2(_ele);
                    this.x4.push(_e);
                }
            }
        }
        id;
        name;
        x1;
        x2;
        x3;
        x4;
        resolve(_tables) {
            if (this.x1 != null) {
                this.x1.resolve(_tables);
            }
            for (let _e of this.x2) {
                if (_e != null) {
                    _e.resolve(_tables);
                }
            }
            for (let _e of this.x3) {
                if (_e != null) {
                    _e.resolve(_tables);
                }
            }
            for (let _e of this.x4) {
                if (_e != null) {
                    _e.resolve(_tables);
                }
            }
        }
    }
    test.MultiRowTitle = MultiRowTitle;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class H1 {
        constructor(_json_) {
            if (_json_.y2 === undefined) {
                throw new Error();
            }
            this.y2 = new test.H2(_json_.y2);
            if (_json_.y3 === undefined) {
                throw new Error();
            }
            this.y3 = _json_.y3;
        }
        y2;
        y3;
        resolve(_tables) {
            if (this.y2 != null) {
                this.y2.resolve(_tables);
            }
        }
    }
    test.H1 = H1;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class H2 {
        constructor(_json_) {
            if (_json_.z2 === undefined) {
                throw new Error();
            }
            this.z2 = _json_.z2;
            if (_json_.z3 === undefined) {
                throw new Error();
            }
            this.z3 = _json_.z3;
        }
        z2;
        z3;
        resolve(_tables) {
        }
    }
    test.H2 = H2;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class TbTestNull {
        _dataMap;
        _dataList;
        constructor(_json_) {
            this._dataMap = new Map();
            this._dataList = [];
            for (var _json2_ of _json_) {
                let _v;
                _v = new test.TestNull(_json2_);
                this._dataList.push(_v);
                this._dataMap.set(_v.id, _v);
            }
        }
        getDataMap() { return this._dataMap; }
        getDataList() { return this._dataList; }
        get(key) { return this._dataMap.get(key); }
        resolve(_tables) {
            for (var v of this._dataList) {
                v.resolve(_tables);
            }
        }
    }
    test.TbTestNull = TbTestNull;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class TestNull {
        constructor(_json_) {
            if (_json_.id === undefined) {
                throw new Error();
            }
            this.id = _json_.id;
            if (_json_.x1 != undefined) {
                this.x1 = _json_.x1;
            }
            else {
                this.x1 = undefined;
            }
            if (_json_.x2 != undefined) {
                this.x2 = _json_.x2;
            }
            else {
                this.x2 = undefined;
            }
            if (_json_.x3 != undefined) {
                this.x3 = new test.DemoType1(_json_.x3);
            }
            else {
                this.x3 = undefined;
            }
            if (_json_.x4 != undefined) {
                this.x4 = test.DemoDynamic.constructorFrom(_json_.x4);
            }
            else {
                this.x4 = undefined;
            }
            if (_json_.s1 != undefined) {
                this.s1 = _json_.s1;
            }
            else {
                this.s1 = undefined;
            }
            if (_json_.s2 != undefined) {
                this.s2 = _json_.s2['text'];
            }
            else {
                this.s2 = undefined;
            }
        }
        id;
        x1;
        x2;
        x3;
        x4;
        s1;
        s2;
        resolve(_tables) {
            if (this.x3 != null) {
                this.x3.resolve(_tables);
            }
            if (this.x4 != null) {
                this.x4.resolve(_tables);
            }
        }
    }
    test.TestNull = TestNull;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class TbDemoPrimitive {
        _dataMap;
        _dataList;
        constructor(_json_) {
            this._dataMap = new Map();
            this._dataList = [];
            for (var _json2_ of _json_) {
                let _v;
                _v = new test.DemoPrimitiveTypesTable(_json2_);
                this._dataList.push(_v);
                this._dataMap.set(_v.x4, _v);
            }
        }
        getDataMap() { return this._dataMap; }
        getDataList() { return this._dataList; }
        get(key) { return this._dataMap.get(key); }
        resolve(_tables) {
            for (var v of this._dataList) {
                v.resolve(_tables);
            }
        }
    }
    test.TbDemoPrimitive = TbDemoPrimitive;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class DemoPrimitiveTypesTable {
        constructor(_json_) {
            if (_json_.x1 === undefined) {
                throw new Error();
            }
            this.x1 = _json_.x1;
            if (_json_.x2 === undefined) {
                throw new Error();
            }
            this.x2 = _json_.x2;
            if (_json_.x3 === undefined) {
                throw new Error();
            }
            this.x3 = _json_.x3;
            if (_json_.x4 === undefined) {
                throw new Error();
            }
            this.x4 = _json_.x4;
            if (_json_.x5 === undefined) {
                throw new Error();
            }
            this.x5 = _json_.x5;
            if (_json_.x6 === undefined) {
                throw new Error();
            }
            this.x6 = _json_.x6;
            if (_json_.x7 === undefined) {
                throw new Error();
            }
            this.x7 = _json_.x7;
            if (_json_.s1 === undefined) {
                throw new Error();
            }
            this.s1 = _json_.s1;
            if (_json_.s2 === undefined) {
                throw new Error();
            }
            this.s2 = _json_.s2['text'];
            if (_json_.v2 === undefined) {
                throw new Error();
            }
            this.v2 = Vector2.deserializeFromJson(_json_.v2);
            if (_json_.v3 === undefined) {
                throw new Error();
            }
            this.v3 = Vector3.deserializeFromJson(_json_.v3);
            if (_json_.v4 === undefined) {
                throw new Error();
            }
            this.v4 = Vector4.deserializeFromJson(_json_.v4);
            if (_json_.t1 === undefined) {
                throw new Error();
            }
            this.t1 = _json_.t1;
        }
        x1;
        x2;
        x3;
        x4;
        x5;
        x6;
        x7;
        s1;
        s2;
        v2;
        v3;
        v4;
        t1;
        resolve(_tables) {
        }
    }
    test.DemoPrimitiveTypesTable = DemoPrimitiveTypesTable;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class TbTestString {
        _dataMap;
        _dataList;
        constructor(_json_) {
            this._dataMap = new Map();
            this._dataList = [];
            for (var _json2_ of _json_) {
                let _v;
                _v = new test.TestString(_json2_);
                this._dataList.push(_v);
                this._dataMap.set(_v.id, _v);
            }
        }
        getDataMap() { return this._dataMap; }
        getDataList() { return this._dataList; }
        get(key) { return this._dataMap.get(key); }
        resolve(_tables) {
            for (var v of this._dataList) {
                v.resolve(_tables);
            }
        }
    }
    test.TbTestString = TbTestString;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class TestString {
        constructor(_json_) {
            if (_json_.id === undefined) {
                throw new Error();
            }
            this.id = _json_.id;
            if (_json_.s1 === undefined) {
                throw new Error();
            }
            this.s1 = _json_.s1;
            if (_json_.cs1 === undefined) {
                throw new Error();
            }
            this.cs1 = new test.CompactString(_json_.cs1);
            if (_json_.cs2 === undefined) {
                throw new Error();
            }
            this.cs2 = new test.CompactString(_json_.cs2);
        }
        id;
        s1;
        cs1;
        cs2;
        resolve(_tables) {
            if (this.cs1 != null) {
                this.cs1.resolve(_tables);
            }
            if (this.cs2 != null) {
                this.cs2.resolve(_tables);
            }
        }
    }
    test.TestString = TestString;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class CompactString {
        constructor(_json_) {
            if (_json_.id === undefined) {
                throw new Error();
            }
            this.id = _json_.id;
            if (_json_.s2 === undefined) {
                throw new Error();
            }
            this.s2 = _json_.s2;
            if (_json_.s3 === undefined) {
                throw new Error();
            }
            this.s3 = _json_.s3;
        }
        id;
        s2;
        s3;
        resolve(_tables) {
        }
    }
    test.CompactString = CompactString;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class TbDemoGroup {
        _dataMap;
        _dataList;
        constructor(_json_) {
            this._dataMap = new Map();
            this._dataList = [];
            for (var _json2_ of _json_) {
                let _v;
                _v = new test.DemoGroup(_json2_);
                this._dataList.push(_v);
                this._dataMap.set(_v.id, _v);
            }
        }
        getDataMap() { return this._dataMap; }
        getDataList() { return this._dataList; }
        get(key) { return this._dataMap.get(key); }
        resolve(_tables) {
            for (var v of this._dataList) {
                v.resolve(_tables);
            }
        }
    }
    test.TbDemoGroup = TbDemoGroup;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class DemoGroup {
        constructor(_json_) {
            if (_json_.id === undefined) {
                throw new Error();
            }
            this.id = _json_.id;
            if (_json_.x1 === undefined) {
                throw new Error();
            }
            this.x1 = _json_.x1;
            if (_json_.x2 === undefined) {
                throw new Error();
            }
            this.x2 = _json_.x2;
            if (_json_.x3 === undefined) {
                throw new Error();
            }
            this.x3 = _json_.x3;
            if (_json_.x4 === undefined) {
                throw new Error();
            }
            this.x4 = _json_.x4;
            if (_json_.x5 === undefined) {
                throw new Error();
            }
            this.x5 = new test.InnerGroup(_json_.x5);
        }
        id;
        x1;
        x2;
        x3;
        x4;
        x5;
        resolve(_tables) {
            if (this.x5 != null) {
                this.x5.resolve(_tables);
            }
        }
    }
    test.DemoGroup = DemoGroup;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class InnerGroup {
        constructor(_json_) {
            if (_json_.y1 === undefined) {
                throw new Error();
            }
            this.y1 = _json_.y1;
            if (_json_.y2 === undefined) {
                throw new Error();
            }
            this.y2 = _json_.y2;
            if (_json_.y3 === undefined) {
                throw new Error();
            }
            this.y3 = _json_.y3;
            if (_json_.y4 === undefined) {
                throw new Error();
            }
            this.y4 = _json_.y4;
        }
        y1;
        y2;
        y3;
        y4;
        resolve(_tables) {
        }
    }
    test.InnerGroup = InnerGroup;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class TbDemoGroup_C {
        _dataMap;
        _dataList;
        constructor(_json_) {
            this._dataMap = new Map();
            this._dataList = [];
            for (var _json2_ of _json_) {
                let _v;
                _v = new test.DemoGroup(_json2_);
                this._dataList.push(_v);
                this._dataMap.set(_v.id, _v);
            }
        }
        getDataMap() { return this._dataMap; }
        getDataList() { return this._dataList; }
        get(key) { return this._dataMap.get(key); }
        resolve(_tables) {
            for (var v of this._dataList) {
                v.resolve(_tables);
            }
        }
    }
    test.TbDemoGroup_C = TbDemoGroup_C;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class TbDemoGroup_S {
        _dataMap;
        _dataList;
        constructor(_json_) {
            this._dataMap = new Map();
            this._dataList = [];
            for (var _json2_ of _json_) {
                let _v;
                _v = new test.DemoGroup(_json2_);
                this._dataList.push(_v);
                this._dataMap.set(_v.id, _v);
            }
        }
        getDataMap() { return this._dataMap; }
        getDataList() { return this._dataList; }
        get(key) { return this._dataMap.get(key); }
        resolve(_tables) {
            for (var v of this._dataList) {
                v.resolve(_tables);
            }
        }
    }
    test.TbDemoGroup_S = TbDemoGroup_S;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class TbDemoGroup_E {
        _dataMap;
        _dataList;
        constructor(_json_) {
            this._dataMap = new Map();
            this._dataList = [];
            for (var _json2_ of _json_) {
                let _v;
                _v = new test.DemoGroup(_json2_);
                this._dataList.push(_v);
                this._dataMap.set(_v.id, _v);
            }
        }
        getDataMap() { return this._dataMap; }
        getDataList() { return this._dataList; }
        get(key) { return this._dataMap.get(key); }
        resolve(_tables) {
            for (var v of this._dataList) {
                v.resolve(_tables);
            }
        }
    }
    test.TbDemoGroup_E = TbDemoGroup_E;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class TbTestGlobal {
        _data;
        constructor(_json_) {
            if (_json_.length != 1)
                throw new Error('table mode=one, but size != 1');
            this._data = new test.TestGlobal(_json_[0]);
        }
        getData() { return this._data; }
        get unlockEquip() { return this._data.unlockEquip; }
        get unlockHero() { return this._data.unlockHero; }
        resolve(_tables) {
            this._data.resolve(_tables);
        }
    }
    test.TbTestGlobal = TbTestGlobal;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class TestGlobal {
        constructor(_json_) {
            if (_json_.unlock_equip === undefined) {
                throw new Error();
            }
            this.unlockEquip = _json_.unlock_equip;
            if (_json_.unlock_hero === undefined) {
                throw new Error();
            }
            this.unlockHero = _json_.unlock_hero;
        }
        unlockEquip;
        unlockHero;
        resolve(_tables) {
        }
    }
    test.TestGlobal = TestGlobal;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class TbTestBeRef {
        _dataMap;
        _dataList;
        constructor(_json_) {
            this._dataMap = new Map();
            this._dataList = [];
            for (var _json2_ of _json_) {
                let _v;
                _v = new test.TestBeRef(_json2_);
                this._dataList.push(_v);
                this._dataMap.set(_v.id, _v);
            }
        }
        getDataMap() { return this._dataMap; }
        getDataList() { return this._dataList; }
        get(key) { return this._dataMap.get(key); }
        resolve(_tables) {
            for (var v of this._dataList) {
                v.resolve(_tables);
            }
        }
    }
    test.TbTestBeRef = TbTestBeRef;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class TestBeRef {
        constructor(_json_) {
            if (_json_.id === undefined) {
                throw new Error();
            }
            this.id = _json_.id;
            if (_json_.count === undefined) {
                throw new Error();
            }
            this.count = _json_.count;
        }
        id;
        count;
        resolve(_tables) {
        }
    }
    test.TestBeRef = TestBeRef;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class TbTestRef {
        _dataMap;
        _dataList;
        constructor(_json_) {
            this._dataMap = new Map();
            this._dataList = [];
            for (var _json2_ of _json_) {
                let _v;
                _v = new test.TestRef(_json2_);
                this._dataList.push(_v);
                this._dataMap.set(_v.id, _v);
            }
        }
        getDataMap() { return this._dataMap; }
        getDataList() { return this._dataList; }
        get(key) { return this._dataMap.get(key); }
        resolve(_tables) {
            for (var v of this._dataList) {
                v.resolve(_tables);
            }
        }
    }
    test.TbTestRef = TbTestRef;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class TestRef {
        constructor(_json_) {
            if (_json_.id === undefined) {
                throw new Error();
            }
            this.id = _json_.id;
            if (_json_.x1 === undefined) {
                throw new Error();
            }
            this.x1 = _json_.x1;
            if (_json_.x1_2 === undefined) {
                throw new Error();
            }
            this.x12 = _json_.x1_2;
            if (_json_.x2 === undefined) {
                throw new Error();
            }
            this.x2 = _json_.x2;
            if (_json_.a1 === undefined) {
                throw new Error();
            }
            this.a1 = _json_.a1;
            if (_json_.a2 === undefined) {
                throw new Error();
            }
            this.a2 = _json_.a2;
            if (_json_.b1 === undefined) {
                throw new Error();
            }
            this.b1 = _json_.b1;
            if (_json_.b2 === undefined) {
                throw new Error();
            }
            this.b2 = _json_.b2;
            if (_json_.c1 === undefined) {
                throw new Error();
            }
            this.c1 = _json_.c1;
            if (_json_.c2 === undefined) {
                throw new Error();
            }
            this.c2 = _json_.c2;
            if (_json_.d1 === undefined) {
                throw new Error();
            }
            this.d1 = new Map();
            for (var _entry_ of _json_.d1) {
                let _k;
                _k = _entry_[0];
                let _v;
                _v = _entry_[1];
                this.d1.set(_k, _v);
            }
            if (_json_.d2 === undefined) {
                throw new Error();
            }
            this.d2 = new Map();
            for (var _entry_ of _json_.d2) {
                let _k;
                _k = _entry_[0];
                let _v;
                _v = _entry_[1];
                this.d2.set(_k, _v);
            }
            if (_json_.e1 === undefined) {
                throw new Error();
            }
            this.e1 = _json_.e1;
            if (_json_.e2 === undefined) {
                throw new Error();
            }
            this.e2 = _json_.e2;
            if (_json_.e3 === undefined) {
                throw new Error();
            }
            this.e3 = _json_.e3;
            if (_json_.f1 === undefined) {
                throw new Error();
            }
            this.f1 = _json_.f1;
            if (_json_.f2 === undefined) {
                throw new Error();
            }
            this.f2 = _json_.f2;
            if (_json_.f3 === undefined) {
                throw new Error();
            }
            this.f3 = _json_.f3;
        }
        id;
        x1;
        x1_Ref = undefined;
        x12;
        x2;
        x2_Ref = undefined;
        a1;
        a2;
        b1;
        b2;
        c1;
        c2;
        d1;
        d2;
        e1;
        e2;
        e3;
        f1;
        f2;
        f3;
        resolve(_tables) {
            this.x1_Ref = _tables.get('test.TbTestBeRef').get(this.x1);
            this.x2_Ref = _tables.get('test.TbTestBeRef').get(this.x2);
        }
    }
    test.TestRef = TestRef;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class TbTestSize {
        _dataMap;
        _dataList;
        constructor(_json_) {
            this._dataMap = new Map();
            this._dataList = [];
            for (var _json2_ of _json_) {
                let _v;
                _v = new test.TestSize(_json2_);
                this._dataList.push(_v);
                this._dataMap.set(_v.id, _v);
            }
        }
        getDataMap() { return this._dataMap; }
        getDataList() { return this._dataList; }
        get(key) { return this._dataMap.get(key); }
        resolve(_tables) {
            for (var v of this._dataList) {
                v.resolve(_tables);
            }
        }
    }
    test.TbTestSize = TbTestSize;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class TestSize {
        constructor(_json_) {
            if (_json_.id === undefined) {
                throw new Error();
            }
            this.id = _json_.id;
            if (_json_.x1 === undefined) {
                throw new Error();
            }
            this.x1 = _json_.x1;
            if (_json_.x2 === undefined) {
                throw new Error();
            }
            this.x2 = _json_.x2;
            if (_json_.x3 === undefined) {
                throw new Error();
            }
            this.x3 = _json_.x3;
            if (_json_.x4 === undefined) {
                throw new Error();
            }
            this.x4 = new Map();
            for (var _entry_ of _json_.x4) {
                let _k;
                _k = _entry_[0];
                let _v;
                _v = _entry_[1];
                this.x4.set(_k, _v);
            }
        }
        id;
        x1;
        x2;
        x3;
        x4;
        resolve(_tables) {
        }
    }
    test.TestSize = TestSize;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class TbTestSet {
        _dataMap;
        _dataList;
        constructor(_json_) {
            this._dataMap = new Map();
            this._dataList = [];
            for (var _json2_ of _json_) {
                let _v;
                _v = new test.TestSet(_json2_);
                this._dataList.push(_v);
                this._dataMap.set(_v.id, _v);
            }
        }
        getDataMap() { return this._dataMap; }
        getDataList() { return this._dataList; }
        get(key) { return this._dataMap.get(key); }
        resolve(_tables) {
            for (var v of this._dataList) {
                v.resolve(_tables);
            }
        }
    }
    test.TbTestSet = TbTestSet;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class TestSet {
        constructor(_json_) {
            if (_json_.id === undefined) {
                throw new Error();
            }
            this.id = _json_.id;
            if (_json_.x1 === undefined) {
                throw new Error();
            }
            this.x1 = _json_.x1;
            if (_json_.x2 === undefined) {
                throw new Error();
            }
            this.x2 = _json_.x2;
            if (_json_.x3 === undefined) {
                throw new Error();
            }
            this.x3 = _json_.x3;
            if (_json_.x4 === undefined) {
                throw new Error();
            }
            {
                this.x4 = [];
                for (let _ele of _json_.x4) {
                    let _e;
                    _e = _ele;
                    this.x4.push(_e);
                }
            }
        }
        id;
        x1;
        x2;
        x3;
        x4;
        resolve(_tables) {
        }
    }
    test.TestSet = TestSet;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class TbDetectCsvEncoding {
        _dataMap;
        _dataList;
        constructor(_json_) {
            this._dataMap = new Map();
            this._dataList = [];
            for (var _json2_ of _json_) {
                let _v;
                _v = new test.DetectEncoding(_json2_);
                this._dataList.push(_v);
                this._dataMap.set(_v.id, _v);
            }
        }
        getDataMap() { return this._dataMap; }
        getDataList() { return this._dataList; }
        get(key) { return this._dataMap.get(key); }
        resolve(_tables) {
            for (var v of this._dataList) {
                v.resolve(_tables);
            }
        }
    }
    test.TbDetectCsvEncoding = TbDetectCsvEncoding;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class DetectEncoding {
        constructor(_json_) {
            if (_json_.id === undefined) {
                throw new Error();
            }
            this.id = _json_.id;
            if (_json_.name === undefined) {
                throw new Error();
            }
            this.name = _json_.name;
        }
        id;
        name;
        resolve(_tables) {
        }
    }
    test.DetectEncoding = DetectEncoding;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class TbDefineFromExcel {
        _dataMap;
        _dataList;
        constructor(_json_) {
            this._dataMap = new Map();
            this._dataList = [];
            for (var _json2_ of _json_) {
                let _v;
                _v = new test.DefineFromExcel(_json2_);
                this._dataList.push(_v);
                this._dataMap.set(_v.id, _v);
            }
        }
        getDataMap() { return this._dataMap; }
        getDataList() { return this._dataList; }
        get(key) { return this._dataMap.get(key); }
        resolve(_tables) {
            for (var v of this._dataList) {
                v.resolve(_tables);
            }
        }
    }
    test.TbDefineFromExcel = TbDefineFromExcel;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class DefineFromExcel {
        constructor(_json_) {
            if (_json_.id === undefined) {
                throw new Error();
            }
            this.id = _json_.id;
            if (_json_.x1 === undefined) {
                throw new Error();
            }
            this.x1 = _json_.x1;
            if (_json_.x5 === undefined) {
                throw new Error();
            }
            this.x5 = _json_.x5;
            if (_json_.x6 === undefined) {
                throw new Error();
            }
            this.x6 = _json_.x6;
            if (_json_.x8 === undefined) {
                throw new Error();
            }
            this.x8 = _json_.x8;
            if (_json_.x10 === undefined) {
                throw new Error();
            }
            this.x10 = _json_.x10;
            if (_json_.x13 === undefined) {
                throw new Error();
            }
            this.x13 = _json_.x13;
            if (_json_.x14 === undefined) {
                throw new Error();
            }
            this.x14 = test.DemoDynamic.constructorFrom(_json_.x14);
            if (_json_.v2 === undefined) {
                throw new Error();
            }
            this.v2 = Vector2.deserializeFromJson(_json_.v2);
            if (_json_.t1 === undefined) {
                throw new Error();
            }
            this.t1 = _json_.t1;
            if (_json_.k1 === undefined) {
                throw new Error();
            }
            this.k1 = _json_.k1;
            if (_json_.k8 === undefined) {
                throw new Error();
            }
            this.k8 = new Map();
            for (var _entry_ of _json_.k8) {
                let _k;
                _k = _entry_[0];
                let _v;
                _v = _entry_[1];
                this.k8.set(_k, _v);
            }
            if (_json_.k9 === undefined) {
                throw new Error();
            }
            {
                this.k9 = [];
                for (let _ele of _json_.k9) {
                    let _e;
                    _e = new test.DemoE2(_ele);
                    this.k9.push(_e);
                }
            }
        }
        /**
         * 这是id
         */
        id;
        /**
         * 字段x1
         */
        x1;
        x5;
        x6;
        x8;
        x10;
        x13;
        x14;
        v2;
        t1;
        k1;
        k8;
        k9;
        resolve(_tables) {
            if (this.x14 != null) {
                this.x14.resolve(_tables);
            }
            for (let _e of this.k9) {
                if (_e != null) {
                    _e.resolve(_tables);
                }
            }
        }
    }
    test.DefineFromExcel = DefineFromExcel;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class TbDefineFromExcelOne {
        _data;
        constructor(_json_) {
            if (_json_.length != 1)
                throw new Error('table mode=one, but size != 1');
            this._data = new test.DefineFromExcelOne(_json_[0]);
        }
        getData() { return this._data; }
        /**
         * 装备解锁等级
         */
        get unlockEquip() { return this._data.unlockEquip; }
        /**
         * 英雄解锁等级
         */
        get unlockHero() { return this._data.unlockHero; }
        get defaultAvatar() { return this._data.defaultAvatar; }
        get defaultItem() { return this._data.defaultItem; }
        resolve(_tables) {
            this._data.resolve(_tables);
        }
    }
    test.TbDefineFromExcelOne = TbDefineFromExcelOne;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class DefineFromExcelOne {
        constructor(_json_) {
            if (_json_.unlock_equip === undefined) {
                throw new Error();
            }
            this.unlockEquip = _json_.unlock_equip;
            if (_json_.unlock_hero === undefined) {
                throw new Error();
            }
            this.unlockHero = _json_.unlock_hero;
            if (_json_.default_avatar === undefined) {
                throw new Error();
            }
            this.defaultAvatar = _json_.default_avatar;
            if (_json_.default_item === undefined) {
                throw new Error();
            }
            this.defaultItem = _json_.default_item;
        }
        /**
         * 装备解锁等级
         */
        unlockEquip;
        /**
         * 英雄解锁等级
         */
        unlockHero;
        defaultAvatar;
        defaultItem;
        resolve(_tables) {
        }
    }
    test.DefineFromExcelOne = DefineFromExcelOne;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class TbTestIndex {
        _dataMap;
        _dataList;
        constructor(_json_) {
            this._dataMap = new Map();
            this._dataList = [];
            for (var _json2_ of _json_) {
                let _v;
                _v = new test.TestIndex(_json2_);
                this._dataList.push(_v);
                this._dataMap.set(_v.id, _v);
            }
        }
        getDataMap() { return this._dataMap; }
        getDataList() { return this._dataList; }
        get(key) { return this._dataMap.get(key); }
        resolve(_tables) {
            for (var v of this._dataList) {
                v.resolve(_tables);
            }
        }
    }
    test.TbTestIndex = TbTestIndex;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class TestIndex {
        constructor(_json_) {
            if (_json_.id === undefined) {
                throw new Error();
            }
            this.id = _json_.id;
            if (_json_.eles === undefined) {
                throw new Error();
            }
            {
                this.eles = [];
                for (let _ele of _json_.eles) {
                    let _e;
                    _e = new test.DemoType1(_ele);
                    this.eles.push(_e);
                }
            }
        }
        id;
        eles;
        resolve(_tables) {
            for (let _e of this.eles) {
                if (_e != null) {
                    _e.resolve(_tables);
                }
            }
        }
    }
    test.TestIndex = TestIndex;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class TbTestMap {
        _dataMap;
        _dataList;
        constructor(_json_) {
            this._dataMap = new Map();
            this._dataList = [];
            for (var _json2_ of _json_) {
                let _v;
                _v = new test.TestMap(_json2_);
                this._dataList.push(_v);
                this._dataMap.set(_v.id, _v);
            }
        }
        getDataMap() { return this._dataMap; }
        getDataList() { return this._dataList; }
        get(key) { return this._dataMap.get(key); }
        resolve(_tables) {
            for (var v of this._dataList) {
                v.resolve(_tables);
            }
        }
    }
    test.TbTestMap = TbTestMap;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class TestMap {
        constructor(_json_) {
            if (_json_.id === undefined) {
                throw new Error();
            }
            this.id = _json_.id;
            if (_json_.x1 === undefined) {
                throw new Error();
            }
            this.x1 = new Map();
            for (var _entry_ of _json_.x1) {
                let _k;
                _k = _entry_[0];
                let _v;
                _v = _entry_[1];
                this.x1.set(_k, _v);
            }
            if (_json_.x2 === undefined) {
                throw new Error();
            }
            this.x2 = new Map();
            for (var _entry_ of _json_.x2) {
                let _k;
                _k = _entry_[0];
                let _v;
                _v = _entry_[1];
                this.x2.set(_k, _v);
            }
            if (_json_.x3 === undefined) {
                throw new Error();
            }
            this.x3 = new Map();
            for (var _entry_ of _json_.x3) {
                let _k;
                _k = _entry_[0];
                let _v;
                _v = _entry_[1];
                this.x3.set(_k, _v);
            }
            if (_json_.x4 === undefined) {
                throw new Error();
            }
            this.x4 = new Map();
            for (var _entry_ of _json_.x4) {
                let _k;
                _k = _entry_[0];
                let _v;
                _v = _entry_[1];
                this.x4.set(_k, _v);
            }
        }
        id;
        id_Ref = undefined;
        x1;
        x2;
        x3;
        x4;
        resolve(_tables) {
            this.id_Ref = _tables.get('test.TbTestIndex').get(this.id);
        }
    }
    test.TestMap = TestMap;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class TbExcelFromJson {
        _dataMap;
        _dataList;
        constructor(_json_) {
            this._dataMap = new Map();
            this._dataList = [];
            for (var _json2_ of _json_) {
                let _v;
                _v = new test.ExcelFromJson(_json2_);
                this._dataList.push(_v);
                this._dataMap.set(_v.x4, _v);
            }
        }
        getDataMap() { return this._dataMap; }
        getDataList() { return this._dataList; }
        get(key) { return this._dataMap.get(key); }
        resolve(_tables) {
            for (var v of this._dataList) {
                v.resolve(_tables);
            }
        }
    }
    test.TbExcelFromJson = TbExcelFromJson;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class ExcelFromJson {
        constructor(_json_) {
            if (_json_.x4 === undefined) {
                throw new Error();
            }
            this.x4 = _json_.x4;
            if (_json_.x1 === undefined) {
                throw new Error();
            }
            this.x1 = _json_.x1;
            if (_json_.x5 === undefined) {
                throw new Error();
            }
            this.x5 = _json_.x5;
            if (_json_.x6 === undefined) {
                throw new Error();
            }
            this.x6 = _json_.x6;
            if (_json_.s1 === undefined) {
                throw new Error();
            }
            this.s1 = _json_.s1;
            if (_json_.s2 === undefined) {
                throw new Error();
            }
            this.s2 = _json_.s2['text'];
            if (_json_.v2 === undefined) {
                throw new Error();
            }
            this.v2 = Vector2.deserializeFromJson(_json_.v2);
            if (_json_.v3 === undefined) {
                throw new Error();
            }
            this.v3 = Vector3.deserializeFromJson(_json_.v3);
            if (_json_.v4 === undefined) {
                throw new Error();
            }
            this.v4 = Vector4.deserializeFromJson(_json_.v4);
            if (_json_.t1 === undefined) {
                throw new Error();
            }
            this.t1 = _json_.t1;
            if (_json_.x12 === undefined) {
                throw new Error();
            }
            this.x12 = new test.DemoType1(_json_.x12);
            if (_json_.x13 === undefined) {
                throw new Error();
            }
            this.x13 = _json_.x13;
            if (_json_.x14 === undefined) {
                throw new Error();
            }
            this.x14 = test.DemoDynamic.constructorFrom(_json_.x14);
            if (_json_.k1 === undefined) {
                throw new Error();
            }
            this.k1 = _json_.k1;
            if (_json_.k8 === undefined) {
                throw new Error();
            }
            this.k8 = new Map();
            for (var _entry_ of _json_.k8) {
                let _k;
                _k = _entry_[0];
                let _v;
                _v = _entry_[1];
                this.k8.set(_k, _v);
            }
            if (_json_.k9 === undefined) {
                throw new Error();
            }
            {
                this.k9 = [];
                for (let _ele of _json_.k9) {
                    let _e;
                    _e = new test.DemoE2(_ele);
                    this.k9.push(_e);
                }
            }
            if (_json_.k15 === undefined) {
                throw new Error();
            }
            {
                this.k15 = [];
                for (let _ele of _json_.k15) {
                    let _e;
                    _e = test.DemoDynamic.constructorFrom(_ele);
                    this.k15.push(_e);
                }
            }
        }
        x4;
        x1;
        x5;
        x6;
        s1;
        s2;
        v2;
        v3;
        v4;
        t1;
        x12;
        x13;
        x14;
        k1;
        k8;
        k9;
        k15;
        resolve(_tables) {
            if (this.x12 != null) {
                this.x12.resolve(_tables);
            }
            if (this.x14 != null) {
                this.x14.resolve(_tables);
            }
            for (let _e of this.k9) {
                if (_e != null) {
                    _e.resolve(_tables);
                }
            }
            for (let _e of this.k15) {
                if (_e != null) {
                    _e.resolve(_tables);
                }
            }
        }
    }
    test.ExcelFromJson = ExcelFromJson;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class TbCompositeJsonTable1 {
        _dataMap;
        _dataList;
        constructor(_json_) {
            this._dataMap = new Map();
            this._dataList = [];
            for (var _json2_ of _json_) {
                let _v;
                _v = new test.CompositeJsonTable1(_json2_);
                this._dataList.push(_v);
                this._dataMap.set(_v.id, _v);
            }
        }
        getDataMap() { return this._dataMap; }
        getDataList() { return this._dataList; }
        get(key) { return this._dataMap.get(key); }
        resolve(_tables) {
            for (var v of this._dataList) {
                v.resolve(_tables);
            }
        }
    }
    test.TbCompositeJsonTable1 = TbCompositeJsonTable1;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class CompositeJsonTable1 {
        constructor(_json_) {
            if (_json_.id === undefined) {
                throw new Error();
            }
            this.id = _json_.id;
            if (_json_.x === undefined) {
                throw new Error();
            }
            this.x = _json_.x;
        }
        id;
        x;
        resolve(_tables) {
        }
    }
    test.CompositeJsonTable1 = CompositeJsonTable1;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class TbCompositeJsonTable2 {
        _dataMap;
        _dataList;
        constructor(_json_) {
            this._dataMap = new Map();
            this._dataList = [];
            for (var _json2_ of _json_) {
                let _v;
                _v = new test.CompositeJsonTable2(_json2_);
                this._dataList.push(_v);
                this._dataMap.set(_v.id, _v);
            }
        }
        getDataMap() { return this._dataMap; }
        getDataList() { return this._dataList; }
        get(key) { return this._dataMap.get(key); }
        resolve(_tables) {
            for (var v of this._dataList) {
                v.resolve(_tables);
            }
        }
    }
    test.TbCompositeJsonTable2 = TbCompositeJsonTable2;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class CompositeJsonTable2 {
        constructor(_json_) {
            if (_json_.id === undefined) {
                throw new Error();
            }
            this.id = _json_.id;
            if (_json_.y === undefined) {
                throw new Error();
            }
            this.y = _json_.y;
        }
        id;
        y;
        resolve(_tables) {
        }
    }
    test.CompositeJsonTable2 = CompositeJsonTable2;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class TbCompositeJsonTable3 {
        _data;
        constructor(_json_) {
            if (_json_.length != 1)
                throw new Error('table mode=one, but size != 1');
            this._data = new test.CompositeJsonTable3(_json_[0]);
        }
        getData() { return this._data; }
        get a() { return this._data.a; }
        get b() { return this._data.b; }
        resolve(_tables) {
            this._data.resolve(_tables);
        }
    }
    test.TbCompositeJsonTable3 = TbCompositeJsonTable3;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class CompositeJsonTable3 {
        constructor(_json_) {
            if (_json_.a === undefined) {
                throw new Error();
            }
            this.a = _json_.a;
            if (_json_.b === undefined) {
                throw new Error();
            }
            this.b = _json_.b;
        }
        a;
        b;
        resolve(_tables) {
        }
    }
    test.CompositeJsonTable3 = CompositeJsonTable3;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class TbExcelFromJsonMultiRow {
        _dataMap;
        _dataList;
        constructor(_json_) {
            this._dataMap = new Map();
            this._dataList = [];
            for (var _json2_ of _json_) {
                let _v;
                _v = new test.ExcelFromJsonMultiRow(_json2_);
                this._dataList.push(_v);
                this._dataMap.set(_v.id, _v);
            }
        }
        getDataMap() { return this._dataMap; }
        getDataList() { return this._dataList; }
        get(key) { return this._dataMap.get(key); }
        resolve(_tables) {
            for (var v of this._dataList) {
                v.resolve(_tables);
            }
        }
    }
    test.TbExcelFromJsonMultiRow = TbExcelFromJsonMultiRow;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class ExcelFromJsonMultiRow {
        constructor(_json_) {
            if (_json_.id === undefined) {
                throw new Error();
            }
            this.id = _json_.id;
            if (_json_.x === undefined) {
                throw new Error();
            }
            this.x = _json_.x;
            if (_json_.items === undefined) {
                throw new Error();
            }
            {
                this.items = [];
                for (let _ele of _json_.items) {
                    let _e;
                    _e = new test.TestRow(_ele);
                    this.items.push(_e);
                }
            }
        }
        id;
        x;
        items;
        resolve(_tables) {
            for (let _e of this.items) {
                if (_e != null) {
                    _e.resolve(_tables);
                }
            }
        }
    }
    test.ExcelFromJsonMultiRow = ExcelFromJsonMultiRow;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class TestRow {
        constructor(_json_) {
            if (_json_.x === undefined) {
                throw new Error();
            }
            this.x = _json_.x;
            if (_json_.y === undefined) {
                throw new Error();
            }
            this.y = _json_.y;
            if (_json_.z === undefined) {
                throw new Error();
            }
            this.z = _json_.z;
            if (_json_.a === undefined) {
                throw new Error();
            }
            this.a = new test.Test3(_json_.a);
            if (_json_.b === undefined) {
                throw new Error();
            }
            this.b = _json_.b;
        }
        x;
        y;
        z;
        a;
        b;
        resolve(_tables) {
            if (this.a != null) {
                this.a.resolve(_tables);
            }
        }
    }
    test.TestRow = TestRow;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class Test3 {
        constructor(_json_) {
            if (_json_.x === undefined) {
                throw new Error();
            }
            this.x = _json_.x;
            if (_json_.y === undefined) {
                throw new Error();
            }
            this.y = _json_.y;
        }
        x;
        y;
        resolve(_tables) {
        }
    }
    test.Test3 = Test3;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class TbDemoGroupDefineFromExcel {
        _dataMap;
        _dataList;
        constructor(_json_) {
            this._dataMap = new Map();
            this._dataList = [];
            for (var _json2_ of _json_) {
                let _v;
                _v = new test.DemoGroup(_json2_);
                this._dataList.push(_v);
                this._dataMap.set(_v.id, _v);
            }
        }
        getDataMap() { return this._dataMap; }
        getDataList() { return this._dataList; }
        get(key) { return this._dataMap.get(key); }
        resolve(_tables) {
            for (var v of this._dataList) {
                v.resolve(_tables);
            }
        }
    }
    test.TbDemoGroupDefineFromExcel = TbDemoGroupDefineFromExcel;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class TbDefineFromExcel2 {
        _dataMap;
        _dataList;
        constructor(_json_) {
            this._dataMap = new Map();
            this._dataList = [];
            for (var _json2_ of _json_) {
                let _v;
                _v = new test.DefineFromExcel2(_json2_);
                this._dataList.push(_v);
                this._dataMap.set(_v.id, _v);
            }
        }
        getDataMap() { return this._dataMap; }
        getDataList() { return this._dataList; }
        get(key) { return this._dataMap.get(key); }
        resolve(_tables) {
            for (var v of this._dataList) {
                v.resolve(_tables);
            }
        }
    }
    test.TbDefineFromExcel2 = TbDefineFromExcel2;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class DefineFromExcel2 {
        constructor(_json_) {
            if (_json_.id === undefined) {
                throw new Error();
            }
            this.id = _json_.id;
            if (_json_.x1 === undefined) {
                throw new Error();
            }
            this.x1 = _json_.x1;
            if (_json_.x5 === undefined) {
                throw new Error();
            }
            this.x5 = _json_.x5;
            if (_json_.x6 === undefined) {
                throw new Error();
            }
            this.x6 = _json_.x6;
            if (_json_.x8 === undefined) {
                throw new Error();
            }
            this.x8 = _json_.x8;
            if (_json_.x10 === undefined) {
                throw new Error();
            }
            this.x10 = _json_.x10;
            if (_json_.x13 === undefined) {
                throw new Error();
            }
            this.x13 = _json_.x13;
            if (_json_.x14 === undefined) {
                throw new Error();
            }
            this.x14 = test.DemoDynamic.constructorFrom(_json_.x14);
            if (_json_.v2 === undefined) {
                throw new Error();
            }
            this.v2 = Vector2.deserializeFromJson(_json_.v2);
            if (_json_.t1 === undefined) {
                throw new Error();
            }
            this.t1 = _json_.t1;
            if (_json_.k1 === undefined) {
                throw new Error();
            }
            this.k1 = _json_.k1;
            if (_json_.k8 === undefined) {
                throw new Error();
            }
            this.k8 = new Map();
            for (var _entry_ of _json_.k8) {
                let _k;
                _k = _entry_[0];
                let _v;
                _v = _entry_[1];
                this.k8.set(_k, _v);
            }
            if (_json_.k9 === undefined) {
                throw new Error();
            }
            {
                this.k9 = [];
                for (let _ele of _json_.k9) {
                    let _e;
                    _e = new test.DemoE2(_ele);
                    this.k9.push(_e);
                }
            }
        }
        /**
         * 这是id
         */
        id;
        /**
         * 字段x1
         */
        x1;
        x5;
        x6;
        x8;
        x10;
        x13;
        x14;
        v2;
        t1;
        k1;
        k8;
        k9;
        resolve(_tables) {
            if (this.x14 != null) {
                this.x14.resolve(_tables);
            }
            for (let _e of this.k9) {
                if (_e != null) {
                    _e.resolve(_tables);
                }
            }
        }
    }
    test.DefineFromExcel2 = DefineFromExcel2;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class TbTestExcelBean {
        _dataMap;
        _dataList;
        constructor(_json_) {
            this._dataMap = new Map();
            this._dataList = [];
            for (var _json2_ of _json_) {
                let _v;
                _v = new test.TestExcelBean1(_json2_);
                this._dataList.push(_v);
                this._dataMap.set(_v.x1, _v);
            }
        }
        getDataMap() { return this._dataMap; }
        getDataList() { return this._dataList; }
        get(key) { return this._dataMap.get(key); }
        resolve(_tables) {
            for (var v of this._dataList) {
                v.resolve(_tables);
            }
        }
    }
    test.TbTestExcelBean = TbTestExcelBean;
})(test = exports.test || (exports.test = {}));
(function (test) {
    /**
     * 这是个测试excel结构
     */
    class TestExcelBean1 {
        constructor(_json_) {
            if (_json_.x1 === undefined) {
                throw new Error();
            }
            this.x1 = _json_.x1;
            if (_json_.x2 === undefined) {
                throw new Error();
            }
            this.x2 = _json_.x2;
            if (_json_.x3 === undefined) {
                throw new Error();
            }
            this.x3 = _json_.x3;
            if (_json_.x4 === undefined) {
                throw new Error();
            }
            this.x4 = _json_.x4;
        }
        /**
         * 最高品质
         */
        x1;
        /**
         * 黑色的
         */
        x2;
        /**
         * 蓝色的
         */
        x3;
        /**
         * 最差品质
         */
        x4;
        resolve(_tables) {
        }
    }
    test.TestExcelBean1 = TestExcelBean1;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class TbTestDesc {
        _dataMap;
        _dataList;
        constructor(_json_) {
            this._dataMap = new Map();
            this._dataList = [];
            for (var _json2_ of _json_) {
                let _v;
                _v = new test.TestDesc(_json2_);
                this._dataList.push(_v);
                this._dataMap.set(_v.id, _v);
            }
        }
        getDataMap() { return this._dataMap; }
        getDataList() { return this._dataList; }
        get(key) { return this._dataMap.get(key); }
        resolve(_tables) {
            for (var v of this._dataList) {
                v.resolve(_tables);
            }
        }
    }
    test.TbTestDesc = TbTestDesc;
})(test = exports.test || (exports.test = {}));
(function (test) {
    class TestDesc {
        constructor(_json_) {
            if (_json_.id === undefined) {
                throw new Error();
            }
            this.id = _json_.id;
            if (_json_.name === undefined) {
                throw new Error();
            }
            this.name = _json_.name;
            if (_json_.a1 === undefined) {
                throw new Error();
            }
            this.a1 = _json_.a1;
            if (_json_.a2 === undefined) {
                throw new Error();
            }
            this.a2 = _json_.a2;
            if (_json_.x1 === undefined) {
                throw new Error();
            }
            this.x1 = new test.H1(_json_.x1);
            if (_json_.x2 === undefined) {
                throw new Error();
            }
            {
                this.x2 = [];
                for (let _ele of _json_.x2) {
                    let _e;
                    _e = new test.H2(_ele);
                    this.x2.push(_e);
                }
            }
            if (_json_.x3 === undefined) {
                throw new Error();
            }
            {
                this.x3 = [];
                for (let _ele of _json_.x3) {
                    let _e;
                    _e = new test.H2(_ele);
                    this.x3.push(_e);
                }
            }
        }
        id;
        /**
         * 禁止
         */
        name;
        /**
         * 测试换行<br/>第2行<br/>第3层
         */
        a1;
        /**
         * 测试转义 &lt; &amp; % / # &gt;
         */
        a2;
        x1;
        /**
         * 这是x2
         */
        x2;
        x3;
        resolve(_tables) {
            if (this.x1 != null) {
                this.x1.resolve(_tables);
            }
            for (let _e of this.x2) {
                if (_e != null) {
                    _e.resolve(_tables);
                }
            }
            for (let _e of this.x3) {
                if (_e != null) {
                    _e.resolve(_tables);
                }
            }
        }
    }
    test.TestDesc = TestDesc;
})(test = exports.test || (exports.test = {}));
class Tables {
    _TbBlackboard;
    get TbBlackboard() { return this._TbBlackboard; }
    _TbBehaviorTree;
    get TbBehaviorTree() { return this._TbBehaviorTree; }
    _TbClazz;
    get TbClazz() { return this._TbClazz; }
    _TbDrop;
    get TbDrop() { return this._TbDrop; }
    _TbGlobalConfig;
    get TbGlobalConfig() { return this._TbGlobalConfig; }
    _TbErrorInfo;
    get TbErrorInfo() { return this._TbErrorInfo; }
    _TbCodeInfo;
    get TbCodeInfo() { return this._TbCodeInfo; }
    _TbItem;
    /**
     * 道具表
     */
    get TbItem() { return this._TbItem; }
    _TbItemFunc;
    get TbItemFunc() { return this._TbItemFunc; }
    _TbItemExtra;
    get TbItemExtra() { return this._TbItemExtra; }
    _TbL10NDemo;
    get TbL10NDemo() { return this._TbL10NDemo; }
    _TbPatchDemo;
    get TbPatchDemo() { return this._TbPatchDemo; }
    _TbSystemMail;
    get TbSystemMail() { return this._TbSystemMail; }
    _TbGlobalMail;
    get TbGlobalMail() { return this._TbGlobalMail; }
    _TbRoleLevelExpAttr;
    get TbRoleLevelExpAttr() { return this._TbRoleLevelExpAttr; }
    _TbRoleLevelBonusCoefficient;
    get TbRoleLevelBonusCoefficient() { return this._TbRoleLevelBonusCoefficient; }
    _TbTestTag;
    get TbTestTag() { return this._TbTestTag; }
    _TbFullTypes;
    get TbFullTypes() { return this._TbFullTypes; }
    _TbSingleton;
    get TbSingleton() { return this._TbSingleton; }
    _TbNotIndexList;
    get TbNotIndexList() { return this._TbNotIndexList; }
    _TbMultiUnionIndexList;
    get TbMultiUnionIndexList() { return this._TbMultiUnionIndexList; }
    _TbMultiIndexList;
    get TbMultiIndexList() { return this._TbMultiIndexList; }
    _TbDataFromMisc;
    get TbDataFromMisc() { return this._TbDataFromMisc; }
    _TbMultiRowRecord;
    get TbMultiRowRecord() { return this._TbMultiRowRecord; }
    _TbMultiRowTitle;
    get TbMultiRowTitle() { return this._TbMultiRowTitle; }
    _TbTestNull;
    get TbTestNull() { return this._TbTestNull; }
    _TbDemoPrimitive;
    get TbDemoPrimitive() { return this._TbDemoPrimitive; }
    _TbTestString;
    get TbTestString() { return this._TbTestString; }
    _TbDemoGroup;
    get TbDemoGroup() { return this._TbDemoGroup; }
    _TbDemoGroup_C;
    get TbDemoGroup_C() { return this._TbDemoGroup_C; }
    _TbDemoGroup_S;
    get TbDemoGroup_S() { return this._TbDemoGroup_S; }
    _TbDemoGroup_E;
    get TbDemoGroup_E() { return this._TbDemoGroup_E; }
    _TbTestGlobal;
    get TbTestGlobal() { return this._TbTestGlobal; }
    _TbTestBeRef;
    get TbTestBeRef() { return this._TbTestBeRef; }
    _TbTestRef;
    get TbTestRef() { return this._TbTestRef; }
    _TbTestSize;
    get TbTestSize() { return this._TbTestSize; }
    _TbTestSet;
    get TbTestSet() { return this._TbTestSet; }
    _TbDetectCsvEncoding;
    get TbDetectCsvEncoding() { return this._TbDetectCsvEncoding; }
    _TbDefineFromExcel;
    get TbDefineFromExcel() { return this._TbDefineFromExcel; }
    _TbDefineFromExcelOne;
    get TbDefineFromExcelOne() { return this._TbDefineFromExcelOne; }
    _TbTestIndex;
    get TbTestIndex() { return this._TbTestIndex; }
    _TbTestMap;
    get TbTestMap() { return this._TbTestMap; }
    _TbExcelFromJson;
    get TbExcelFromJson() { return this._TbExcelFromJson; }
    _TbCompositeJsonTable1;
    get TbCompositeJsonTable1() { return this._TbCompositeJsonTable1; }
    _TbCompositeJsonTable2;
    get TbCompositeJsonTable2() { return this._TbCompositeJsonTable2; }
    _TbCompositeJsonTable3;
    get TbCompositeJsonTable3() { return this._TbCompositeJsonTable3; }
    _TbExcelFromJsonMultiRow;
    get TbExcelFromJsonMultiRow() { return this._TbExcelFromJsonMultiRow; }
    _TbDemoGroupDefineFromExcel;
    get TbDemoGroupDefineFromExcel() { return this._TbDemoGroupDefineFromExcel; }
    _TbDefineFromExcel2;
    get TbDefineFromExcel2() { return this._TbDefineFromExcel2; }
    _TbTestExcelBean;
    get TbTestExcelBean() { return this._TbTestExcelBean; }
    _TbTestDesc;
    get TbTestDesc() { return this._TbTestDesc; }
    constructor(loader) {
        let tables = new Map();
        this._TbBlackboard = new ai.TbBlackboard(loader('ai_tbblackboard'));
        tables.set('ai.TbBlackboard', this._TbBlackboard);
        this._TbBehaviorTree = new ai.TbBehaviorTree(loader('ai_tbbehaviortree'));
        tables.set('ai.TbBehaviorTree', this._TbBehaviorTree);
        this._TbClazz = new blueprint.TbClazz(loader('blueprint_tbclazz'));
        tables.set('blueprint.TbClazz', this._TbClazz);
        this._TbDrop = new bonus.TbDrop(loader('bonus_tbdrop'));
        tables.set('bonus.TbDrop', this._TbDrop);
        this._TbGlobalConfig = new common.TbGlobalConfig(loader('common_tbglobalconfig'));
        tables.set('common.TbGlobalConfig', this._TbGlobalConfig);
        this._TbErrorInfo = new error.TbErrorInfo(loader('error_tberrorinfo'));
        tables.set('error.TbErrorInfo', this._TbErrorInfo);
        this._TbCodeInfo = new error.TbCodeInfo(loader('error_tbcodeinfo'));
        tables.set('error.TbCodeInfo', this._TbCodeInfo);
        this._TbItem = new item.TbItem(loader('item_tbitem'));
        tables.set('item.TbItem', this._TbItem);
        this._TbItemFunc = new item.TbItemFunc(loader('item_tbitemfunc'));
        tables.set('item.TbItemFunc', this._TbItemFunc);
        this._TbItemExtra = new item.TbItemExtra(loader('item_tbitemextra'));
        tables.set('item.TbItemExtra', this._TbItemExtra);
        this._TbL10NDemo = new l10n.TbL10NDemo(loader('l10n_tbl10ndemo'));
        tables.set('l10n.TbL10NDemo', this._TbL10NDemo);
        this._TbPatchDemo = new l10n.TbPatchDemo(loader('l10n_tbpatchdemo'));
        tables.set('l10n.TbPatchDemo', this._TbPatchDemo);
        this._TbSystemMail = new mail.TbSystemMail(loader('mail_tbsystemmail'));
        tables.set('mail.TbSystemMail', this._TbSystemMail);
        this._TbGlobalMail = new mail.TbGlobalMail(loader('mail_tbglobalmail'));
        tables.set('mail.TbGlobalMail', this._TbGlobalMail);
        this._TbRoleLevelExpAttr = new role.TbRoleLevelExpAttr(loader('role_tbrolelevelexpattr'));
        tables.set('role.TbRoleLevelExpAttr', this._TbRoleLevelExpAttr);
        this._TbRoleLevelBonusCoefficient = new role.TbRoleLevelBonusCoefficient(loader('role_tbrolelevelbonuscoefficient'));
        tables.set('role.TbRoleLevelBonusCoefficient', this._TbRoleLevelBonusCoefficient);
        this._TbTestTag = new tag.TbTestTag(loader('tag_tbtesttag'));
        tables.set('tag.TbTestTag', this._TbTestTag);
        this._TbFullTypes = new test.TbFullTypes(loader('test_tbfulltypes'));
        tables.set('test.TbFullTypes', this._TbFullTypes);
        this._TbSingleton = new test.TbSingleton(loader('test_tbsingleton'));
        tables.set('test.TbSingleton', this._TbSingleton);
        this._TbNotIndexList = new test.TbNotIndexList(loader('test_tbnotindexlist'));
        tables.set('test.TbNotIndexList', this._TbNotIndexList);
        this._TbMultiUnionIndexList = new test.TbMultiUnionIndexList(loader('test_tbmultiunionindexlist'));
        tables.set('test.TbMultiUnionIndexList', this._TbMultiUnionIndexList);
        this._TbMultiIndexList = new test.TbMultiIndexList(loader('test_tbmultiindexlist'));
        tables.set('test.TbMultiIndexList', this._TbMultiIndexList);
        this._TbDataFromMisc = new test.TbDataFromMisc(loader('test_tbdatafrommisc'));
        tables.set('test.TbDataFromMisc', this._TbDataFromMisc);
        this._TbMultiRowRecord = new test.TbMultiRowRecord(loader('test_tbmultirowrecord'));
        tables.set('test.TbMultiRowRecord', this._TbMultiRowRecord);
        this._TbMultiRowTitle = new test.TbMultiRowTitle(loader('test_tbmultirowtitle'));
        tables.set('test.TbMultiRowTitle', this._TbMultiRowTitle);
        this._TbTestNull = new test.TbTestNull(loader('test_tbtestnull'));
        tables.set('test.TbTestNull', this._TbTestNull);
        this._TbDemoPrimitive = new test.TbDemoPrimitive(loader('test_tbdemoprimitive'));
        tables.set('test.TbDemoPrimitive', this._TbDemoPrimitive);
        this._TbTestString = new test.TbTestString(loader('test_tbteststring'));
        tables.set('test.TbTestString', this._TbTestString);
        this._TbDemoGroup = new test.TbDemoGroup(loader('test_tbdemogroup'));
        tables.set('test.TbDemoGroup', this._TbDemoGroup);
        this._TbDemoGroup_C = new test.TbDemoGroup_C(loader('test_tbdemogroup_c'));
        tables.set('test.TbDemoGroup_C', this._TbDemoGroup_C);
        this._TbDemoGroup_S = new test.TbDemoGroup_S(loader('test_tbdemogroup_s'));
        tables.set('test.TbDemoGroup_S', this._TbDemoGroup_S);
        this._TbDemoGroup_E = new test.TbDemoGroup_E(loader('test_tbdemogroup_e'));
        tables.set('test.TbDemoGroup_E', this._TbDemoGroup_E);
        this._TbTestGlobal = new test.TbTestGlobal(loader('test_tbtestglobal'));
        tables.set('test.TbTestGlobal', this._TbTestGlobal);
        this._TbTestBeRef = new test.TbTestBeRef(loader('test_tbtestberef'));
        tables.set('test.TbTestBeRef', this._TbTestBeRef);
        this._TbTestRef = new test.TbTestRef(loader('test_tbtestref'));
        tables.set('test.TbTestRef', this._TbTestRef);
        this._TbTestSize = new test.TbTestSize(loader('test_tbtestsize'));
        tables.set('test.TbTestSize', this._TbTestSize);
        this._TbTestSet = new test.TbTestSet(loader('test_tbtestset'));
        tables.set('test.TbTestSet', this._TbTestSet);
        this._TbDetectCsvEncoding = new test.TbDetectCsvEncoding(loader('test_tbdetectcsvencoding'));
        tables.set('test.TbDetectCsvEncoding', this._TbDetectCsvEncoding);
        this._TbDefineFromExcel = new test.TbDefineFromExcel(loader('test_tbdefinefromexcel'));
        tables.set('test.TbDefineFromExcel', this._TbDefineFromExcel);
        this._TbDefineFromExcelOne = new test.TbDefineFromExcelOne(loader('test_tbdefinefromexcelone'));
        tables.set('test.TbDefineFromExcelOne', this._TbDefineFromExcelOne);
        this._TbTestIndex = new test.TbTestIndex(loader('test_tbtestindex'));
        tables.set('test.TbTestIndex', this._TbTestIndex);
        this._TbTestMap = new test.TbTestMap(loader('test_tbtestmap'));
        tables.set('test.TbTestMap', this._TbTestMap);
        this._TbExcelFromJson = new test.TbExcelFromJson(loader('test_tbexcelfromjson'));
        tables.set('test.TbExcelFromJson', this._TbExcelFromJson);
        this._TbCompositeJsonTable1 = new test.TbCompositeJsonTable1(loader('test_tbcompositejsontable1'));
        tables.set('test.TbCompositeJsonTable1', this._TbCompositeJsonTable1);
        this._TbCompositeJsonTable2 = new test.TbCompositeJsonTable2(loader('test_tbcompositejsontable2'));
        tables.set('test.TbCompositeJsonTable2', this._TbCompositeJsonTable2);
        this._TbCompositeJsonTable3 = new test.TbCompositeJsonTable3(loader('test_tbcompositejsontable3'));
        tables.set('test.TbCompositeJsonTable3', this._TbCompositeJsonTable3);
        this._TbExcelFromJsonMultiRow = new test.TbExcelFromJsonMultiRow(loader('test_tbexcelfromjsonmultirow'));
        tables.set('test.TbExcelFromJsonMultiRow', this._TbExcelFromJsonMultiRow);
        this._TbDemoGroupDefineFromExcel = new test.TbDemoGroupDefineFromExcel(loader('test_tbdemogroupdefinefromexcel'));
        tables.set('test.TbDemoGroupDefineFromExcel', this._TbDemoGroupDefineFromExcel);
        this._TbDefineFromExcel2 = new test.TbDefineFromExcel2(loader('test_tbdefinefromexcel2'));
        tables.set('test.TbDefineFromExcel2', this._TbDefineFromExcel2);
        this._TbTestExcelBean = new test.TbTestExcelBean(loader('test_tbtestexcelbean'));
        tables.set('test.TbTestExcelBean', this._TbTestExcelBean);
        this._TbTestDesc = new test.TbTestDesc(loader('test_tbtestdesc'));
        tables.set('test.TbTestDesc', this._TbTestDesc);
        this._TbBlackboard.resolve(tables);
        this._TbBehaviorTree.resolve(tables);
        this._TbClazz.resolve(tables);
        this._TbDrop.resolve(tables);
        this._TbGlobalConfig.resolve(tables);
        this._TbErrorInfo.resolve(tables);
        this._TbCodeInfo.resolve(tables);
        this._TbItem.resolve(tables);
        this._TbItemFunc.resolve(tables);
        this._TbItemExtra.resolve(tables);
        this._TbL10NDemo.resolve(tables);
        this._TbPatchDemo.resolve(tables);
        this._TbSystemMail.resolve(tables);
        this._TbGlobalMail.resolve(tables);
        this._TbRoleLevelExpAttr.resolve(tables);
        this._TbRoleLevelBonusCoefficient.resolve(tables);
        this._TbTestTag.resolve(tables);
        this._TbFullTypes.resolve(tables);
        this._TbSingleton.resolve(tables);
        this._TbNotIndexList.resolve(tables);
        this._TbMultiUnionIndexList.resolve(tables);
        this._TbMultiIndexList.resolve(tables);
        this._TbDataFromMisc.resolve(tables);
        this._TbMultiRowRecord.resolve(tables);
        this._TbMultiRowTitle.resolve(tables);
        this._TbTestNull.resolve(tables);
        this._TbDemoPrimitive.resolve(tables);
        this._TbTestString.resolve(tables);
        this._TbDemoGroup.resolve(tables);
        this._TbDemoGroup_C.resolve(tables);
        this._TbDemoGroup_S.resolve(tables);
        this._TbDemoGroup_E.resolve(tables);
        this._TbTestGlobal.resolve(tables);
        this._TbTestBeRef.resolve(tables);
        this._TbTestRef.resolve(tables);
        this._TbTestSize.resolve(tables);
        this._TbTestSet.resolve(tables);
        this._TbDetectCsvEncoding.resolve(tables);
        this._TbDefineFromExcel.resolve(tables);
        this._TbDefineFromExcelOne.resolve(tables);
        this._TbTestIndex.resolve(tables);
        this._TbTestMap.resolve(tables);
        this._TbExcelFromJson.resolve(tables);
        this._TbCompositeJsonTable1.resolve(tables);
        this._TbCompositeJsonTable2.resolve(tables);
        this._TbCompositeJsonTable3.resolve(tables);
        this._TbExcelFromJsonMultiRow.resolve(tables);
        this._TbDemoGroupDefineFromExcel.resolve(tables);
        this._TbDefineFromExcel2.resolve(tables);
        this._TbTestExcelBean.resolve(tables);
        this._TbTestDesc.resolve(tables);
    }
}
exports.Tables = Tables;
