//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using System.Text.Json;



namespace cfg.ai
{

public sealed partial class UeBlackboard :  ai.Decorator 
{
    public UeBlackboard(JsonElement _json)  : base(_json) 
    {
        NotifyObserver = (ai.ENotifyObserverMode)_json.GetProperty("notify_observer").GetInt32();
        BlackboardKey = _json.GetProperty("blackboard_key").GetString();
        KeyQuery =  ai.KeyQueryOperator.DeserializeKeyQueryOperator(_json.GetProperty("key_query"));
        PostInit();
    }

    public UeBlackboard(int id, string node_name, ai.EFlowAbortMode flow_abort_mode, ai.ENotifyObserverMode notify_observer, string blackboard_key, ai.KeyQueryOperator key_query )  : base(id,node_name,flow_abort_mode) 
    {
        this.NotifyObserver = notify_observer;
        this.BlackboardKey = blackboard_key;
        this.KeyQuery = key_query;
        PostInit();
    }

    public static UeBlackboard DeserializeUeBlackboard(JsonElement _json)
    {
        return new ai.UeBlackboard(_json);
    }

    public ai.ENotifyObserverMode NotifyObserver { get; private set; }
    public string BlackboardKey { get; private set; }
    public ai.KeyQueryOperator KeyQuery { get; private set; }

    public const int __ID__ = -315297507;
    public override int GetTypeId() => __ID__;

    public override void Resolve(Dictionary<string, object> _tables)
    {
        base.Resolve(_tables);
        KeyQuery?.Resolve(_tables);
        PostResolve();
    }

    public override void TranslateText(System.Func<string, string, string> translator)
    {
        base.TranslateText(translator);
        KeyQuery?.TranslateText(translator);
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "NodeName:" + NodeName + ","
        + "FlowAbortMode:" + FlowAbortMode + ","
        + "NotifyObserver:" + NotifyObserver + ","
        + "BlackboardKey:" + BlackboardKey + ","
        + "KeyQuery:" + KeyQuery + ","
        + "}";
    }

    partial void PostInit();
    partial void PostResolve();
}
}
