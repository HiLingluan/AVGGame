
require("Mgr.Event.LuaEventKey")

-- des:{事件系统}
-- author:{zpf}
-- date: 2022-01-11 22:10:00
local EventMgr = {}
--hash表
local eventMap = {}
--[[
	eventMap = {
		...,
		"evnetKey" = {
			{ [1] = {func,...},
			{ [2] = {func,...}
		}
		...
	}
--]]
-- 
EventMgr.Add = function(eventKey, func, table)
    --if eventKey == nil or type(eventKey) ~= "number" then
    if eventKey == nil then
        LogError("EventMgr.Add error： eventKey错误" .. tostring(eventKey))
        return
    end
    if type(func) ~= "function" then
        LogError("EventMgr.Add error： 传入的回调类型不是函数")
        return
    end

    if eventMap[eventKey] == nil then
        eventMap[eventKey] = g_CountTable.new()
    end

    eventMap[eventKey]:add(func,table)
end

EventMgr.Remove = function(eventKey, func)
    if eventKey == nil then
        LogError("EventMgr.Remove error： eventKey错误" .. tostring(eventKey))
        return
    end

    if eventMap[eventKey] == nil then
        return
    end
    local listeners = eventMap[eventKey] 
    listeners:del(func)
end

EventMgr.RemoveAll = function(eventKey)
    if eventKey == nil then
        ZLog("EventMgr.RemoveAll error： eventKey错误" .. tostring(eventKey))
        return
    end
    eventMap[eventKey]:clear()
end

local traceback = function(err)
    CS.UnityEngine.Debug.LogError("Lua Error: " .. tostring(err).."\n"..debug.traceback())
end

EventMgr.Dispatcher = function(eventKey, ...)
    if eventKey == nil then
        ZLog("EventMgr.Dispatcher error： eventKey错误" .. tostring(eventKey))
        return
    end
    
    if eventMap[eventKey] == nil or eventMap[eventKey]:count() <= 0 then
        return
    end
    local listeners = eventMap[eventKey]
    for func, table in pairs(listeners._list) do      
        if func then
            if table then
                xpcall(func,traceback,table,...)
            else
                xpcall(func,traceback,...)
            end
        end
    end
end

return EventMgr

