-- des:{FSM}
-- author:{zpf}
-- date: 2021-12-16 09:50:00
--
local FSMMachine = class("FSMMachine")

function FSMMachine:ctor(name,owner,...)
    self:initProperty()
    self.name = name
    local t = {...}
    for i,state in ipairs(t) do
        self.stateDic[state.type] = state
        state.owner = owner
        state.fsm = self
    end
end

function FSMMachine:initProperty()
    self.name = nil               --名称
    self.stateDic = {}            --状态字典
    self.dataDic = {}             --数据字典
    self.currentState = nil       --当前状态
    self.isDestroy = false        --是否销毁
end

function FSMMachine:setData(key,value)
    self.dataDic[key] = value
end

function FSMMachine:getData(key)
    if self.dataDic[key] then
      return  self.dataDic[key]
    end
    return nil
end

function FSMMachine:changeState(type)
    if self.currentState and self.currentState.type == type then
        Log("无法切换到相同状态!===="..tostring(type))
        return
    end

    if self.currentState then
        self.currentState:leave()
    end
    local state = self.stateDic[type]
    self.currentState = state
    state:enter()
end

function FSMMachine:getCurrentState()
    return self.currentState;
end

function FSMMachine:getState(type)
    local state = self.stateDic[type]
    return state
end

function FSMMachine:hasState(type)
   if self.stateDic[type] then
      return true
   end
   return false
end

function FSMMachine:update(deltaTime,unScaleDeltaTime)
    if self.currentState then
        self.currentState:update(deltaTime,unScaleDeltaTime)
    end
end

function FSMMachine:getAllState()
    return self.stateDic
end

function FSMMachine:addState(basestate , owner)
    self.stateDic[basestate.type] = basestate
    basestate.owner = owner
    basestate.fsm = self
end

function FSMMachine:clear()
    if self.currentState then
        self.currentState:onLeave();
    end
    self.currentState = nil
end

function FSMMachine:dispose()
    self.isDestroy = true
    self.dataDic = nil
    self.currentState = nil
    for i,state in ipairs(self.stateDic) do
        state:onDestroy()
    end
end

return FSMMachine