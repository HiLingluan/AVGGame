-- des:{游戏流程管理}
-- author:{zpf}
-- date: 2021-12-16 09:33:00
--
local LoginProcedure = require "Mgr.GameProcedure.LoginProcedure"
local BeginProcedure = require "Mgr.GameProcedure.BeginProcedure"

--除主流程外的流程在此配置
local config = 
{
    [Define.EGameProcedure.Main] = "Mgr.GameProcedure.MainProcedure",
    [Define.EGameProcedure.Read] = "Mgr.GameProcedure.ReadProcedure",
    [Define.EGameProcedure.OutWater] = "Mgr.GameProcedure.OutWaterProcedure",
    [Define.EGameProcedure.Date] = "Mgr.GameProcedure.DateProcedure",
}

GameProcedureMgr = class("GameProcedureMgr")

function GameProcedureMgr:ctor()
    self:initProperty()
    self:init()
end

function GameProcedureMgr:initProperty()
    self.fsm = nil                  --fsm
end

function GameProcedureMgr:init()
    self.fsm = FSMMgr:createFsm("GameProcedure",self,BeginProcedure(),LoginProcedure())
end

function GameProcedureMgr:startProcedure(type)
    self.fsm:changeState(type)
end

function GameProcedureMgr:changeProcedure(type)
    if not self.fsm:hasState(type) then
        local className = config[type]
        if not className then
            LogError("不存在流程===="..tostring(type))
            return
        end
        local procedure = require(className)
        self.fsm:addState(procedure(),self)
    end
    self.fsm:changeState(type)
end

function GameProcedureMgr:getProcedure(type)
    return self.fsm:getState(type)
end

function GameProcedureMgr:hasProcedure(type)
    return self.fsm:hasState(type)
end

--获取当前流程
function GameProcedureMgr:getCurrentProcedure()
    return self.fsm.currentState
end

GameProcedureMgr:ctor()