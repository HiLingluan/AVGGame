-- des:{主场景流程}
-- author:{zpf}
-- date: 2021-12-16 09:33:00
--
local ProcedureBase = require "Mgr.GameProcedure.ProcedureBase"
local MainProcedure = class("MainProcedure",ProcedureBase)
--//-------------------------------------------------------

local EnterMainPageSystem = require "Logic.System.EnterMainPageSystem"

function MainProcedure:ctor()
    MainProcedure.base(self).ctor(self, Define.EGameProcedure.Main)
end

function MainProcedure:onInit()
    self.super.onInit(self)
    self.sceneLoadSuccess = function (sender,e)
        if e.UserData == "Main" then
            self:onSceneLoad()
        end
    end
end

function MainProcedure:initProperty()
    
end

function MainProcedure:onEnter()
    self.super.onEnter(self)
    local hallModelSer = ServiceMgr:GetService(EServiceType.HallModel)
    hallModelSer:onEnter()
    -- Util.AddDelayCallBack(1,function (param)
    --     CSUtil.PlayBGM(GlobalObjectMgr.MainBgmId)
    -- end)
    --local sceneMgr = Context.GetApplicationContext():GetService("SceneMgr")
    GameEntry.Event:Subscribe(LoadSceneSuccessEventArgs.EventId, self.sceneLoadSuccess)
    
    local loadedSceneAssetNames = GameEntry.Scene:GetLoadedSceneAssetNames()
    for i=0,loadedSceneAssetNames.Length - 1 do
        GameEntry.Scene:UnloadScene(loadedSceneAssetNames[i])
    end
    GameEntry.Sound:StopAllLoadingSounds()
    GameEntry.Sound:StopAllLoadedSounds()
    
    GameEntry.Scene:LoadScene(AssetUtility.GetSceneAsset("Main"), Constant.AssetPriority.SceneAsset, "Main")

    -- sceneMgr:LoadSceneAsync("main",CS.UnityEngine.SceneManagement.LoadSceneMode.Single,function (sceneName)
    --     self:onSceneLoad()
    -- end)

    local date_service = ServiceMgr:GetService(EServiceType.DateService)
    if date_service.isDating then
        date_service:onLeave()
    end
    StatUtil.setCurScene(StatConstant.SCENE.Main)
end

function MainProcedure:onUpdate()
    
end

function MainProcedure:onLeave()
    self.super.onLeave(self)
    local hallModelSer = ServiceMgr:GetService(EServiceType.HallModel)
    hallModelSer:onLeave()
    GameEntry.Event:Unsubscribe(LoadSceneSuccessEventArgs.EventId,self.sceneLoadSuccess)

end

function MainProcedure:onDestroy()
    self.super.onDestroy(self)
end

--//--------------------------------Logic--------------------------------

function MainProcedure:onSceneLoad()
    self:openPanel(function (w)
        self:onOpenPanelDone(w)
        local date_service = ServiceMgr:GetService(EServiceType.DateService)
        if date_service.isDating then
            date_service:onLeave()
        end
    end)
end

function MainProcedure:openPanel(func)
    -- local viewType = HallUIService:getRecord()

    -- local isFinish = GuideData:getJumpGuide(9001)
    -- if not isFinish then
    --     local isFromGame = self.fsm:getData("isFromGame")  --是否从游戏内打开
    --     EnterMainPageSystem:guideOpen(func,isFromGame)
    --     self.fsm:setData("isFromGame",true)
    --     return
    -- end
    
    local procedure = self.fsm:getData("LastProcedure")
    if procedure == "ReadProcedure" then
        local isGM = ServiceMgr:GetService(EServiceType.Guide).isGuideGM
        self:setGuideState()
        ViewMgr:Back()
        -- local isDating = ServiceMgr:GetService(EServiceType.DateService).isDating or false;
        -- if isDating then
        --     EnterMainPageSystem:dateReturn(func)
        -- elseif self:isFinishGuide()  or isGM  then
        --     EnterMainPageSystem:readReturnOpen(func)
        -- else
        --     EnterMainPageSystem:selectRoleReturnOpen(func)
        -- end

        --if self:isFinishGuide()  or isGM  then
        --    -- EnterMainPageSystem:readReturnOpen(func)
        --else
        --    EnterMainPageSystem:selectRoleReturnOpen(func)
        --end
    else
        EnterMainPageSystem:mainReturnOpen(func)
    end
    self.fsm:setData("LastProcedure","")
end

function MainProcedure:onOpenPanelDone(w)
    EventMgr.Dispatcher(LuaEventKey.ON_OPEN_CLOSE_TOPSHADOW,false)
end


----选择男主的引导
--function MainProcedure:isFinishGuide()
--    local finish = ServiceMgr:GetService(EServiceType.Guide):getGuideNodeState(1002,1002002)
--    --选择男主引导是否结束
--    return finish
--end

--设置前两集的引导状态
function MainProcedure:setGuideState()
    local setData = ServiceMgr:GetService(EServiceType.StoryDataService):getSetData()
    if setData.setID == 1001001 then
        --第一集引导完成
        GuideData:setGuideProgress(1002,1002001)
        CMSStat.eventFilter(nil, 1002, 1002, nil, 1002001, nil)
    --elseif setData.setID == 1001002 then
    --    --第二集引导完成
    --    GuideData:setGuideProgress(1002,1002004)
    --    CMSStat.eventFilter(nil, 1002, 1002, nil, 1002004, nil)
    end
    LoadingHotUpdate.isEnterRead = false
end

return MainProcedure