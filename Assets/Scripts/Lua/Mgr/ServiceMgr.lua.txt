--服务管理(相当于模块Proxy,和VM功能重叠了)
ServiceMgr = {}

--Serivice类型枚举
EServiceType = {
    Read = 1,                           --阅读模块
    StoryDataService = 3,               --目录数据服务
    StoryCfgService = 4,                --书籍配置信息
    UserData = 5,                       --用户数据服务
    Package = 6,                        --背包服务
    Love = 7,                           --爱心服务
    RewardTips = 8,                     --奖励提示服务
    Setting = 9,                        --设置服务
    MalePartner = 10,                   --男模服务
    Shop = 11,                          --商城服务
    QuickBuy = 12,                      --体力服务
    Task = 13,                          --任务服务
    RewardTipsPre = 14,                 -- 奖励预览
    HallModel = 15,                     -- 大厅模型管理
    Age = 18,                           --年龄段服务
    Pay = 19,                           --支付
    Decompose = 20,                     --道具分解
    FoodBook = 21,                      --食谱服务
    FunctionOpen = 22,                  --功能开启服务
    UnReadMessage = 23,                 --红点服务
    LevelUp = 24,                       --升级服务
    Guide = 25,                         --新手服务
    Sign = 26,                          --签到服务
    Email = 27,                         --邮件服务
    RoleUnlock = 28,                    --男主解锁
    SystemRecord = 29,                  --系统记录
    Fight = 30,                         --战斗
    CardSystem = 31,                    --卡牌系统
    PhoneSystem = 32,                   --手机系统
    ClothPool = 33,                     --换装资源管理服务
    New_StoryDataService = 34,          --目录数据服务
    New_StoryCfgService = 35,           --书籍配置信息
    CardLottery = 36,                   --抽卡服务
    DateService = 37,                   --约会信息
    MiniGame = 39,                      --小游戏
    MaleInfoService = 40,               --个人档案
    PartyService = 41,                  --派对服务
    Explore = 42,                       --探索服务
    CubismService = 43,                 --立绘服务
    Tower = 44,                         --爬塔
    Catalogue = 45,                     --目录
    Activity = 46,                      --活动
    UserConfig = 47,                    --角色全局配置向

    PetSystem = 49,                     --宠物系统

    ReadProp = 48,                      --阅读道具放置
}

local ServiceConf = {
    [EServiceType.Read] =  "Logic.Read.ReadService",
    [EServiceType.StoryCfgService] =  "Logic.Hall.StoryCfgService",
    [EServiceType.StoryDataService] =  "Logic.Hall.StoryDataService",
    [EServiceType.UserData] =  "Logic.UserData.UserDataService",
    [EServiceType.Package] =  "Logic.Package.Data.PackageService",
    [EServiceType.Love] =  "Logic.LoveValue.LoveService",
    [EServiceType.RewardTips] =   "Logic.RewardTips.RewardTipsService",
    [EServiceType.Setting] =   "Logic.Setting.SettingService",
    [EServiceType.MalePartner] =  "Logic.MalePartner.MalePartnerService",
    [EServiceType.Shop] =  "Logic.Shop.ShopService",
    [EServiceType.QuickBuy] =   "Logic.Strength.QuickBuyService",
    [EServiceType.Task] =   "Logic.Task.TaskService",
    [EServiceType.RewardTipsPre] =  "Logic.RewardTipsPre.RewardTipsPreService",
    [EServiceType.HallModel] =  "Logic.HallModel.HallModelService",
    [EServiceType.Age] =  "Logic.AgeSet.AgeService",
    [EServiceType.Pay] =  "Logic.InAppPay.PWKPayService",
    [EServiceType.FoodBook] =   "Logic.FoodReward.FoodRewardService",
    [EServiceType.Decompose] =   "Logic.FoodReward.PropDecompose",
    [EServiceType.FunctionOpen] =  "Logic.FuncOpen.FunctionOpenService",
    [EServiceType.UnReadMessage] =  "Logic.MaleLevelUp.UnReadMessageService",
    [EServiceType.LevelUp] =  "Logic.MaleLevelUp.MaleLevelUpService",
    [EServiceType.Guide] =  "Logic.Guide.PlayerGuideService",
    [EServiceType.Sign] =   "Logic.Sign.SignService",
    [EServiceType.Email] =   "Logic.Email.EmailService",
    [EServiceType.RoleUnlock] =   "Logic.MaleLevelUp.RoleUnlockService",
    [EServiceType.SystemRecord] =  "Service.SystemRecordSercive",
    [EServiceType.Fight] =  "Logic.Fight.FightService",
    [EServiceType.CardSystem] =  "Logic.Card.CardService",
    [EServiceType.PetSystem] = "Logic.Pet.PetService",
    [EServiceType.PhoneSystem] =  "Logic.Phone.PhoneService",
    [EServiceType.CardLottery] =  "Logic.CardLottery.CardLotterySercive",
    [EServiceType.ClothPool] =  "Logic.MalePartner.Clothes.ClothesService",
    [EServiceType.DateService] =  "Logic.Date.SubProcedure.DateServices",
    [EServiceType.MiniGame] =  "Logic.Game.MiniGameService",
    [EServiceType.MaleInfoService] =  "Logic.MaleInfo.MaleInfoService",
    [EServiceType.PartyService] =  "Logic.SetHangUp.PartyDetailService",
    [EServiceType.Explore] =  "Logic.Explore.ExploreService",
    [EServiceType.CubismService] = "Logic.Cubism.CubismService",
    [EServiceType.Tower] = "Logic.Tower.TowerService",
    [EServiceType.Catalogue] = "Logic.RoleCatalogue.CatalogueService",
    [EServiceType.Activity] = "Logic.Activity.ActivityService",
    [EServiceType.UserConfig] = "Service.UserConfigSercive",
    [EServiceType.ReadProp] = "Logic.Read.Prop.ReadPropService",
}

function ServiceMgr:ctor()
    self:initProperty()
    self:init()
end

function ServiceMgr:initProperty()
    self.serviceList = {}
end

function ServiceMgr:init()
    for k, v in pairs(ServiceConf) do
        local class = require(v)
        self:register(k, class)
    end
end

function ServiceMgr:Clear()
    --service得有统一的生命周期
    self.serviceList = {}
end

function ServiceMgr:register(type, service)
    if not self.serviceList[type] then
        self.serviceList[type] = service()
    end
end

--[[
    @desc: 获取服务
    author:{zpf}
    time:2021-05-11 15:33:23
    --@type:
    @return:
]]
function ServiceMgr:GetService(type)
    if self.serviceList[type] then
        return self.serviceList[type]
    end
    return nil
end

--获取C#服务
function ServiceMgr:GetCSService(type)
    local context = Context.GetApplicationContext()
    local o = context:GetService(tostring(type))
    return o
end

--移除服务
function ServiceMgr:RemoveService(type)
    if self.serviceList[type] then
        self.serviceList[type] = nil
    end
end

function ServiceMgr:Destroy()
    for k,service in pairs(self.serviceList) do
        if service.destroy then
            service:destroy()
        end
    end
end

function ServiceMgr:initLaunch()
    self:initProperty()
    local userDataService = require "Logic.UserData.UserDataService"
    self:register(EServiceType.UserData, userDataService)
    local storyDataService = require "Logic.Hall.StoryDataService"
    self:register(EServiceType.StoryDataService, storyDataService)
    local storyCfgService = require "Logic.Hall.StoryCfgService"
    self:register(EServiceType.StoryCfgService, storyCfgService)
end

function ServiceMgr:initAll()
    self:init()
end

ServiceMgr:initLaunch()
