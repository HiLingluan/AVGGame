-- des:{视图管理}
-- author:{zpf}
-- date: 2021-06-10 11:02:00
ViewMgr = {}

local WindowConfig = require "Config.WindowConfig"

function ViewMgr:ctor()
    self.windowManager = GameEntry.Global.globalWindowManager
    self.topCloumnIndex = 1
end

function ViewMgr:initProperty()

end

--//----------------------------------------------------------------------

--[[
    @desc: 
    author:{zpf}
    time:2021-08-18 10:26:56
    --@viewType: 界面类型
	--@func: 回调
	--@param: 参数
    @return:
]]
function ViewMgr:OpenWindow(windowType, func, param)
    if not WindowConfig[windowType] then
        LogWarn("不存在此 窗口 ==" .. windowType)
        return
    end
    local panelConfig = WindowConfig[windowType]
    local windowName = panelConfig.path

    --local windowName = CommonTools.GetFileNameByPath(name)
    self:LoadWindow(
            windowType,
            function(window)
                local windowData = LuaWindowData()
                windowData.param = param
                window.windowData = windowData
                local transition = window:Show()
                transition:OnFinish(
                        function()
                            UIPanelStack:PushFullWindow(window, panelConfig.isPushToStack)
                            if func then
                                func(window)
                            end
                            --如果有需要,就加个if panelConfig.isPushToStack then
                            --TODO:这里上报页面名字可能会有重复不准确,建议上报界面id  by:zpf
                            CMSStat.pageEnter(panelConfig.name or panelConfig.path)
                        end
                )
            end
    )
end

--[[
    @desc: 关闭window
    author:{zpf}
    time:2021-06-24 13:55:09
    --@viewType:
    @return:
]]
function ViewMgr:CloseWindow(windowType, func)
    local viewConf = WindowConfig[windowType]
    if not viewConf then
        LogError("不存在界面类型" .. tostring(windowType) .. "请检查配置!")
        if func then
            func(false)
        end
        return nil
    end

    local windowName = WindowConfig[windowType].path
    --local windowName = CommonTools.GetFileNameByPath(name)
    local window = self.windowManager:Find(windowName, typeof(IWindow))
    if window and window.Visibility then
        window:Hide()
        if func then
            func(true)
        end
        CMSStat.pageExit(windowType);
    else
        if func then
            func(false)
        end
    end
end

--功能跟TopColoumn重复了...但是没有办法...
function ViewMgr:ShowMenu(params)
    if self.topmenu then
        self.topmenu:show(params);
    else
        self:OpenWindow(EWindowType.TopMenu, function(window)
            self.topmenu = window;
            -- self:HideMenu();
        end, params)
    end
end

function ViewMgr:HideMenu()
    if self.topmenu then
        self.topmenu:hide();
    end
end

--[[
    @desc: 加载Window
    author:{zpf}
    time:2021-05-20 10:33:11
    --@viewType:
    @return:
]]
function ViewMgr:LoadWindow(windowType, func)
    local viewConf = WindowConfig[windowType]
    if not viewConf then
        LogError("不存在界面类型" .. tostring(windowType) .. "请检查配置!")
        return nil
    end
    local resPath = viewConf.path
    GameEntry.JUI:LoadWindowAsync(resPath, function(window)
        if func then
            func(window)
        end
    end)
end
--//----------------------------------------------------------------------
--[[
    params = {
        root = 顶部栏放置的根节点
        viewType = 对应的EWindowType类型，标识当前界面
        back = 是否展示返回
        energy = 是否展示体力
        diamond = 是否展示钻石
        coin = 是否展示金币
    }
]]
function ViewMgr:addTopCloumn(params, func)
    if not params.root then
        LogWarn("通用顶部栏必须要有root节点")
    end
    if not params.viewType then
        LogWarn("通用顶部栏必须要有viewType类型标识当前是什么界面")
    end

    --CommonTools.LoadViewAsync(resPath, func)
    CommonTools.GetPrefab("TopCloumn", function(obj)
        --后面再重构
        local VTopCloumn = require "Logic.TopCloumn.VTopCloumn"
        local topColumn = VTopCloumn(obj.gameObject, params, self.topCloumnIndex)
        local luaPrefab = obj.gameObject:GetComponent("JMatrix.LuaPrefab")
        luaPrefab:Register(topColumn)
        CSUtil.SetActive(topColumn.transform, true)
        topColumn.transform.localPosition = Vector3.zero
        topColumn.transform.sizeDelta = Vector2.zero
        topColumn.transform.localScale = Vector3.one

        if func then
            func(topColumn)
        end
        self.topCloumnIndex = self.topCloumnIndex + 1
    end)
end

--一级界面返回接口
function ViewMgr:Back()
    UIPanelStack:Back()
    --CMSStat.pageExit();
end

--清除顶部UI数据
function ViewMgr:RemoveTop()
    UIPanelStack:RemoveTop()
end

function ViewMgr:goMain(func)
    EventMgr.Dispatcher(LuaEventKey.ON_HOMEBTN_CLICK)
    UIPanelStack:ClearStackInfo()
    self:OpenWindow(EWindowType.MainPanel, function()
        local array = CS.System.Array.CreateInstance(typeof(WindowType), 2)
        array[0] = WindowType.POPUP
        array[1] = WindowType.FULL
        local windowList = GlobalWindowManager.Root:FindAllByWindowTypes(array)
        for k, window in pairs(windowList) do
            if not window.dismissed and window.name ~= "Panel_Main" and window.name ~= "Panel_TopShadow" then
                window:Hide(true)
            end
        end
        CMSStat.pageExit();
        if func then
            func()
        end
    end)
end

--[[
    @desc: 销毁window
    author:{author}
    time:2021-06-24 13:58:50
    --@viewType:
    @return:
]]
function ViewMgr:DestroyWindow(viewType, func)
    local viewConf = WindowConfig[viewType]
    if not viewConf then
        LogError("不存在界面类型" .. tostring(viewType) .. "请检查配置!")
        return nil
    end

    local windowName = WindowConfig[viewType].path
    local window = self.windowManager:Find(windowName, typeof(IWindow))
    if window then
        if func then
            func(true)
        end
        window:Hide()
    else
        if func then
            func(false)
        end
    end
end

--获取Window
function ViewMgr:GetWindow(viewType)
    local viewConf = WindowConfig[viewType]
    if not viewConf then
        LogError("不存在界面类型" .. tostring(viewType) .. "请检查配置!")
        return nil
    end

    local windowName = WindowConfig[viewType].path
    --local windowName = CommonTools.GetFileNameByPath(name)
    if not self.windowManager then
        return nil
    end
    local window = self.windowManager:Find(windowName, typeof(IWindow))
    if window then
        return window
    end
    return nil
end

---获取堆栈顶部界面
function ViewMgr:GetStackPeekInfo()
    if not LuaCommonTools.isCSNull(self.windowManager.Current) then
        return UIPanelStack:GetStackPeekInfo()
    end
    return nil
end

---设置界面弹到顶层 ---目前只用月恢复已打开的弹窗
function ViewMgr:SetActiveViewPop(type)
    local win = ViewMgr:GetWindow(type)
    if win and win.Visibility then
        --延时一帧
        Util.AddDelayCallBackNextFrame(function()
            win.transform:SetAsLastSibling()
        end)
    end
end

---获取界面配置
function ViewMgr:GetWindowConfig(windowType)
    if not WindowConfig[windowType] then
        LogWarn("不存在此 窗口 ==" .. windowType)
        return
    end
    local panelConfig = WindowConfig[windowType]
    return panelConfig
end

---获取界面配置
function ViewMgr:GetWindowConfigFormPath(path)
    if self.pathWindowConfig == nil then
        self.pathWindowConfig = {}
        for i, v in pairs(WindowConfig) do
            self.pathWindowConfig[v.path] = v
        end
    end
    if not self.pathWindowConfig[path] then
        LogWarn("不存在此 窗口 ==" .. path)
        return
    end
    local panelConfig = self.pathWindowConfig[path]
    return panelConfig
end

function ViewMgr:DestroyFullPanel()
    local array = CS.System.Array.CreateInstance(typeof(WindowType), 2)
    array[0] = WindowType.POPUP
    array[1] = WindowType.FULL
    local windowList = GlobalWindowManager.Root:FindAllByWindowTypes(array)
    for k, window in pairs(windowList) do
        if window.name ~= "Panel_Loading" and window.name ~= "Panel_TopShadow" then
            --window:Dismiss()
            window:Hide()
        end
    end
    -- self:ClearStackInfo()
end

function ViewMgr:DestroyAllPanel()
    local array = CS.System.Array.CreateInstance(typeof(WindowType), 3)
    array[0] = WindowType.POPUP
    array[1] = WindowType.FULL
    array[2] = WindowType.DIALOG
    local windowList = GlobalWindowManager.Root:FindAllByWindowTypes(array)
    for k, window in pairs(windowList) do
        if window.name ~= "Panel_Loading" and window.name ~= "Panel_TopShadow" then
            --暂时先手动排除loading界面 自己管理
            --window:Dismiss()
            window:Hide()
        end
    end
    -- self:ClearStackInfo()
end

--function ViewMgr:Back()
--    UIPanelStack:Back()
--end

function ViewMgr:ClearStackInfo()
    UIPanelStack:ClearStackInfo()
end

--//----------------------------------------------------------------------

--跳转到任意界面(策划配置向)
function ViewMgr:GotoPanel(type, param)
    if not self:isPanelUnLock(type) then
        return
    end

    if type == EWindowType.ShopPanel then
        self:OpenWindow(EWindowType.ShopPanel, nil, { shopTab = param.shopTab, num = param.pageNum, showHome = param.showHome })
    elseif type == EWindowType.ShopConvertPanel or type == EWindowType.ShopConvertPanel1 then
        self:OpenWindow(EWindowType.ShopPanel, nil, { shopTab = Define.ShopTabType.ExchagneCenter, num = 1 })
    elseif type == EWindowType.ShopConvertPanel2 then
        self:OpenWindow(EWindowType.ShopPanel, nil, { shopTab = Define.ShopTabType.ExchagneCenter, num = 2 })
    elseif type == EWindowType.ShopConvertPanel3 then
        self:OpenWindow(EWindowType.ShopPanel, nil, { shopTab = Define.ShopTabType.ExchagneCenter, num = 3 })
    elseif type == EWindowType.ShopConvertPanel4 then
        self:OpenWindow(EWindowType.ShopPanel, nil, { shopTab = Define.ShopTabType.ExchagneCenter, num = 4 })
    elseif type == EWindowType.ShopConvertPanel5 then
        self:OpenWindow(EWindowType.ShopPanel, nil, { shopTab = Define.ShopTabType.ExchagneCenter, num = 5 })
    elseif type == EWindowType.ShopAchieve then
        self:OpenWindow(EWindowType.ShopPanel, nil, { shopTab = Define.ShopTabType.Achieve })
    elseif type == EWindowType.CardLottery then
        local lottery_id = nil
        if param ~= nil then
            lottery_id = param.gotoCard_id
        end
        self:OpenWindow(EWindowType.CardLottery, nil, { isMainEnter = true, lottery_id = lottery_id })
    elseif type == EWindowType.Card then
        self:OpenWindow(EWindowType.Card, nil, { isMainEnter = true })
    elseif type == EWindowType.Sign then
        EventMgr.Dispatcher(LuaEventKey.ON_GOTO_SIGN_PANEL)
    elseif type == EWindowType.MalePartner then
        ViewMgr:OpenWindow(EWindowType.MalePartner, nil, { isMainEnter = true })
    elseif type == EWindowType.Phone then
        ViewMgr:OpenWindow(EWindowType.Phone, nil, { phoneType = Define.PhoneType.Message, isMainEnter = true })
    elseif type == EWindowType.DateEntry then
        ServiceMgr:GetService(EServiceType.DateService).is_need_request_data = true
        self:OpenWindow(EWindowType.DateEntry)
    elseif type == EWindowType.SelectRoleSide then
        --角色支线
        local param = {}
        param.newEnter = true
        local count = 0
        local callback = function()
            count = count + 1
            if count == 2 then
                ViewMgr:OpenWindow(EWindowType.SelectRoleSide, nil, param)
            end
        end
        HttpMgr.ReqPost(LuaNetUrlConfig.getRoleList, function(code, data)
            if code == 0 then
                param.data = data
                callback()
            end
        end, nil, true)
        LoadSpriteTool.LoadAtlasCollection("Assets/GameMain/Res/Build/AtlasCollection/RoleSide.asset", function(atlasAsset)
            param.atlasAsset = atlasAsset
            callback()
        end)
    elseif type == EWindowType.TowerChapterAndOpenSpeed then
        ViewMgr:OpenWindow(EWindowType.TowerChapter, function(window)
            window:onSpeedBtnClick()
        end)
    else
        self:OpenWindow(type)
    end
end

--界面是否解锁
function ViewMgr:isPanelUnLock(type)
    local isUnlock, config
    local functionService = ServiceMgr:GetService(EServiceType.FunctionOpen)
    if type == EWindowType.MalePartner then
        isUnlock, config = functionService:getFuncUnLockStateAndConfig(Define.EFuncType.MaleHouse)
    elseif type == EWindowType.Package then
        isUnlock, config = functionService:getFuncUnLockStateAndConfig(Define.EFuncType.Package)
    elseif type == EWindowType.ShopPanel or type == EWindowType.ShopConvertPanel1 or type == EWindowType.ShopConvertPanel2 or type == EWindowType.ShopConvertPanel3
            or type == EWindowType.ShopConvertPanel4 or type == EWindowType.ShopConvertPanel5 or type == EWindowType.ShopAchieve then
        isUnlock, config = functionService:getFuncUnLockStateAndConfig(Define.EFuncType.Shop)
    elseif type == EWindowType.TaskPanel then
        isUnlock, config = functionService:getFuncUnLockStateAndConfig(Define.EFuncType.Task)
    elseif type == EWindowType.Phone then
        isUnlock, config = functionService:getFuncUnLockStateAndConfig(Define.EFuncType.Phone)
    elseif type == EWindowType.DateEntry then
        isUnlock, config = functionService:getFuncUnLockStateAndConfig(Define.EFuncType.Date)
    elseif type == EWindowType.Explore then
        isUnlock, config = functionService:getFuncUnLockStateAndConfig(Define.EFuncType.Explore)
    elseif type == EWindowType.SetHangUpDetail or type == EWindowType.SetHangUp then
        isUnlock, config = functionService:getFuncUnLockStateAndConfig(Define.EFuncType.SetHangUpDetail)
    elseif type == EWindowType.Card then
        isUnlock, config = functionService:getFuncUnLockStateAndConfig(Define.EFuncType.Card)
    elseif type == EWindowType.CardLottery then
        isUnlock, config = functionService:getFuncUnLockStateAndConfig(Define.EFuncType.CardLottery)
    elseif type == EWindowType.TowerChapterAndOpenSpeed or type == EWindowType.TowerChapter then
        isUnlock, config = functionService:getFuncUnLockStateAndConfig(Define.EFuncType.Tower)
    else
        isUnlock, config = true, nil
    end

    if not isUnlock then
        if config then
            CommonTools.ShowCommonMsgTip(CommonConfig:getLanguage(config.unlock_desc_key))
        end
    end

    return isUnlock
end

ViewMgr:ctor()
